RUN_ANALYSIS_AND_SIMULATIONS_NR <- TRUE
RUN_ANALYSIS_AND_SIMULATIONS_DURATION <- TRUE
# create time point vector (13 time points from t00, t05...t60)
Time_points_to_include <- 1:13 # full hour
# Time_points_to_include <- 1:5  # include only first 20 minutes - the visible trend (more ants on virus food more pronounced in the first 20 minutes so it might make sense to look at a subset of the data)
total_iterations <- 500 # number of iterations in randomization loops (use 1000 or 10000 for publication)
# in the loaded data block corresponds to the eight days of video recordings -> needs to be renamed to video_session
# a new variable "block" gets created grouping the 4x4 colonies that were recorded as a group (twice)
# 1-4 instead of 1-8
dat_numbers <- rename(dat_numbers, video_session = block)
block_corrected <- NULL
for (i in 1:nrow(dat_numbers)) {
block_old           <- dat_numbers[i, "video_session"]
block_new       <- if(block_old<5) {block_old} else {block_old-4}
block_corrected <- rbind(block_corrected, data.frame(block_new))
}
dat_numbers$block <- block_corrected$block_new
# create empty variables
dynamic_dat_same_t0_Nb      <- NULL
dynamic_dat_shifted_t0_Nb   <- NULL
dynamic_dat_same_t0_Diff      <- NULL
dynamic_dat_shifted_t0_Diff   <- NULL
# fill up the created data frames
for (i in 1:nrow(dat_numbers)){ # i <- 1
colony_id                          <- dat_numbers[i,"colony_id"]
feeding_session                    <- dat_numbers[i,"feeding_session"]
block                              <- dat_numbers[i,"block"]
virus_position                     <- dat_numbers[i,"position_virus_corrected"]
healthy_position                   <- c("left","right")[which(c("left","right")!=virus_position)]
discovery_time_virus               <- period_to_seconds(hms(dat_numbers[i,paste("time_first_ant_",virus_position,sep="")]))
discovery_time_healthy             <- period_to_seconds(hms(dat_numbers[i,paste("time_first_ant_",healthy_position,sep="")]))
Nb_ant_virus_same_t0               <- as.numeric(dat_numbers[i,paste(c("t00","t05","t10","t15","t20","t25","t30","t35","t40","t45","t50","t55","t60"),substr(virus_position,1,1)  ,sep="_")])[Time_points_to_include]
Nb_ant_healthy_same_t0             <- as.numeric(dat_numbers[i,paste(c("t00","t05","t10","t15","t20","t25","t30","t35","t40","t45","t50","t55","t60"),substr(healthy_position,1,1),sep="_")])[Time_points_to_include]
if (discovery_time_virus<discovery_time_healthy){
first_source_discovered          <- "virus"
Nb_ant_virus_shifted_t0          <- Nb_ant_virus_same_t0
Nb_ant_healthy_shifted_t0         <- as.numeric(dat_numbers[i,c("rl00","rl05","rl10","rl15","rl20","rl25","rl30","rl35","rl40","rl45","rl50","rl55","rl60")])[Time_points_to_include]
}else{
first_source_discovered          <- "healthy"
Nb_ant_virus_shifted_t0          <- as.numeric(dat_numbers[i,c("rl00","rl05","rl10","rl15","rl20","rl25","rl30","rl35","rl40","rl45","rl50","rl55","rl60")])[Time_points_to_include]
Nb_ant_healthy_shifted_t0        <- Nb_ant_healthy_same_t0
}
time_since_discovery               <- period_to_seconds(hms(dat_numbers[i,c("t00","t05","t10","t15","t20","t25","t30","t35","t40","t45","t50","t55","t60")]))[Time_points_to_include]  - period_to_seconds(hms(dat_numbers[i,"time_first_ant"]))
dynamic_dat_same_t0_Nb                <- rbind(dynamic_dat_same_t0_Nb, data.frame (colony_id,
feeding_session,
block,
virus_position,
discovery_time_virus,
discovery_time_healthy,
first_source_discovered,
time=rep(time_since_discovery,2),
status = rep(c("virus","healthy"),each=length(time_since_discovery)),
Nb_ants=c(Nb_ant_virus_same_t0,Nb_ant_healthy_same_t0),
stringsAsFactors = F))
dynamic_dat_shifted_t0_Nb              <- rbind(dynamic_dat_shifted_t0_Nb, data.frame (colony_id,
feeding_session,
block,
virus_position,
discovery_time_virus,
discovery_time_healthy,
first_source_discovered,
time=rep(time_since_discovery,2),
status = rep(c("virus","healthy"),each=length(time_since_discovery)),
Nb_ants=c(Nb_ant_virus_shifted_t0,Nb_ant_healthy_shifted_t0),
stringsAsFactors = F))
dynamic_dat_same_t0_Diff                <- rbind(dynamic_dat_same_t0_Diff, data.frame (colony_id,
feeding_session,
block,
virus_position,
discovery_time_virus,
discovery_time_healthy,
first_source_discovered,
time=time_since_discovery,
status = "virus_minus_healthy",
Delta_Nb_ants=Nb_ant_virus_same_t0-Nb_ant_healthy_same_t0,
stringsAsFactors = F))
dynamic_dat_shifted_t0_Diff              <- rbind(dynamic_dat_shifted_t0_Diff, data.frame (colony_id,
feeding_session,
block,
virus_position,
discovery_time_virus,
discovery_time_healthy,
first_source_discovered,
time=time_since_discovery,
status = "virus_minus_healthy",
Delta_Nb_ants=Nb_ant_virus_shifted_t0-Nb_ant_healthy_shifted_t0,
stringsAsFactors = F))
}
#### 2.2 Initial data exploration ####
data <- dynamic_dat_same_t0_Nb
data$time_min <- data$time/60
head(data)
df1 <- group_by(data, colony_id, feeding_session, status) %>%
summarise(
count = n(),
mean = mean(Nb_ants),
first_source_discovered = first(first_source_discovered)
)
boxplot(df1$mean ~ df1$status) #plotting the two feeding sessions pooled (two means per colony)
par(mar=c(5.1, 4.5, 4.1, 1.8),
cex.lab=1.3,
cex.axis=1.3,
cex.main= 1.3)
boxplot(df1$mean ~ df1$status + df1$feeding_session, main = "mean number of ants over time", ylab = "#ants", xlab = "food source",
pars  =  list(xaxt = "n"), ylim = c(0,5.6), cex.lab = 1.3, cex.axis = 1.3, cex.main =1.3)
text(c(1:4), -0.3, labels = c("control", "virus", "control","virus"), pos = 1, xpd = TRUE, cex = 1.3)
text(c(1.5,3.5), 5.4, labels = c("feeding session 1", "feeding session 2"), cex = 1.3)
text(c(1:4), 5, labels = c("a", "c", "b", "c"), font = 2, cex = 1.3) # stats from model below
abline(v=2.5, lty=4)
mod <- lmer(mean ~ status*feeding_session + (1|colony_id) + (1|first_source_discovered) , data=df1 )
Anova(mod)
shapiro.test(residuals(mod)) # with 13 time points  not significant so fine (if using fewer data points datatransformation or another model is required)
# test model assumptions
summary(mod)
compareqqnorm(mod)
aov_residuals <- residuals(object = mod)
shapiro.test(x = aov_residuals) # just non significant --> assumption of normally distributed residuals is ok
par(mfrow=c(2,2))
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
par(mfrow=c(1,1))
#pairwise differences
marginal = lsmeans(mod, ~ status*feeding_session, data = df1)
CLD = cld(marginal,
alpha=0.5,
Letters=letters,
adjust="BH")
CLD
#### 2.4 Modelling - Nr of ants over time ####
# model glmer with time all time points included instead of means
data$time <- as.factor(data$time)
data$feeding_session <- as.factor(data$feeding_session)
model <- glmer(Nb_ants ~ status + time + (1|colony_id) + (1|first_source_discovered) + (1|feeding_session), data=data, family = "poisson")
Anova(model)
data_plot <- data %>% group_by(status, time_min) %>%
summarise(
mean = mean(Nb_ants),
sem = sem(Nb_ants)
) %>% as.data.frame(data_plot)
# smooth or polygon graph (smooth uses the smoothing function in ggplot and the polygon real data)
which_graph <- "polygon" # smooth or polygon
if (which_graph == "smooth") {
ggplot(data = data_plot, aes(x = time_min, y = mean, color = status)) +
geom_point() +
geom_smooth() +
theme_light() +
scale_color_viridis(end = 0.8,
name  ="food source",
breaks=c("healthy", "virus"),
labels=c("control", "virus"),
discrete = TRUE, option = "D") +
ggtitle("Mean number of ants over time") +
xlab("time [min]") +
ylab("mean number of ants") +
theme(text = element_text(size = 20))
} else if (which_graph == "polygon") {
ggplot(data = data_plot, aes(x = time_min, y = mean, color = status)) +
geom_point(size = 2) +
geom_ribbon(aes(ymin=mean-sem, ymax=mean+sem), alpha = 0.2) +
theme_bw() +
scale_color_viridis(end = 0.8,
name  ="food source",
breaks=c("healthy", "virus"),
labels=c("control", "virus"),
discrete = TRUE, option = "D") +
ggtitle("") +
xlab("time [min]") +
ylab("mean number of ants") +
theme(text = element_text(size = 20))
} else {print("revisit the code ;-)")}
#### 2.6 First discovery ####
# get a new data frame with first discovery times
data_plot2 <- data %>% group_by(colony_id, feeding_session, status) %>%
summarise(
mean = mean(Nb_ants),
first_discovered = first(first_source_discovered),
discovery_time_control = first(discovery_time_healthy),
discovery_time_virus = first(discovery_time_virus)
) %>% as.data.frame(data_plot2)
data_plot2_wide <-  reshape(data = data_plot2,
idvar=c("colony_id", "feeding_session", "first_discovered"),
v.names = "mean",
timevar="status",
direction = "wide")
# plot mean number of ants and show which of the food sources was discovered first
ggplot(data_plot2_wide) +
geom_segment(aes(x = 1, xend = 2, y = mean.healthy, yend = mean.virus, color = first_discovered)) +
theme_classic() +
geom_point(aes(x = 1,  y = mean.healthy)) +
geom_point(aes(x = 2, y = mean.virus)) +
scale_x_continuous(name="food source", breaks = c(1,2), labels = c("control", "virus"), limits=c(0.8, 2.2)) +
scale_color_viridis(end = 0.8,
name  ="first discovered",
labels=c("control", "virus"),
discrete = TRUE, option = "D") +
ggtitle("Mean number of ants per food pair") +
ylab("mean number of ants") +
theme(text = element_text(size = 20))
### histogram of first discovery
n_virus_discovered_first <- sum(data_plot2_wide$first_discovered == "virus")
n_max <- nrow(data_plot2_wide)
t <- table(data_plot2_wide$first_discovered)
barplot(t, main = "", xlab = "food source", ylab = "number of first discoveries", ylim = c(0,26), xaxt="n")
axis(1, at=c(0.7, 1.95), labels=c("control", "virus"))
segments(x0 = 0.7, y0 =24, x1 = 1.9)
text(x = 1.3, y = 25, label = "p = 0.07 (glmer bino)", font = 2, cex = 1.1) #stats see just below
#Is that significantly different from 50/50?
# prop.test(n_virus_discovered_first, n_max, alternative = "two.sided", p = 0.5)
# binom.test(n_virus_discovered_first, n_max, p = 0.5) # test if this is 50/50 selection or not
# these test not suitable because the two feeding sessions are not independant (repeated measurements of the same colonies
# needs to be confirmed with alternative test that takes this into account.
# ! With the corrected data the virus food might be discovered first more often ! --> needs to be accounted for when analysing the exploitation of the two food sources
data_plot2_wide <- data_plot2_wide %>%
mutate(first_discovered_binomial = ifelse(first_discovered == "virus", 1, 0))
mod <-glmer(first_discovered_binomial ~ 1 + (1|feeding_session) + (1|colony_id), family = binomial, data = data_plot2_wide)
summary(mod)
# there might be a trend but it is just not significant...
ggplot(data_plot2_wide, aes(x = factor(feeding_session), fill = factor(first_discovered_binomial))) +
geom_bar(position = "stack") +
scale_fill_manual(values = c("0" = "#CCEBC5", "1" = "#FBB4AE"),
labels = c("0" = "Control", "1" = "Virus")) +
labs(x = "Feeding Session", y = "Count of first discovery", fill = "First Discovered") +
scale_y_continuous(limits = c(0, 18), breaks = c(0, 4, 8, 12, 16)) +
theme_classic() +
annotate("text", x = 1.9 , y = 18, label = "p = 0.07 (glmer bino)",
hjust = 1.1, vjust = 2, size = 4)
### Do colonies always have the same preference? Decision fidelity?
## Plot heat map, requires data transformation
heatmap_data <- data_plot2_wide %>%
dplyr::select(colony_id, feeding_session, first_discovered_binomial) %>%
pivot_wider(names_from = feeding_session, values_from = first_discovered_binomial) %>%
tibble::column_to_rownames(var = "colony_id") %>%
as.matrix()
pheatmap(heatmap_data,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = c("#CCEBC5", "#FBB4AE"),
legend = FALSE,
labels_col = c("Week 1", "Week 2"),
show_rownames = TRUE,
show_colnames = TRUE)
#### 2.6.1 Time of first discovery ####
# relabel status
data_plot2_time <- data_plot2 %>%
rename(food_source = status) %>%
mutate(food_source = recode(food_source,
"healthy" = "control",
"virus" = "virus"))
# Reshape the 'discovery_time_control' and 'discovery_time_virus' columns into one column discovery time
data_plot2_time <- data_plot2_time %>%
mutate(discovery_time = ifelse(food_source == "control",
discovery_time_control,
discovery_time_virus)) %>%
dplyr::select(-discovery_time_control, -discovery_time_virus)
# Stats
# time until discovery of each food source
mod <- lmer(sqrt(discovery_time) ~ food_source + (1|colony_id), + (1|feeding_session), data = data_plot2_time)
summary(mod)
Anova(mod)
compareqqnorm(mod); par(mfrow=c(1,1))
test_norm(mod)
hist(resid(mod), breaks = 10)
par(mfrow=c(2,2))
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
par(mfrow=c(1,1))
# Plot
ggplot(data_plot2_time, aes(x = food_source, y = discovery_time, fill = food_source)) +
geom_boxplot(outlier.shape = NA) + #remove outliers to avoid double plotting with the plotting of individual data points.
geom_jitter(width = 0.3, color = "black", alpha = 0.2) +
labs(title = "Discovery Time",
x = "Food Source",
y = "Time (s)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
geom_segment(aes(x = 1.1, xend = 1.9, y = 0.9 * max(discovery_time, na.rm = TRUE),
yend = 0.9 * max(discovery_time, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 0.95 * max(data_plot2_time$discovery_time, na.rm = TRUE),
label = "p = 0.037 (lmer)", color = "black", size = 3)
#### 2.7 Plot Nr of ants over time with shifted t0 ####
# instead of counting time for both food sources starting when the first one is discovered we now look at the data with discovery time for each food sources separately
# thereby minimizing effect of first discovery (but not removing it!!!) and showing the initial recruitment to the food sources.
data_shifted <- dynamic_dat_shifted_t0_Nb
data_shifted$time_min <- data_shifted$time/60
data_plot3 <- data_shifted %>% group_by(status, time_min) %>%
summarise(
mean = mean(Nb_ants),
sem = sem(Nb_ants)
) %>% as.data.frame()
ggplot(data = data_plot3, aes(x = time_min, y = mean, color = status)) +
geom_point(size = 2) +
geom_ribbon(aes(ymin=mean-sem, ymax=mean+sem), alpha = 0.2) +
theme_light() +
scale_color_viridis(end = 0.8,
name  ="food source",
breaks=c("healthy", "virus"),
labels=c("control", "virus"),
discrete = TRUE, option = "D") +
ggtitle("                       initial recruitment") +
xlab("time [min]") +
ylab("mean number of ants")
if (RUN_ANALYSIS_AND_SIMULATIONS_NR) { # RUN_ANALYSIS_AND_SIMULATIONS_NR <- TRUE
for (time_origin in c("same","shifted")){ # time_origin <- "same"
### get dynamic data
dynamic_dat_Nb      <- get(paste("dynamic_dat",time_origin,"t0","Nb",sep="_"))
dynamic_dat_Diff    <- get(paste("dynamic_dat",time_origin,"t0","Diff",sep="_"))
### calculate means and SE create dynamic_summary_dat_Nb objects
dynamic_summary_dat_Nb    <- data.frame(as.matrix(aggregate(Nb_ants   ~feeding_session+status+time,function(x)cbind(mean(x),std.error(x)),data=dynamic_dat_Nb)),stringsAsFactors = F)
names(dynamic_summary_dat_Nb)[which(grepl(".1",names(dynamic_summary_dat_Nb)))] <- gsub(".1","_Mean",names(dynamic_summary_dat_Nb)[which(grepl(".1",names(dynamic_summary_dat_Nb)))])
names(dynamic_summary_dat_Nb)[which(grepl(".2",names(dynamic_summary_dat_Nb)))] <- gsub(".2","_SE",names(dynamic_summary_dat_Nb)[which(grepl(".2",names(dynamic_summary_dat_Nb)))])
dynamic_summary_dat_Nb$Nb_ants_Mean <- as.numeric( dynamic_summary_dat_Nb$Nb_ants_Mean)
dynamic_summary_dat_Nb$Nb_ants_SE   <- as.numeric( dynamic_summary_dat_Nb$Nb_ants_SE)
dynamic_summary_dat_Nb <- dynamic_summary_dat_Nb[order(dynamic_summary_dat_Nb$time),]
### calculate means and SE create dynamic_summary_dat_Diff objects
dynamic_summary_dat_Diff    <- data.frame(as.matrix(aggregate(Delta_Nb_ants   ~feeding_session+status+time,function(x)cbind(mean(x),std.error(x)),data=dynamic_dat_Diff)),stringsAsFactors = F)
names(dynamic_summary_dat_Diff)[which(grepl(".1",names(dynamic_summary_dat_Diff)))] <- gsub(".1","_Mean",names(dynamic_summary_dat_Diff)[which(grepl(".1",names(dynamic_summary_dat_Diff)))])
names(dynamic_summary_dat_Diff)[which(grepl(".2",names(dynamic_summary_dat_Diff)))] <- gsub(".2","_SE",names(dynamic_summary_dat_Diff)[which(grepl(".2",names(dynamic_summary_dat_Diff)))])
dynamic_summary_dat_Diff$Delta_Nb_ants_Mean <- as.numeric( dynamic_summary_dat_Diff$Delta_Nb_ants_Mean)
dynamic_summary_dat_Diff$Delta_Nb_ants_SE   <- as.numeric( dynamic_summary_dat_Diff$Delta_Nb_ants_SE)
dynamic_summary_dat_Diff <- dynamic_summary_dat_Diff[order(dynamic_summary_dat_Diff$time),]
### calculate one mean number of ants for each source, each colony and each feeding session
summary_dat_Nb      <- aggregate(Nb_ants   ~colony_id+feeding_session+block+virus_position+discovery_time_virus+discovery_time_healthy+first_source_discovered+status,FUN=mean,data=dynamic_dat_Nb)
### stats
print( paste("Statistics -",time_origin,"T0"))
model <- lmer(Nb_ants ~ status*feeding_session + (1|colony_id) + (1|first_source_discovered), data=summary_dat_Nb )
print(Anova(model))
print(shapiro.test(residuals(model)))
### plot  TO IMPROVE: SHOULD BE MEANS AND STANDARD ERRORS RATHR THAN BOXPLOT
boxplot(Nb_ants~status+feeding_session,data=summary_dat_Nb)
### NOTE: As feeding session is highly non-significant, we don't need to distinguish between the two in the analysis of randomisation tests
### Plot Dynamic data For Each Session
for (session in c(1,2)){ # session <- 1
ymin <- min( dynamic_summary_dat_Nb$Nb_ants_Mean-dynamic_summary_dat_Nb$Nb_ants_SE )
ymax <- max( dynamic_summary_dat_Nb$Nb_ants_Mean+dynamic_summary_dat_Nb$Nb_ants_SE )
plot(Nb_ants_Mean ~ time, pch=16, col="red",
data=dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="virus"),],
ylim=c(ymin-0.1*(ymax-ymin),ymax+0.1*(ymax-ymin)),bty="l",
main =paste("Session",session,"-", time_origin ,"t0"))
polygon( x= c( dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="virus"),"time"]
,
rev(dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="virus"),"time"]) ) ,
y= c( dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="virus"),"Nb_ants_Mean"] - dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="virus"),"Nb_ants_SE"]
,
rev( dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="virus"),"Nb_ants_Mean"] + dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="virus"),"Nb_ants_SE"])),
col=alpha("red",0.5),border=NA
)
points(Nb_ants_Mean ~ time, pch=16, col="blue",
data=dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="healthy"),])
polygon(  x= c( dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="healthy"),"time"]
,
rev(dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="healthy"),"time"]) ) ,
y= c( dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="healthy"),"Nb_ants_Mean"] - dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="healthy"),"Nb_ants_SE"]
,
rev( dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="healthy"),"Nb_ants_Mean"] + dynamic_summary_dat_Nb[which(dynamic_summary_dat_Nb$feeding_session==session & dynamic_summary_dat_Nb$status=="healthy"),"Nb_ants_SE"])),
col=alpha("blue",0.5),border=NA
)
legend ("topright",legend=c("virus","healthy"),col=c("red","blue"),pch=16,bty="n")
}
### Randomisation test for each session
### Aim: test whether the results are an artifact from virus food tending to be discovered earlier than healthy food
### H0: there is no difference in ant behaviour towards either virus or healthy food, the only relevant point for recruitment is which food was discovered first
### In the observed dataset the virus was discovered first a certain number of time
### The randomisation will consist in randomly drawing the same number of colonies from the total and saying that in these colonies the first source had virus (irrespective of truth), and in all others the first source was healthy irrespective of truth)
### If observed data is an artifact, we should observe a similar difference in number of ants between the two sources in randomised and real data
### Pre-calculations: nb of colonies that found the virus first in each session, and observed difference in number of ants across all colonies and all times
nb_discoveries <- aggregate(colony_id~first_source_discovered+feeding_session ,FUN=length, data= summary_dat_Nb[which(summary_dat_Nb$status=="healthy"),])
observed_Diff    <- aggregate(Delta_Nb_ants   ~ status,FUN=mean,data=dynamic_dat_Diff)
random_data_dynamic_Nb <- NULL
random_data_Diff       <- NULL
pb <- progress_bar$new(
format = "Progress Randomisation: :current/:total [:bar] :percent ETA: :eta",
total = total_iterations,
clear = FALSE,
width = 60
)
for (i in 1 : total_iterations){ ### randomisation loop # i <- 1
rand_Nb   <- NULL
rand_Diff <- NULL
### randomise separately for each session
for (session in c(1,2)){ # session <- 1
nb_virus       <- nb_discoveries[which(nb_discoveries$first_source_discovered=="virus"&nb_discoveries$feeding_session==session),"colony_id"]
subset_Nb   <- dynamic_dat_Nb[which(dynamic_dat_Nb$feeding_session==session),]
subset_Diff <- dynamic_dat_Diff[which(dynamic_dat_Diff$feeding_session==session),]
colony_list <- unique(subset_Nb$colony_id)
hypothetic_virus_first    <- sample(colony_list,size=nb_virus,replace = F)
### now create first_source_discovered_RAND column according to hypothetical status
rand_subset_Nb                                                                                           <- subset_Nb             ; rand_subset_Diff                                                                                             <- subset_Diff
rand_subset_Nb$first_source_discovered_RAND                                                              <- "healthy"             ; rand_subset_Diff$first_source_discovered_RAND                                                                <- "healthy" ;
rand_subset_Nb[which(rand_subset_Nb$colony_id%in%hypothetic_virus_first),"first_source_discovered_RAND"] <- "virus"               ; rand_subset_Diff[which(rand_subset_Diff$colony_id%in%hypothetic_virus_first),"first_source_discovered_RAND"] <- "virus"
### for Nb: copy status column into a new column status_RAND, and switch the values for those colonies who have been assigned a different first source discovered than in the observed data
rand_subset_Nb$status_RAND  <- rand_subset_Nb$status                                                                           <- rand_subset_Nb$status
rand_subset_Nb[which(rand_subset_Nb$first_source_discovered_RAND!=rand_subset_Nb$first_source_discovered &  rand_subset_Nb$status=="virus"),"status_RAND"] <- "healthy"
rand_subset_Nb[which(rand_subset_Nb$first_source_discovered_RAND!=rand_subset_Nb$first_source_discovered &  rand_subset_Nb$status=="healthy"),"status_RAND"] <- "virus"
### for Diff: multiply the rows of colonies who have been assigned a different first source discovered than in the observed data by minus 1
rand_subset_Diff[which(rand_subset_Diff$first_source_discovered_RAND!=rand_subset_Diff$first_source_discovered),"Delta_Nb_ants"] <- (-1)*rand_subset_Diff[which(rand_subset_Diff$first_source_discovered_RAND!=rand_subset_Diff$first_source_discovered),"Delta_Nb_ants"]
### concatenate and store
rand_Nb   <- rbind(rand_Nb  ,data.frame(RAND=i, feeding_session=session, rand_subset_Nb))
rand_Diff <- rbind(rand_Diff,data.frame(RAND=i, feeding_session=session, rand_subset_Diff))
}
### then we use aggregate to get the mean number of ants at each time point in the hypothetical scenario, across all colonies and both feeding events
mean_rand_dat_Nb <- aggregate(Nb_ants ~ status_RAND + time, FUN=mean, data=rand_Nb)
### and we use aggregate to calculate the mean delta nb ant across all times,  all colonies and both feeding events in the hypothetical scenario
mean_rand_dat_Diff <- aggregate(Delta_Nb_ants ~  1, FUN=mean, data=rand_Diff)
### and we concatenate
random_data_dynamic_Nb <- rbind(random_data_dynamic_Nb,data.frame(RAND=i, feeding_session=session, mean_rand_dat_Nb))
random_data_Diff       <- rbind(random_data_Diff      ,data.frame(RAND=i, feeding_session=session, mean_rand_dat_Diff))
pb$tick()
}
### Plot expected vs observed, Delta ants
xmin <- min (c(random_data_Diff$Delta_Nb_ants),observed_Diff[,"Delta_Nb_ants"])
xmax <- max (c(random_data_Diff$Delta_Nb_ants),observed_Diff[,"Delta_Nb_ants"])
hist(random_data_Diff$Delta_Nb_ants,col=alpha("grey",0.5),xlim=c(xmin,xmax),main=paste("Observed vs Expected,",capitalize(time_origin),"T0"), xlab=expression(paste(Delta, " number of ants")))
arrows(x0=observed_Diff[,"Delta_Nb_ants"],
y0=0,
y1=-10,
code=1,
col="black",
lwd=4,
length=0.1)
### P value
if (observed_Diff[,"Delta_Nb_ants"]>median(random_data_Diff$Delta_Nb_ants)){
pval <- 2*length(which(random_data_Diff$Delta_Nb_ants>=observed_Diff[,"Delta_Nb_ants"]))/length(random_data_Diff$Delta_Nb_ants)
mtext(paste("p=",pval),3, cex = 1.3)
}else{
pval <- 2*length(which(random_data_Diff$Delta_Nb_ants<=observed_Diff[,"Delta_Nb_ants"]))/length(random_data_Diff$Delta_Nb_ants)
mtext(paste("p=",pval),3, cex = 1.3)
}
}
}
# get duration in seconds:
dat_duration <- dat_duration %>%
mutate(feeding_duration_seconds = as.numeric(as.difftime(feeding_duration, format="%H:%M:%S", units="secs")))
# get correct position of virus and data from other numbers data frame
# create new variable food source saying for each of the feeding events whether it was no a virus of control food source
for (i in 1:nrow(dat_duration)) { # i <- 1
index <- which(dat_numbers$colony_id == dat_duration$colony_id[i] &
dat_numbers$feeding_session == dat_duration$feeding_session[i])
dat_duration$position_virus[i] <- dat_numbers$position_virus_corrected[index]
dat_duration$treatment[i]      <- dat_numbers$treatment[index]
if (dat_duration$feeding_side[i] == "r") { # get the side at which the feeding event was observed
mapped_feeding_side <- "right"
} else if (dat_duration$feeding_side[i] == "l") {
mapped_feeding_side <- "left"
} else {
mapped_feeding_side <- NA
}
if (mapped_feeding_side == dat_numbers$position_virus_corrected[index]) { #define whether feeding event occured on a virus or control food source
dat_duration$food_source[i] <- "virus"
} else {
dat_duration$food_source[i] <- "control"
}
}
# mean duration of feeding  events based on the two food sources just for the first 5 events per food source
# subset based on event_id (for each event a number saying this was feeding nr X on this food source for left or right)
dat_duration <- dat_duration %>% # extract the number from event_id for new variable
mutate(event_number = as.numeric(gsub("^[^0-9]*(\\d+).*", "\\1", event_id))) %>%
filter(!is.na(event_number))
dat_duration_sub <- subset(dat_duration, event_number <= 5 )
dat_duration_sub %>%
group_by(food_source) %>%
summarize(
mean_feeding_duration = mean(feeding_duration_seconds, na.rm = TRUE),
sd_feeding_duration = sd(feeding_duration_seconds, na.rm = TRUE)
)
# lmm <- lmer(feeding_duration_seconds ~ food_source + (1|colony_id) + (1|block) + (1|feeding_session), data = dat_duration_sub)
# summary(lmm)
# Anova(lmm)
#' Not the right model given the distribution of the residuals--> consider changing to glmer with poisson or antother test.
#' We have repeated measures of the same colonies, data not normally distributed --> non-parametric test for repeated measures.
#' The Friedmann test would be suitable (compares multiple paired groups) alternative to repeated measures Anova.
#' Arrange data and run test:
mean_feeding_duration <- dat_duration_sub %>%
group_by(colony_id, feeding_session, food_source) %>%
summarise(mean_duration = mean(feeding_duration_seconds, na.rm = TRUE)) %>%
ungroup()
wide_data <- mean_feeding_duration %>%
pivot_wider(names_from = c(feeding_session, food_source), values_from = mean_duration)
?pivot_wider
# libraries
# install.packages("pacman")
pacman::p_load(lubridate, plotrix, scales, car, lme4, Hmisc,
dplyr, tidyverse, blmeco, lmtest, lsmeans, lubridate,
emmeans, multcompView, multcomp, viridis, crayon,
e1071, glmmTMB, DHARMa, merTools, tidyr, pheatmap, grid,
progress, ggplot2)
# libraries
# install.packages("pacman")
pacman::p_load(lubridate, plotrix, scales, car, lme4, Hmisc,
dplyr, tidyverse, blmeco, lmtest, lsmeans, lubridate,
emmeans, multcompView, multcomp, viridis, crayon,
e1071, glmmTMB, DHARMa, merTools, tidyr, pheatmap, grid,
progress, ggplot2)
warnings()
install.packages("systemfonts")
install.packages("systemfonts")
install.packages("glmmTMB")
R.version
isntall.packages("tydiverse")
install.packages("tydiverse")
R.version
install.packages("tidyverse")
install.packages("lsmeans")
install.packages("emmeans")
