# Convert feeding_start to a proper datetime format
dat_duration_first <- dat_duration_first %>%
mutate(feeding_start = hms::as_hms(feeding_start))
dat_duration_first
# Identify discovery times for each colony and food source
discovery_times <- dat_duration_first %>%
group_by(colony_id, food_source) %>%
summarize(discovery_time = min(feeding_start, na.rm = TRUE)) %>%
ungroup()
discovery_times
8*60
33*60
22*60
# Merge discovery times with the original data
dat_duration_first <- dat_duration_first %>%
left_join(discovery_times, by = c("colony_id", "food_source"))
# Function to check if feeding_start is within 60 minutes of discovery_time
within_60_minutes <- function(feeding_start, discovery_time) {
feeding_start <= (discovery_time + minutes(60))
}
# Filter data for feedings within 60 minutes of discovery
dat_duration_60min <- dat_duration_first %>%
filter(within_60_minutes(feeding_start, discovery_time))
# Function to check if feeding_start is within 60 minutes of discovery_time
within_60_minutes <- function(feeding_start, discovery_time) {
feeding_start <= (discovery_time + as.duration(minutes(60)))
}
# Filter data for feedings within 60 minutes of discovery
dat_duration_60min <- dat_duration_first %>%
filter(within_60_minutes(feeding_start, discovery_time))
# Calculate total feeding duration for each colony and food source within 60 minutes
total_feeding_duration <- dat_duration_60min %>%
group_by(colony_id, food_source) %>%
summarize(total_duration = sum(feeding_duration_seconds, na.rm = TRUE)) %>%
ungroup()
total_feeding_duration
# Compute the average exploitation for each food source
average_exploitation <- total_feeding_duration %>%
group_by(food_source) %>%
summarize(average_duration = mean(total_duration, na.rm = TRUE),
sd_duration = sd(total_duration, na.rm = TRUE),
n = n(),
se_duration = sd_duration / sqrt(n)) %>%
ungroup()
average_exploitation
# Plot the results
ggplot(average_exploitation, aes(x = food_source, y = average_duration)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = average_duration - se_duration, ymax = average_duration + se_duration),
width = 0.2) +
labs(title = "Average Exploitation of Food Sources over 60 Minutes",
x = "Food Source",
y = "Average Feeding Duration (seconds)") +
theme_minimal()
60*60
# Convert feeding_start to a proper datetime format
dat_duration_first <- dat_duration_first %>%
mutate(feeding_start = hms::as_hms(feeding_start))
# Calculate time since discovery in seconds
dat_duration_first <- dat_duration_first %>%
mutate(time_since_discovery = as.numeric(feeding_start - discovery_time, units = "secs"))
# Filter data to only include times within 3600 seconds
dat_duration_first <- dat_duration_first %>%
filter(time_since_discovery >= 0 & time_since_discovery <= 3600)
# Create a new column for time bins (e.g., 60-second intervals)
dat_duration_first <- dat_duration_first %>%
mutate(time_bin = floor(time_since_discovery / 60) * 60)
# Sum up the feeding durations within each time bin for each food source
exploitation_over_time <- dat_duration_first %>%
group_by(food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE)) %>%
ungroup()
# Plot the results
ggplot(exploitation_over_time, aes(x = time_bin, y = total_exploitation, color = food_source)) +
geom_line(size = 1) +
labs(title = "Exploitation of Food Sources Over Time",
x = "Time Since Discovery (seconds)",
y = "Total Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
# Convert feeding_start to a proper datetime format
dat_duration_first <- dat_duration_first %>%
mutate(feeding_start = hms::as_hms(feeding_start))
# Calculate time since discovery in seconds
dat_duration_first <- dat_duration_first %>%
mutate(time_since_discovery = as.numeric(feeding_start - discovery_time, units = "secs"))
# Filter data to only include times within 3600 seconds
dat_duration_first <- dat_duration_first %>%
filter(time_since_discovery >= 0 & time_since_discovery <= 3600)
# Create a new column for time bins (e.g., 60-second intervals)
dat_duration_first <- dat_duration_first %>%
mutate(time_bin = floor(time_since_discovery / 60) * 60)
# Calculate cumulative sum of feeding durations within each time bin for each food source
exploitation_over_time <- dat_duration_first %>%
group_by(food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE)) %>%
arrange(food_source, time_bin) %>%
group_by(food_source) %>%
mutate(cumulative_exploitation = cumsum(total_exploitation)) %>%
ungroup()
# Plot the cumulative results
ggplot(exploitation_over_time, aes(x = time_bin, y = cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +
labs(title = "Cumulative Exploitation of Food Sources Over Time",
x = "Time Since Discovery (seconds)",
y = "Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
# Plot the results
ggplot(average_exploitation, aes(x = food_source, y = average_duration)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = average_duration - se_duration, ymax = average_duration + se_duration),
width = 0.2) +
labs(title = "Average Exploitation of Food Sources over 60 Minutes post discovery",
x = "Food Source",
y = "Average Feeding Duration (seconds)") +
theme_minimal()
# Convert feeding_start to a proper datetime format
dat_duration_first <- dat_duration_first %>%
mutate(feeding_start = hms::as_hms(feeding_start))
# Calculate time since discovery in seconds
dat_duration_first <- dat_duration_first %>%
mutate(time_since_discovery = as.numeric(feeding_start - discovery_time, units = "secs"))
# Filter data to only include times within 3600 seconds
dat_duration_first <- dat_duration_first %>%
filter(time_since_discovery >= 0 & time_since_discovery <= 3600)
# Create a new column for time bins (e.g., 60-second intervals)
dat_duration_first <- dat_duration_first %>%
mutate(time_bin = floor(time_since_discovery / 60) * 60)
# Calculate cumulative sum of feeding durations within each time bin for each colony and food source
exploitation_per_colony <- dat_duration_first %>%
group_by(colony_id, food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE), .groups = 'drop') %>%
arrange(colony_id, food_source, time_bin) %>%
group_by(colony_id, food_source) %>%
mutate(cumulative_exploitation = cumsum(total_exploitation)) %>%
ungroup()
# Calculate mean cumulative exploitation per time bin for each food source
mean_exploitation_over_time <- exploitation_per_colony %>%
group_by(food_source, time_bin) %>%
summarize(mean_cumulative_exploitation = mean(cumulative_exploitation, na.rm = TRUE), .groups = 'drop')
# Plot the mean cumulative results
ggplot(mean_exploitation_over_time, aes(x = time_bin, y = mean_cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +
labs(title = "Mean Cumulative Exploitation of Food Sources Over Time",
x = "Time Since Discovery (seconds)",
y = "Mean Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
# Convert feeding_start to a proper datetime format
dat_duration_first <- dat_duration_first %>%
mutate(feeding_start = hms::as_hms(feeding_start),
discovery_time = hms::as_hms(discovery_time))
# Calculate time since discovery in seconds
dat_duration_first <- dat_duration_first %>%
mutate(time_since_discovery = as.numeric(feeding_start - discovery_time, units = "secs"))
# Filter data to only include times within 3600 seconds
dat_duration_first <- dat_duration_first %>%
filter(time_since_discovery >= 0 & time_since_discovery <= 3600)
# Create a new column for time bins (e.g., 60-second intervals)
dat_duration_first <- dat_duration_first %>%
mutate(time_bin = floor(time_since_discovery / 60) * 60)
# Calculate cumulative sum of feeding durations within each time bin for each colony and food source
exploitation_per_colony <- dat_duration_first %>%
group_by(colony_id, food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE), .groups = 'drop') %>%
arrange(colony_id, food_source, time_bin) %>%
group_by(colony_id, food_source) %>%
mutate(cumulative_exploitation = cumsum(total_exploitation)) %>%
ungroup()
# Check for consistency in cumulative values
exploitation_per_colony <- exploitation_per_colony %>%
group_by(colony_id, food_source) %>%
mutate(cumulative_exploitation = pmax(cumulative_exploitation, lag(cumulative_exploitation, default = 0))) %>%
ungroup()
# Calculate mean cumulative exploitation per time bin for each food source
mean_exploitation_over_time <- exploitation_per_colony %>%
group_by(food_source, time_bin) %>%
summarize(mean_cumulative_exploitation = mean(cumulative_exploitation, na.rm = TRUE), .groups = 'drop')
# Plot the mean cumulative results
ggplot(mean_exploitation_over_time, aes(x = time_bin, y = mean_cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +
labs(title = "Mean Cumulative Exploitation of Food Sources Over Time",
x = "Time Since Discovery (seconds)",
y = "Mean Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
# Convert feeding_start to a proper datetime format
dat_duration_first <- dat_duration_first %>%
mutate(feeding_start = hms::as_hms(feeding_start))
# Calculate time since discovery in seconds
dat_duration_first <- dat_duration_first %>%
mutate(time_since_discovery = as.numeric(feeding_start - discovery_time, units = "secs"))
# Filter data to only include times within 3600 seconds
dat_duration_first <- dat_duration_first %>%
filter(time_since_discovery >= 0 & time_since_discovery <= 3600)
# Create a new column for time bins (e.g., 60-second intervals)
dat_duration_first <- dat_duration_first %>%
mutate(time_bin = floor(time_since_discovery / 60) * 60)
# Calculate cumulative sum of feeding durations within each time bin for each colony and food source
exploitation_per_colony <- dat_duration_first %>%
group_by(colony_id, food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE), .groups = 'drop') %>%
arrange(colony_id, food_source, time_bin) %>%
group_by(colony_id, food_source) %>%
mutate(cumulative_exploitation = cumsum(total_exploitation)) %>%
ungroup()
# Calculate mean cumulative exploitation per time bin for each food source
mean_exploitation_over_time <- exploitation_per_colony %>%
group_by(food_source, time_bin) %>%
summarize(mean_cumulative_exploitation = mean(cumulative_exploitation, na.rm = TRUE), .groups = 'drop')
# Plot the mean cumulative results
ggplot(mean_exploitation_over_time, aes(x = time_bin, y = mean_cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +
labs(title = "Mean Cumulative Exploitation of Food Sources Over Time",
x = "Time Since Discovery (seconds)",
y = "Mean Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
# Convert feeding_start to a proper datetime format
dat_duration_first <- dat_duration_first %>%
mutate(feeding_start = hms::as_hms(feeding_start))
# Calculate time since discovery in seconds
dat_duration_first <- dat_duration_first %>%
mutate(time_since_discovery = as.numeric(feeding_start - discovery_time, units = "secs"))
# Filter data to only include times within 3600 seconds
dat_duration_first <- dat_duration_first %>%
filter(time_since_discovery >= 0 & time_since_discovery <= 3600)
# Create a new column for time bins (e.g., 60-second intervals)
dat_duration_first <- dat_duration_first %>%
mutate(time_bin = floor(time_since_discovery / 60) * 60)
# Calculate cumulative sum of feeding durations within each time bin for each food source
exploitation_over_time <- dat_duration_first %>%
group_by(food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE)) %>%
arrange(food_source, time_bin) %>%
group_by(food_source) %>%
mutate(cumulative_exploitation = cumsum(total_exploitation)) %>%
ungroup()
# Plot the cumulative results
ggplot(exploitation_over_time, aes(x = time_bin, y = cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +
labs(title = "Cumulative Exploitation of Food Sources Over Time",
x = "Time Since Discovery (seconds)",
y = "Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
# Plot the results
ggplot(average_exploitation, aes(x = food_source, y = average_duration)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = average_duration - se_duration, ymax = average_duration + se_duration),
width = 0.2) +
labs(title = "Average Exploitation of Food Sources over 60 Minutes post discovery",
x = "Food Source",
y = "Average Feeding Duration (seconds)") +
theme_minimal()
dat_duration_first
### colony level summary
dat_summary <- dat_duration_first %>%
group_by(food_source, colony_id) %>%
summarise(
num_feeding_events = n(),
total_feeding_duration = sum(feeding_duration_seconds, na.rm = TRUE)
)
dat_summary <-  as.data.frame(dat_summary)
dat_summary
dat_summary %>%
group_by(food_source) %>%
summarize(
total_duration = sum(total_feeding_duration)
)
# Convert feeding_start to a proper datetime format
dat_duration_first <- dat_duration_first %>%
mutate(feeding_start = hms::as_hms(feeding_start))
# Calculate time since discovery in seconds
dat_duration_first <- dat_duration_first %>%
mutate(time_since_discovery = as.numeric(feeding_start - discovery_time, units = "secs"))
# Filter data to only include times within 3600 seconds
dat_duration_first <- dat_duration_first %>%
filter(time_since_discovery >= 0 & time_since_discovery <= 3600)
# Create a new column for time bins (e.g., 60-second intervals)
dat_duration_first <- dat_duration_first %>%
mutate(time_bin = floor(time_since_discovery / 60) * 60)
# Calculate cumulative sum of feeding durations within each time bin for each food source
exploitation_over_time <- dat_duration_first %>%
group_by(food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE)) %>%
arrange(food_source, time_bin) %>%
group_by(food_source) %>%
mutate(cumulative_exploitation = cumsum(total_exploitation)) %>%
ungroup()
# Plot the cumulative results
ggplot(exploitation_over_time, aes(x = time_bin, y = cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +
labs(title = "Cumulative Exploitation of Food Sources Over Time",
x = "Time Since Discovery (seconds)",
y = "Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
dat_duration_first <- dat_duration_first %>%
mutate(feeding_start = hms::as_hms(feeding_start))
# Calculate time since discovery in seconds
dat_duration_first <- dat_duration_first %>%
mutate(time_since_discovery = as.numeric(feeding_start - discovery_time, units = "secs"))
# Filter data to only include times within 3600 seconds
dat_duration_first <- dat_duration_first %>%
filter(time_since_discovery >= 0 & time_since_discovery <= 3600)
# Create a new column for time bins (e.g., 60-second intervals)
dat_duration_first <- dat_duration_first %>%
mutate(time_bin = floor(time_since_discovery / 60) * 60)
# Calculate cumulative sum of feeding durations within each time bin for each colony and food source
cumulative_per_colony <- dat_duration_first %>%
group_by(colony_id, food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE), .groups = 'drop') %>%
arrange(colony_id, food_source, time_bin) %>%
group_by(colony_id, food_source) %>%
mutate(cumulative_exploitation = cumsum(total_exploitation)) %>%
ungroup()
# Calculate the mean cumulative exploitation across colonies for each food source and time bin
mean_cumulative_exploitation <- cumulative_per_colony %>%
group_by(food_source, time_bin) %>%
summarize(mean_cumulative_exploitation = mean(cumulative_exploitation, na.rm = TRUE), .groups = 'drop')
# Plot the mean cumulative results
ggplot(mean_cumulative_exploitation, aes(x = time_bin, y = mean_cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +
labs(title = "Mean Cumulative Exploitation of Food Sources Over Time",
x = "Time Since Discovery (seconds)",
y = "Mean Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
exploitation_over_time
mean_cumulative_exploitation
# Convert feeding_start to a proper datetime format
dat_duration_first <- dat_duration_first %>%
mutate(feeding_start = hms::as_hms(feeding_start))
# Calculate time since discovery in seconds
dat_duration_first <- dat_duration_first %>%
mutate(time_since_discovery = as.numeric(feeding_start - discovery_time, units = "secs"))
# Filter data to only include times within 3600 seconds
dat_duration_first <- dat_duration_first %>%
filter(time_since_discovery >= 0 & time_since_discovery <= 3600)
# Create a new column for time bins (e.g., 60-second intervals)
dat_duration_first <- dat_duration_first %>%
mutate(time_bin = floor(time_since_discovery / 60) * 60)
# Calculate cumulative sum of feeding durations within each time bin for each colony and food source
cumulative_per_colony <- dat_duration_first %>%
group_by(colony_id, food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE), .groups = 'drop') %>%
arrange(colony_id, food_source, time_bin) %>%
group_by(colony_id, food_source) %>%
mutate(cumulative_exploitation = cumsum(total_exploitation)) %>%
ungroup()
cumulative_per_colony
# Calculate the mean cumulative exploitation across colonies for each food source and time bin
mean_cumulative_exploitation <- cumulative_per_colony %>%
group_by(food_source, time_bin) %>%
summarize(mean_cumulative_exploitation = mean(cumulative_exploitation, na.rm = TRUE), .groups = 'drop')
mean_cumulative_exploitation
cumulative_per_colony
mean_cumulative_exploitation
View(mean_cumulative_exploitation)
cumulative_per_colony <- as.dataframe(cumulative_per_colony)
cumulative_per_colony
cumulative_per_colony <- as.dataframe(cumulative_per_colony)
cumulative_per_colony
cumulative_per_colony <- as.data.frame(cumulative_per_colony)
cumulative_per_colony
# Calculate the mean cumulative exploitation across colonies for each food source and time bin
mean_cumulative_exploitation <- cumulative_per_colony %>%
group_by(food_source, time_bin) %>%
summarize(mean_cumulative_exploitation = mean(cumulative_exploitation, na.rm = TRUE), .groups = 'drop')
mean_cumulative_exploitation
cumulative_per_colony
View(cumulative_per_colony)
mean_cumulative_exploitation
View(mean_cumulative_exploitation)
unique(cumulative_per_colony$colony_id)
length(unique(cumulative_per_colony$colony_id))
# Calculate the mean cumulative exploitation across colonies for each food source and time bin
mean_cumulative_exploitation <-
cumulative_per_colony %>%
group_by(food_source, time_bin) %>%
summarize(cumulative_exploitation = sum(cumulative_exploitation, na.rm = TRUE),
mean_cum_exploitation = cumulative_exploitation/length(unique(cumulative_per_colony$colony_id)),
.groups = 'drop')
# Calculate the mean cumulative exploitation across colonies for each food source and time bin
mean_cumulative_exploitation <- cumulative_per_colony %>%
group_by(food_source, time_bin) %>%
summarize(cumulative_exploitation = sum(cumulative_exploitation, na.rm = TRUE),
mean_cum_exploitation = cumulative_exploitation/length(unique(cumulative_per_colony$colony_id)),
.groups = 'drop')
mean_cumulative_exploitation
# Calculate cumulative sum of feeding durations within each time bin for each colony and food source
cumulative_per_colony <- dat_duration_first %>%
group_by(colony_id, food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE), .groups = 'drop') %>%
arrange(colony_id, food_source, time_bin) %>%
group_by(colony_id, food_source) %>%
mutate(cumulative_exploitation = cumsum(total_exploitation)) %>%
ungroup()
cumulative_per_colony <- as.data.frame(cumulative_per_colony)
cumulative_per_colony
total_exploitation <- dat_duration_first %>%
group_by(colony_id, food_source, time_bin) %>%
summarize(total_exploitation = sum(feeding_duration_seconds, na.rm = TRUE), .groups = 'drop')
time_bins <- seq(0, 3600, by = 60)
complete_grid <- expand_grid(
colony_id = unique(dat_duration_first$colony_id),
food_source = unique(dat_duration_first$food_source),
time_bin = time_bins
)
time_bins
unique(dat_duration_first$colony_id)
complete_grid
# Left join the complete grid with the total_exploitation data
cumulative_per_colony <- complete_grid %>%
left_join(total_exploitation, by = c("colony_id", "food_source", "time_bin")) %>%
replace_na(list(total_exploitation = 0)) %>%
arrange(colony_id, food_source, time_bin) %>%
group_by(colony_id, food_source) %>%
mutate(cumulative_exploitation = cumsum(total_exploitation)) %>%
ungroup()
cumulative_per_colony <- as.data.frame(cumulative_per_colony)
cumulative_per_colony
# Calculate the mean cumulative exploitation across colonies for each food source and time bin
mean_cumulative_exploitation <- cumulative_per_colony %>%
group_by(food_source, time_bin) %>%
summarize(mean_cumulative_exploitation = mean(cumulative_exploitation, na.rm = TRUE), .groups = 'drop')
mean_cumulative_exploitation
# Plot the mean cumulative results
ggplot(mean_cumulative_exploitation, aes(x = time_bin, y = mean_cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +
labs(title = "Mean Cumulative Exploitation of Food Sources Over Time",
x = "Time Since Discovery (seconds)",
y = "Mean Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(mean_cumulative_exploitation, aes(x = time_bin, y = mean_cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +  # Actual data
geom_smooth(method = "loess", se = TRUE) +  # Fitted line with confidence interval
labs(title = "Mean Cumulative Exploitation of Food Sources Over Time with Fitted Line",
x = "Time Since Discovery (seconds)",
y = "Mean Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(mean_cumulative_exploitation, aes(x = time_bin, y = mean_cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +  # Actual data
geom_smooth(method = "lm", se = TRUE) +  # Fitted line with confidence interval
labs(title = "Mean Cumulative Exploitation of Food Sources Over Time with Fitted Line",
x = "Time Since Discovery (seconds)",
y = "Mean Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(mean_cumulative_exploitation, aes(x = time_bin, y = mean_cumulative_exploitation, color = food_source)) +
geom_line(size = 1) +  # Actual data
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se = TRUE) + # GAM with confidence interval
labs(title = "Mean Cumulative Exploitation of Food Sources Over Time with Fitted Line",
x = "Time Since Discovery (seconds)",
y = "Mean Cumulative Feeding Duration (seconds)") +
scale_x_continuous(breaks = seq(0, 3600, by = 300), limits = c(0, 3600)) +
theme_minimal() +
theme(legend.title = element_blank())
# Fit the model
model <- lmer(mean_cumulative_exploitation ~ time_bin * food_source + (1 | colony_id), data = mean_cumulative_exploitation)
summary(model)
# Fit the model
model <- lmer(mean_cumulative_exploitation ~ time_bin * food_source + (1 | colony_id), data = mean_cumulative_exploitation)
mean_cumulative_exploitation
cumulative_per_colony
# Fit the model
model <- lmer(cumulative_exploitation ~ time_bin * food_source + (1 | colony_id), data = cumulative_per_colony)
food_source
cumulative_exploitation
cumulative_per_colony
summary(model)
Anova(model)
# Create new data for predictions
new_data <- expand.grid(time_bin = seq(0, 3600, by = 60), food_source = unique(mean_cumulative_exploitation$food_source))
predictions <- predictInterval(model, newdata = new_data, level = 0.95) # Get predicted values with confidence intervals
?predictInterval()
?predictInterval
pacman::p_load(lubridate, plotrix, scales, car, lme4, Hmisc, dplyr, tidyverse, blmeco, lmtest, lsmeans, emmeans, multcompView, multcomp, viridis, crayon, e1071, glmmTMB, DHARMa, merTools)
predictions <- predictInterval(model, newdata = new_data, level = 0.95) # Get predicted values with confidence intervals
new_data
model
# Fit the model
model <- lmer(cumulative_exploitation ~ time_bin * food_source + (1 | colony_id), data = cumulative_per_colony)
summary(model)
Anova(model)
# Create new data for predictions
new_data <- expand.grid(time_bin = seq(0, 3600, by = 60), food_source = unique(mean_cumulative_exploitation$food_source))
predictions <- predictInterval(model, newdata = new_data, level = 0.95) # Get predicted values with confidence intervals
# Create new data for predictions ensuring proper structure
new_data <- expand.grid(
time_bin = seq(0, 3600, by = 60),
food_source = unique(cumulative_per_colony$food_source),
colony_id = unique(cumulative_per_colony$colony_id)
)
new_data
cumulative_per_colony
predictions <- predictInterval(model, newdata = new_data, level = 0.95)
