### functions
sem <- function(x) {sd(x,na.rm=T)/sqrt(length(na.omit(x)))} # standard error of means
source("func_test_norm.R")  # adds test_norm() to the environment (it takes your model as an argument)
check_overdispersion <- function(model) {
cat("\033[34m", "🔍 Testing for Overdispersion in Poisson Model", "\033[39m\n\n")
rdf <- df.residual(model)
rp <- residuals(model, type = "pearson")
Pearson.chisq <- sum(rp^2)
ratio <- Pearson.chisq / rdf
p <- pchisq(Pearson.chisq, df = rdf, lower.tail = FALSE)
cat("Dispersion ratio:", round(ratio, 2), "\n")
cat("p-value:", signif(p, 4), "\n\n")
if (ratio < 1.2) {
cat("✅ Residuals show no signs of overdispersion\n")
cat("   --> Model is fine. You can go ahead 👍\n")
} else {
cat("❌ Residuals indicate overdispersion\n")
cat("   --> Consider using a Negative Binomial model or adjusting the model.\n")
}
}
#________________________________________________________________________________________________________________________________________________
#### 2. - Analysis of feeding - First feeding session fully annotated
#________________________________________________________________________________________________________________________________________________
#### 2.1 Data preparation ####
# get duration in seconds:
dat_duration <- dat_duration %>%
mutate(feeding_duration_seconds = as.numeric(as.difftime(feeding_duration, format="%H:%M:%S", units="secs")))
# get correct position of virus and data from other numbers data frame
# create new variable food source saying for each of the feeding events whether it was no a virus of control food source
for (i in 1:nrow(dat_duration)) { # i <- 1
index <- which(dat_numbers$colony_id == dat_duration$colony_id[i] &
dat_numbers$feeding_session == dat_duration$feeding_session[i])
dat_duration$position_virus[i] <- dat_numbers$position_virus_corrected[index]
dat_duration$treatment[i]      <- dat_numbers$treatment[index]
if (dat_duration$feeding_side[i] == "r") { # get the side at which the feeding event was observed
mapped_feeding_side <- "right"
} else if (dat_duration$feeding_side[i] == "l") {
mapped_feeding_side <- "left"
} else {
mapped_feeding_side <- NA
}
if (mapped_feeding_side == dat_numbers$position_virus_corrected[index]) { #define whether feeding event occurred on a virus or control food source
dat_duration$food_source[i] <- "virus"
} else {
dat_duration$food_source[i] <- "control"
}
}
#subset to focus only on first feeding session as the second one did not get fully annotated.
dat_duration <- dat_duration %>% filter(feeding_session == 1)
# first look at data
dat_duration %>%
group_by(food_source) %>%
summarize(
mean_feeding_duration = mean(feeding_duration_seconds, na.rm = TRUE),
sd_feeding_duration = sd(feeding_duration_seconds, na.rm = TRUE),
median_feeding_duration = median(feeding_duration_seconds, na.rm = TRUE)) %>% as.data.frame()
# capping of feeding events longer than 5 minutes (threshold so far arbitrary, could use some experimental validation) - idea is that after a certain time with head dipped in food, food uptake will no longer increase as technically ants can fell up in like 30 seconds...
cap_threshold <- 5 * 60  # capping threshold in seconds
dat_duration$feeding_duration_seconds_capped <- ifelse(
dat_duration$feeding_duration_seconds > cap_threshold,
cap_threshold,
dat_duration$feeding_duration_seconds)
Capping_of_feeding_duration <- FALSE
if(Capping_of_feeding_duration) {
dat_duration$feeding_duration_seconds <- dat_duration$feeding_duration_seconds_capped
}
#
mod <- glmer(feeding_duration_seconds ~ food_source + (1|colony_id) + (1|block), data = dat_duration, family = "poisson")
summary(mod)
Anova(mod)
residuals_poisson <- residuals(mod, type = "pearson")
test_norm(mod) # not ok, but not needed for poisson
# Non-Normal Residuals: For Poisson models, residuals are not expected to be normally distributed. The Poisson distribution is skewed, especially for small means.
# Other model checks required here: Over dispersion
check_overdispersion(mod)
# ratio should be around 1 (otherwise the model underestimates variability) which it is not --> so the data is overdispersed
#' Solutions:
#' Negative Binomial Regression: Use a negative binomial model instead of a Poisson model, which includes an extra parameter to account for overdispersion.
#' Quasi-Poisson Model: Use a quasi-Poisson model, which adjusts the standard errors to account for overdispersion.
# --> negative binomial GLMM
mod_nb <- glmmTMB(feeding_duration_seconds ~ food_source + (1|colony_id) + (1|block),
data = dat_duration, family = nbinom2)
summary(mod_nb)
check_overdispersion(mod_nb) # ratio is close to 1 with a significant p value, indicating mild but significant overdispersion. mod_nb is designed to handle this so no action required unless overdispersion increases (larger than 2)
summary(mod_nb)
#________________________________________________________________________________________________________________________________________________
#### 2.2.1 Plotting feeding duration: 4 times the same but with different representations ####
if(TRUE){
# p1: boxplot
p1 <- ggplot(dat_duration, aes(x = food_source, y = feeding_duration_seconds_capped, fill = food_source)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.35, color = "black", alpha = 0.1) +
labs(title = "Boxplot") +
scale_fill_manual(values = c("virus" = "#D04C5B", "control" = "#A1D99B")) +
geom_segment(aes(x = 1, xend = 2, y = 1.05 * max(feeding_duration_seconds_capped, na.rm = TRUE),
yend = 1.05 * max(feeding_duration_seconds_capped, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 1.1 * max(dat_duration$feeding_duration_seconds_capped, na.rm = TRUE),
label = "*** (glmer nbinom2)", color = "black", size = 3) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# p2: violin plot
p2 <- ggplot(dat_duration, aes(x = food_source, y = feeding_duration_seconds_capped, fill = food_source)) +
geom_violin(trim = FALSE, alpha = 0.8) +
geom_jitter(width = 0.35, color = "black", alpha = 0.1) +
labs(title = "Violin Plot") +
scale_fill_manual(values = c("virus" = "#D04C5B", "control" = "#A1D99B")) +
geom_segment(aes(x = 1, xend = 2, y = 1.05 * max(feeding_duration_seconds_capped, na.rm = TRUE),
yend = 1.05 * max(feeding_duration_seconds_capped, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 1.1 * max(dat_duration$feeding_duration_seconds_capped, na.rm = TRUE),
label = "*** (glmer nbinom2)", color = "black", size = 3) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Summary for barplots
summary_data <- dat_duration %>%
group_by(food_source) %>%
summarize(
mean_duration = mean(feeding_duration_seconds_capped, na.rm = TRUE),
se_duration = sd(feeding_duration_seconds_capped, na.rm = TRUE) / sqrt(n()),
sd_duration = sd(feeding_duration_seconds_capped, na.rm = TRUE)
)
# p3: barplot with SE
p3 <- ggplot(summary_data, aes(x = food_source, y = mean_duration, fill = food_source)) +
geom_col(width = 0.6, alpha = 0.8) +
geom_errorbar(aes(ymin = mean_duration - se_duration, ymax = mean_duration + se_duration),
width = 0.2, color = "black") +
labs(title = "Mean ± SE") +
scale_fill_manual(values = c("virus" = "#D04C5B", "control" = "#A1D99B")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# p4: barplot with SD and raw data
p4 <- ggplot(summary_data, aes(x = food_source, y = mean_duration, fill = food_source)) +
geom_col(width = 0.6, alpha = 0.8) +
geom_errorbar(aes(ymin = mean_duration - sd_duration, ymax = mean_duration + sd_duration),
width = 0.2, color = "black") +
geom_jitter(data = dat_duration,
aes(x = food_source, y = feeding_duration_seconds_capped),
width = 0.15, color = "black", alpha = 0.1, inherit.aes = FALSE) +
labs(title = "Mean ± SD + Raw Data") +
scale_fill_manual(values = c("virus" = "#D04C5B", "control" = "#A1D99B")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Combine all four
(p1 | p2) / (p3 | p4) +
plot_annotation(title = "Feeding Duration by Food Source (Different Visualizations)")
}
#________________________________________________________________________________________________________________________________________________
#### 2.3 Feeding duration dependent on feeding time ####
#' Ants are feeding longer on virus food. Considering that virus is often discovered first (see below),
#' it is worth checking whether feeding time and with that freshness of food affects feeding duration
#' Checking for potential effects of food freshness or water content and such on feeding duration: Correlation
# transform time to seconds
dat_duration$feeding_start_seconds <- period_to_seconds(hms(dat_duration$feeding_start))
dat_duration$feeding_end_seconds <- dat_duration$feeding_start_seconds + dat_duration$feeding_duration_seconds
dat_duration$feeding_end_seconds_capped <- dat_duration$feeding_start_seconds + dat_duration$feeding_duration_seconds_capped
### Correlation
shapiro.test(dat_duration$feeding_duration_seconds)
shapiro.test(dat_duration$feeding_start_seconds)
# Pearson correlation (assumes normal distribution of both variables)
cor.test(dat_duration$feeding_duration_seconds, dat_duration$feeding_start_seconds, method = "spearman")
# significant correlation between feeding duration and feeding start time
# however, correlation coefficient (rho = 0.066) is very small --> indicating a very weak positive relationship
plot(feeding_duration_seconds ~ feeding_start_seconds, data = dat_duration,
main = "Feeding Duration vs Feeding Start Time",
xlab = "Feeding Start Time (seconds)",
ylab = "Feeding Duration (seconds)",
pch = 16, col = "#69b3a2")
abline(lm(feeding_duration_seconds ~ feeding_start_seconds, data = dat_duration), col = "red", lwd = 2)
mod <- lmer(log10(feeding_duration_seconds) ~ food_source * feeding_start_seconds + (1|colony_id), data = dat_duration)
Anova(mod)
summary(mod)
test_norm(mod)
Anova(mod)
version
#________________________________________________________________________________________________________________________________________________
#### 2.3 Feeding duration dependent on feeding time ####
#' Ants are feeding longer on virus food. Considering that virus is often discovered first (see below),
#' it is worth checking whether feeding time and with that freshness of food affects feeding duration
#' Checking for potential effects of food freshness or water content and such on feeding duration: Correlation
# transform time to seconds
dat_duration$feeding_start_seconds <- period_to_seconds(hms(dat_duration$feeding_start))
dat_duration$feeding_end_seconds <- dat_duration$feeding_start_seconds + dat_duration$feeding_duration_seconds
dat_duration$feeding_end_seconds_capped <- dat_duration$feeding_start_seconds + dat_duration$feeding_duration_seconds_capped
### Correlation
shapiro.test(dat_duration$feeding_duration_seconds)
shapiro.test(dat_duration$feeding_start_seconds)
# Pearson correlation (assumes normal distribution of both variables)
cor.test(dat_duration$feeding_duration_seconds, dat_duration$feeding_start_seconds, method = "spearman")
# significant correlation between feeding duration and feeding start time
# however, correlation coefficient (rho = 0.066) is very small --> indicating a very weak positive relationship
plot(feeding_duration_seconds ~ feeding_start_seconds, data = dat_duration,
main = "Feeding Duration vs Feeding Start Time",
xlab = "Feeding Start Time (seconds)",
ylab = "Feeding Duration (seconds)",
pch = 16, col = "#69b3a2")
abline(lm(feeding_duration_seconds ~ feeding_start_seconds, data = dat_duration), col = "red", lwd = 2)
mod <- lmer(log10(feeding_duration_seconds) ~ food_source * feeding_start_seconds + (1|colony_id), data = dat_duration)
Anova(mod)
summary(mod)
test_norm(mod)
# plot feeding duration over time capped and non capped.
mean_start_times <- tapply(dat_duration$feeding_start_seconds, dat_duration$food_source, mean, na.rm = TRUE) # mean feeding start times per food_source
duration_vars <- c("feeding_duration_seconds", "feeding_duration_seconds_capped")
plots <- list()
for (var in duration_vars) {
p <- ggplot(dat_duration, aes(x = feeding_start_seconds, y = .data[[var]], color = food_source)) +
geom_point(alpha = 0.5, size = 2) +
scale_color_manual(values = c("virus" = "#D04C5B", "control" = "#A1D99B")) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_smooth(data = subset(dat_duration, food_source == "control"), method = "lm", se = FALSE, color = "#A1D99B") +
geom_smooth(data = subset(dat_duration, food_source == "virus"), method = "lm", se = FALSE, color = "#D04C5B") +
geom_vline(xintercept = mean_start_times["control"], linetype = "dashed", color = "#A1D99B", size = 1) +
geom_vline(xintercept = mean_start_times["virus"], linetype = "dashed", color = "#D04C5B", size = 1) +
labs(
title = paste(gsub("_", " ", var), "vs Feeding Start Time"),
x = "Feeding Start Time (seconds)",
y = gsub("_", " ", var)
) +
theme_minimal() +
theme(legend.title = element_text(face = "bold"))
plots[[var]] <- p
}
combined_plot <- plots[["feeding_duration_seconds"]] | plots[["feeding_duration_seconds_capped"]]
print(combined_plot)
dat_summary <- dat_duration %>%
group_by(food_source, colony_id) %>%
summarise(
num_feeding_events = n(),
total_feeding_duration = sum(feeding_duration_seconds, na.rm = TRUE)
) %>% as.data.frame()
dat_summar_plot <- dat_summary %>%
group_by(food_source) %>%
summarise(
mean_nr_feeding_events = mean(num_feeding_events, na.rm = TRUE),
sd_nr_feeding_events = sd(num_feeding_events, na.rm = TRUE),
se_nr_feeding_events = sd(num_feeding_events, na.rm = TRUE) / sqrt(n()),
mean_tot_feeding_duration = mean(total_feeding_duration, na.rm = TRUE),
sd_tot_feeding_duration = sd(total_feeding_duration, na.rm = TRUE),
se_tot_feeding_duration = sd(total_feeding_duration, na.rm = TRUE) / sqrt(n())
) %>% as.data.frame()
# number of feeding events per colony per food source
mod <- lmer(num_feeding_events ~ food_source + (1|colony_id) , data = dat_summary)
summary(mod)
Anova(mod)
compareqqnorm(mod); par(mfrow = c(1,1))
test_norm(mod)
ggplot(dat_summary, aes(x = food_source, y = num_feeding_events, fill = food_source)) +
geom_boxplot() +
geom_jitter(width = 0.2, color = "black", alpha = 0.2) +
labs(title = "Number of Feeding Events",
x = "Food Source",
y = "Number of Feeding Events") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
geom_segment(aes(x = 1, xend = 2, y = 1.05 * max(num_feeding_events, na.rm = TRUE),
yend = 1.05 * max(num_feeding_events, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 1.1 * max(dat_summary$num_feeding_events, na.rm = TRUE),
label = "p = 0.046 (lmer)", color = "black", size = 3)
test_norm(mod)
# summed up feeding duration per colony and food source
mod <- lmer(log10(total_feeding_duration) ~ food_source + (1|colony_id) , data = dat_summary)
summary(mod)
Anova(mod)
compareqqnorm(mod); par(mfrow = c(1, 1))
test_norm(mod)
ggplot(dat_summary, aes(x = food_source, y = total_feeding_duration, fill = food_source)) +
geom_boxplot() +
geom_jitter(width = 0.2, color = "black", alpha = 0.2) +
labs(title = "Summed up Duration of Feeding Events per Colony",
x = "Food Source",
y = "Duration of Feeding Events in Seconds") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
geom_segment(aes(x = 1, xend = 2, y = 1.05 * max(total_feeding_duration, na.rm = TRUE),
yend = 1.05 * max(total_feeding_duration, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 1.1 * max(dat_summary$total_feeding_duration, na.rm = TRUE),
label = "p = 0.0008 (lmer)", color = "black", size = 3)
# subset data to only include 60 minutes post discovery of for each food source
dat_duration$feeding_annotation_end_seconds <- period_to_seconds(hms(dat_duration$feeding_annotation_end))
summary_time_feeding <- dat_duration %>% group_by(colony_id, food_source) %>%
summarize(time_first_feeding = min(feeding_start_seconds, na.rm = TRUE)) %>% ungroup() %>% as.data.frame()
subsetted_data <- dat_duration %>% left_join(summary_time_feeding, by = c("colony_id", "food_source"))
# filter to only include feeding events starting within the 60 min (3600s) window since discovery (first actual feeding) of the food source of interest (different discovery times)
subsetted_data <- subsetted_data %>%
mutate(feeding_start_seconds = feeding_start_seconds - time_first_feeding) %>%
mutate(feeding_end_seconds = feeding_end_seconds - time_first_feeding) %>%
filter(feeding_start_seconds >= 0 & feeding_start_seconds <= 3600)
# Summary statistics by food source and colony
dat_summary <- subsetted_data %>%
group_by(food_source, colony_id) %>%
summarise(
num_feeding_events = n(),
total_feeding_duration = sum(feeding_duration_seconds, na.rm = TRUE)
) %>% as.data.frame()
# Summary for plotting
dat_summar_plot <- dat_summary %>%
group_by(food_source) %>%
summarise(
mean_nr_feeding_events = mean(num_feeding_events, na.rm = TRUE),
sd_nr_feeding_events = sd(num_feeding_events, na.rm = TRUE),
se_nr_feeding_events = sd(num_feeding_events, na.rm = TRUE) / sqrt(n()),
mean_tot_feeding_duration = mean(total_feeding_duration, na.rm = TRUE),
sd_tot_feeding_duration = sd(total_feeding_duration, na.rm = TRUE),
se_tot_feeding_duration = sd(total_feeding_duration, na.rm = TRUE) / sqrt(n())
) %>% as.data.frame()
# Model: number of feeding events per colony per food source
mod <- lmer(log(num_feeding_events) ~ food_source + (1 | colony_id), data = dat_summary)
summary(mod)
Anova(mod)
compareqqnorm(mod); par(mfrow = c(1, 1))
test_norm(mod) #is fine with log but else if not normally distributed --> we could try with a glmm with poisson as it is count data.
# Plot: number of feeding events
ggplot(dat_summary, aes(x = food_source, y = num_feeding_events, fill = food_source)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, color = "black", alpha = 0.2) +
labs(title = "Number of Feeding Events",
x = "Food Source",
y = "Number of Feeding Events") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
geom_segment(aes(x = 1, xend = 2, y = 1.05 * max(num_feeding_events, na.rm = TRUE),
yend = 1.05 * max(num_feeding_events, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 1.1 * max(dat_summary$num_feeding_events, na.rm = TRUE),
label = "p = 0.08 (lmer)", color = "black", size = 3)
# Model: summed feeding duration
mod <- lmer(log10(total_feeding_duration) ~ food_source + (1 | colony_id), data = dat_summary)
summary(mod)
Anova(mod)
compareqqnorm(mod); par(mfrow = c(1, 1))
test_norm(mod)
# Plot: total feeding duration
ggplot(dat_summary, aes(x = food_source, y = total_feeding_duration, fill = food_source)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, color = "black", alpha = 0.2) +
labs(title = "Summed up Duration of Feeding Events per Colony",
x = "Food Source",
y = "Duration of Feeding Events in Seconds") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
geom_segment(aes(x = 1, xend = 2, y = 1.05 * max(total_feeding_duration, na.rm = TRUE),
yend = 1.05 * max(total_feeding_duration, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 1.1 * max(dat_summary$total_feeding_duration, na.rm = TRUE),
label = "p = 0.02 (lmer)", color = "black", size = 3)
#________________________________________________________________________________________________________________________________________________
#### 2.5 Feeding rate (feeding events per min) ####
# first look at feeding rate simply calculated as average number of feeding events per minute, which per definition will just look like overall number of feeding events / 60...
dat_summary <- subsetted_data %>%
group_by(food_source, colony_id) %>%
summarise(
num_feeding_events = n(),
total_feeding_duration = sum(feeding_duration_seconds, na.rm = TRUE),
num_feeding_events_per_min = n()/60
) %>% as.data.frame()
dat_summary %>%
group_by(food_source) %>%
summarise(
mean_feeding_rate = mean(num_feeding_events_per_min),
sd_feeding_rate   = sd(num_feeding_events_per_min)) %>% as.data.frame()
boxplot(num_feeding_events_per_min ~food_source, data = dat_summary, main = "feeding rate")
# stats
mod <- lmer(log(num_feeding_events_per_min) ~ food_source + (1|colony_id), data = dat_summary) #sqrt transformation might also work
summary(mod)
print(Anova(mod, type=3))
test_norm(mod)
compareqqnorm(mod); par(mfrow=c(1,1))
# plot
ggplot(dat_summary, aes(x = food_source, y = num_feeding_events_per_min, fill = food_source))+
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, color = "black", alpha = 0.2) +
labs(title = "Feeding rate",
x = "Food source",
y = "Feeding rate (feedings/minute") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
geom_segment(aes(x = 1, xend = 2, y = 1.05 * max(num_feeding_events_per_min, na.rm = TRUE),
yend = 1.05 * max(num_feeding_events_per_min, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 1.1 * max(dat_summary$num_feeding_events_per_min, na.rm = TRUE),
label = "p = 0.11 (lmer)", color = "black", size = 3)
#### 3.1 Time of first feeding ####
first_feeding <- dat_duration %>% group_by(colony_id, food_source) %>%
summarise(time_first_feeding = as.numeric(min(feeding_start_seconds, na.rm = TRUE))) %>% as.data.frame()
# mean time until first feeding per food source
mod <- lmer(log10(time_first_feeding) ~ food_source + (1|colony_id), data = first_feeding)
Anova(mod)
sim_res <- simulateResiduals(mod)
plot(sim_res)
Anova(mod)
# mean time until first feeding per food source
mod <- lmer(log10(time_first_feeding) ~ food_source + (1|colony_id), data = first_feeding)
Anova(mod)
sim_res <- simulateResiduals(mod)
plot(sim_res)
test_norm(mod)
#### 3.1 Number of first discoveries per food source ####
food_first_eaten_from <- first_feeding %>% group_by(colony_id) %>%
arrange(colony_id, time_first_feeding) %>%
slice(1) %>% dplyr::select(colony_id, food_first_eaten_from = food_source, time_earliest_feeding = time_first_feeding) %>% as.data.frame()
n_virus_eaten_first <- sum(food_first_eaten_from$food_first_eaten_from == "virus")
n_max <- nrow(food_first_eaten_from)
binom.test(n_virus_eaten_first, n_max, p = 0.5)
prop.test(n_virus_eaten_first, n_max, alternative = "two.sided", p = 0.5)
t2 <- table(food_first_eaten_from$food_first_eaten_from)
barplot(t2, main = "", xlab = "food source", ylab = "number of first feedings", ylim = c(0,14), xaxt="n")
axis(1, at=c(0.7, 1.95), labels=c("control", "virus"))
segments(x0 = 0.7, y0 =12.5, x1 = 1.9)
text(x = 1.3, y = 13, label = "p = 0.08 (prop.test)", font = 2, cex = 1.1)
#### 4.1 Prep data ####
dat_duration_modified <- dat_duration %>%
group_by(colony_id) %>%
mutate(
first_feeding_virus     = min(feeding_start_seconds[food_source == "virus"], na.rm = TRUE),
first_feeding_control   = min(feeding_start_seconds[food_source == "control"], na.rm = TRUE),
first_source_fed_on = ifelse(
first_feeding_virus < first_feeding_control, "virus",
ifelse(first_feeding_control < first_feeding_virus, "control", NA_character_))) %>%
ungroup() %>% as.data.frame()
# get colony metadata
colony_metadata <- dat_duration_modified %>%
dplyr::select(colony_id, treatment, position_virus, block,
first_feeding_virus, first_feeding_control, first_source_fed_on) %>%
distinct(colony_id, .keep_all = TRUE)
start_time <- "shifted_discovery"
# if (start_time == "start_experiment") {subsetted_data <- dat_duration_modified}
if (start_time == "shifted_discovery") {
summary_time_first_feeding <- dat_duration_modified %>% group_by(colony_id, food_source) %>%
summarize(time_first_feeding = min(feeding_start_seconds, na.rm = TRUE)) %>% ungroup() %>% as.data.frame()
subsetted_data <- dat_duration_modified %>% left_join(summary_time_first_feeding, by = c("colony_id", "food_source"))
# filter to only include feeding events starting within the 60 min (3600s) window since discovery (first actual feeding) of the food source of interest (different discovery times)
subsetted_data <- subsetted_data %>%
mutate(feeding_start_seconds = feeding_start_seconds - time_first_feeding) %>%
mutate(feeding_end_seconds = feeding_end_seconds - time_first_feeding) %>%
filter(feeding_start_seconds >= 0 & feeding_start_seconds <= 3600)  }
#create a variable indicating whether a feeding happens on the food source that was discovered first or second
subsetted_data <- subsetted_data %>%
mutate(food_source_timed = if_else(first_source_fed_on == food_source, "first", "second"))
for (var in c("food_source", "food_source_timed")) { #var = "food_source"
grid <- expand_grid(
colony_id = unique(subsetted_data$colony_id),
food_source = unique(subsetted_data[[var]]),
# time = seq(0, max(subsetted_data$feeding_end_seconds, na.rm = TRUE))
time = seq(0, 3600) # hard cut at 1h to avoid slow trailing off of feeding events that started within 1h but run beyond it.
) %>% rename(!!var := food_source) %>% as.data.frame()
cumulative_explotation_over_time <- NULL
for (colony in unique(grid$colony_id)) {
for (group_value in unique(grid[[var]])) {
# Filter grid and feeding data for the current colony and variable value
current_grid <- grid %>% filter(colony_id == colony, !!sym(var) == group_value)
current_feedings <- subsetted_data %>% filter(colony_id == colony, !!sym(var) == group_value)
if (nrow(current_feedings) > 0) {
current_feedings <- current_feedings %>% arrange(feeding_start_seconds)
current_grid <- current_grid %>%
rowwise() %>%
mutate(
cumulated_exploitation_time = sum(
pmin(current_feedings$feeding_duration_seconds,
pmax(0, time - current_feedings$feeding_start_seconds))
),
exploitation_rate = sum(
time >= current_feedings$feeding_start_seconds &
time <= current_feedings$feeding_end_seconds
)
)
} else {
current_grid <- current_grid %>%
mutate(cumulated_exploitation_time = 0,
exploitation_rate = 0)
}
cumulative_explotation_over_time <- bind_rows(cumulative_explotation_over_time, current_grid)
}
}
cumulative_explotation_over_time <- cumulative_explotation_over_time %>% left_join(colony_metadata, by = "colony_id")
assign(paste0("cumulative_explotation_", var), cumulative_explotation_over_time)
}
### based on food type
mean_exploitation_time <- cumulative_explotation_food_source %>%
group_by(time, food_source) %>%
summarize(mean_time = mean(cumulated_exploitation_time, na.rm = TRUE),
sd = sd(cumulated_exploitation_time, na.rm = TRUE),
sem = sem(cumulated_exploitation_time))
title_lab_1 <- paste0("Food based - Cum Exploit (T0 = ", start_time, ")")
print(ggplot(mean_exploitation_time, aes(x = time, y = mean_time, color = food_source)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = mean_time - sem, ymax = mean_time + sem, fill = food_source), alpha = 0.2) +
labs(title = title_lab_1,
x = "Time",
y = "Mean Cumulated Exploitation Time (seconds)") +
scale_color_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
theme_bw() +
theme(legend.title = element_blank())+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()))
