Anova(mod, type=3)
compareqqnorm(mod); par(mfrow = c(1,1))
test_norm(mod)
data_predic <- cumulative_explotation_over_time
names(data_predic)
time_range <- max(data_predic$time)-min(data_predic$time)
new_dat <- expand.grid(
time = seq(min(data_predic$time), max(data_predic$time), length.out = 100),
# time = seq(min(data_predic$time) - 0.05*time_range, max(data_predic$time) + 0.05*time_range, length.out = 100),
food_source = unique(data_predic$food_source)
)
new_dat$cumulated_exploitation_time <- predict(mod, new_dat, re.form = NA)
mm <- model.matrix(terms(mod),new_dat)
pvar1 <- diag(mm %*% tcrossprod(vcov(mod),mm))
cmult <- 1.96 # use 1.96 for a 95% confidence interval
new_dat <- data.frame(
new_dat,
ci_lo = new_dat$cumulated_exploitation_time - cmult * sqrt(pvar1),
ci_hi = new_dat$cumulated_exploitation_time + cmult * sqrt(pvar1),
se_lo = new_dat$cumulated_exploitation_time - sqrt(pvar1),
se_hi = new_dat$cumulated_exploitation_time + sqrt(pvar1)
)
new_dat_control     <- new_dat[which(new_dat$food_source == "control"),]
new_dat_virus       <- new_dat[which(new_dat$food_source == "virus"  ),]
data_predic$food_source <- factor(data_predic$food_source, levels = c("control", "virus"))
# Define colors and other graphical parameters
col_control <- "#1f77b4"  # Blue for control
col_virus <- "#ff7f0e"    # Orange for virus
linwidth <- 1.2           # Line width
alpha <- 0.6              # Transparency for points
pointsize <- 2.5          # Size for points
linalpha <- 0.2           # Transparency for ribbons
# Plotting
p_cum_exploitation <- ggplot(data = cumulative_explotation_over_time, aes(x = time, y = cumulated_exploitation_time)) +
# Add ribbons for standard error ranges (optional, uncomment if needed)
geom_ribbon(data = new_dat_control, aes(ymin = se_lo, ymax = se_hi), fill = alpha(col_control, linalpha), color = NA) +
geom_ribbon(data = new_dat_virus, aes(ymin = se_lo, ymax = se_hi), fill = alpha(col_virus, linalpha), color = NA) +
# Add lines for predicted values
geom_line(data = new_dat_control, aes(y = cumulated_exploitation_time), size = linwidth, color = col_control) +
geom_line(data = new_dat_virus, aes(y = cumulated_exploitation_time), size = linwidth, color = col_virus) +
# Add points for observed data
#geom_point(alpha = alpha, size = pointsize, position = position_jitterdodge(jitter.width = 4.2, dodge.width = 9),
#           aes(group = food_source, color = food_source)) +
xlab("Time (sec)") +
ylab("Cumulated Exploitation Time (sec)") +
scale_color_manual(values = c("control" = col_control, "virus" = col_virus))
# Print the plot
print(p_cum_exploitation)
# cumulative exploitation for shifted starting times per food source is already loaded if the code above has been run, if not you need to get it.
# mod <- lmer(cumulated_exploitation_time ~ food_source*time + (1|colony_id), data = cumulative_explotation_over_time)
mod <- lmer(cumulated_exploitation_time ~ 0 + food_source*time + (1|colony_id), data = cumulative_explotation_over_time)
data_predic <- cumulative_explotation_over_time
names(data_predic)
time_range <- max(data_predic$time)-min(data_predic$time)
new_dat <- expand.grid(
time = seq(min(data_predic$time), max(data_predic$time), length.out = 100),
# time = seq(min(data_predic$time) - 0.05*time_range, max(data_predic$time) + 0.05*time_range, length.out = 100),
food_source = unique(data_predic$food_source)
)
new_dat$cumulated_exploitation_time <- predict(mod, new_dat, re.form = NA)
mm <- model.matrix(terms(mod),new_dat)
pvar1 <- diag(mm %*% tcrossprod(vcov(mod),mm))
cmult <- 1.96 # use 1.96 for a 95% confidence interval
new_dat <- data.frame(
new_dat,
ci_lo = new_dat$cumulated_exploitation_time - cmult * sqrt(pvar1),
ci_hi = new_dat$cumulated_exploitation_time + cmult * sqrt(pvar1),
se_lo = new_dat$cumulated_exploitation_time - sqrt(pvar1),
se_hi = new_dat$cumulated_exploitation_time + sqrt(pvar1)
)
new_dat_control     <- new_dat[which(new_dat$food_source == "control"),]
new_dat_virus       <- new_dat[which(new_dat$food_source == "virus"  ),]
data_predic$food_source <- factor(data_predic$food_source, levels = c("control", "virus"))
# Define colors and other graphical parameters
col_control <- "#1f77b4"  # Blue for control
col_virus <- "#ff7f0e"    # Orange for virus
linwidth <- 1.2           # Line width
alpha <- 0.6              # Transparency for points
pointsize <- 2.5          # Size for points
linalpha <- 0.2           # Transparency for ribbons
# Plotting
p_cum_exploitation <- ggplot(data = cumulative_explotation_over_time, aes(x = time, y = cumulated_exploitation_time)) +
# Add ribbons for standard error ranges (optional, uncomment if needed)
geom_ribbon(data = new_dat_control, aes(ymin = se_lo, ymax = se_hi), fill = alpha(col_control, linalpha), color = NA) +
geom_ribbon(data = new_dat_virus, aes(ymin = se_lo, ymax = se_hi), fill = alpha(col_virus, linalpha), color = NA) +
# Add lines for predicted values
geom_line(data = new_dat_control, aes(y = cumulated_exploitation_time), size = linwidth, color = col_control) +
geom_line(data = new_dat_virus, aes(y = cumulated_exploitation_time), size = linwidth, color = col_virus) +
# Add points for observed data
#geom_point(alpha = alpha, size = pointsize, position = position_jitterdodge(jitter.width = 4.2, dodge.width = 9),
#           aes(group = food_source, color = food_source)) +
xlab("Time (sec)") +
ylab("Cumulated Exploitation Time (sec)") +
scale_color_manual(values = c("control" = col_control, "virus" = col_virus))
# Print the plot
print(p_cum_exploitation)
aov_residuals <- residuals(object = mod)
shapiro.test(x = aov_residuals)
resids <- residuals(object = mod)
shapiro.test(x = resids)
print("Skewness should be between -3 and +3 (best around zero")
print(skewness(resids))
print("")
print("Excess kurtosis (i.e. absolute kurtosis -3) should be less than 4; ideally around zero")
print(kurtosis(resids))
test_norm()
test_norm(resids)
skewness(resids)
cat(blue("Testing normality"))
cat(red("Warning: Adjust or change model!"))
cat(green("Your model is fine... go ahead \U1F44D"))
shapiro.test(resids)
test_norm <- function(resids) { # function from Nathalie
cat(blue("Testing normality"))
if (length(resids) <= 300) {
print("Fewer than 300 data points so performing Shapiro-Wilk's test")
print(shapiro.test(resids))
print("below 0.05, the data significantly deviate from a normal distribution")
} else {
print("More than 300 data points so using the skewness and kurtosis approach")
print("Skewness should be between -3 and +3 (best around zero")
skew <- skewness(resids)
print(skew)
print("Excess kurtosis (i.e. absolute kurtosis -3) should be less than 4; ideally around zero")
kurt <- kurtosis(resids)
print(kurt)
if(skew >= -3 & skew <= 3 & kurt < 4){
cat(green("Your model is fine... go ahead \U1F44D"))
} else {
cat(red("Warning: Adjust or change model!"))
}
}
}
mod <- lmer(cumulated_exploitation_time ~ 0 + food_source*time + (1|colony_id), data = cumulative_explotation_over_time)
summary(mod)
Anova(mod, type=3)
resids <- residuals(object = mod)
test_norm(resids)
data_predic <- cumulative_explotation_over_time
names(data_predic)
time_range <- max(data_predic$time)-min(data_predic$time)
new_dat <- expand.grid(
time = seq(min(data_predic$time), max(data_predic$time), length.out = 100),
food_source = unique(data_predic$food_source)
)
new_dat
new_dat$cumulated_exploitation_time <- predict(mod, new_dat, re.form = NA)
new_dat$cumulated_exploitation_time
# Plotting
p_cum_exploitation <- ggplot(data = cumulative_explotation_over_time, aes(x = time, y = cumulated_exploitation_time)) +
# Add ribbons for standard error ranges (optional, uncomment if needed)
geom_ribbon(data = new_dat_control, aes(ymin = se_lo, ymax = se_hi), fill = alpha(col_control, linalpha), color = NA) +
geom_ribbon(data = new_dat_virus, aes(ymin = se_lo, ymax = se_hi), fill = alpha(col_virus, linalpha), color = NA) +
# Add lines for predicted values
geom_line(data = new_dat_control, aes(y = cumulated_exploitation_time), size = linwidth, color = col_control) +
geom_line(data = new_dat_virus, aes(y = cumulated_exploitation_time), size = linwidth, color = col_virus) +
# Add points for observed data
#geom_point(alpha = alpha, size = pointsize, position = position_jitterdodge(jitter.width = 4.2, dodge.width = 9),
#           aes(group = food_source, color = food_source)) +
xlab("Time (sec)") +
ylab("Cumulated Exploitation Time (sec)") +
scale_color_manual(values = c("control" = col_control, "virus" = col_virus)) +
theme_bw()
# Print the plot
print(p_cum_exploitation)
p_cum_exploitation <- ggplot(data = data_predic, aes(x = time, y = cumulated_exploitation_time)) +
geom_line(data = new_dat_control, aes(y = cumulated_exploitation_time), size = 1.2, color = col_control) +
geom_line(data = new_dat_virus, aes(y = cumulated_exploitation_time), size = 1.2, color = col_virus) +
geom_ribbon(data = new_dat_control, aes(ymin = se_lo, ymax = se_hi), fill = alpha(col_control, 0.2), color = NA) + # ribbons for standard error ranges
geom_ribbon(data = new_dat_virus, aes(ymin = se_lo, ymax = se_hi), fill = alpha(col_virus, 0.2), color = NA) +
# Add points for observed data
#geom_point(alpha = 0.5, size = 1, position = position_jitterdodge(jitter.width = 4.2, dodge.width = 9),
#           aes(group = food_source, color = food_source)) +
xlab("Time (sec)") +
ylab("Cumulated Exploitation Time (sec)") +
scale_color_manual(values = c("control" = col_control, "virus" = col_virus)) +
theme_bw() +
theme(legend.title = element_blank())+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Print the plot
print(p_cum_exploitation)
data_predic
new_dat
p_cum_exploitation <- ggplot(data = new_dat, aes(x = time, y = cumulated_exploitation_time)) +
geom_line(data = new_dat_control, aes(y = cumulated_exploitation_time), size = 1.2, color = col_control) +
geom_line(data = new_dat_virus, aes(y = cumulated_exploitation_time), size = 1.2, color = col_virus) +
geom_ribbon(data = new_dat_control, aes(ymin = se_lo, ymax = se_hi), fill = alpha(col_control, 0.2), color = NA) + # ribbons for standard error ranges
geom_ribbon(data = new_dat_virus, aes(ymin = se_lo, ymax = se_hi), fill = alpha(col_virus, 0.2), color = NA) +
# Add points for observed data
#geom_point(alpha = 0.5, size = 1, position = position_jitterdodge(jitter.width = 4.2, dodge.width = 9),
#           aes(group = food_source, color = food_source)) +
xlab("Time (sec)") +
ylab("Cumulated Exploitation Time (sec)") +
scale_color_manual(values = c("control" = col_control, "virus" = col_virus)) +
theme_bw() +
theme(legend.title = element_blank())+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(p_cum_exploitation)
mod <- glmer(cumulated_exploitation_time ~ 0 + food_source*time + (1|colony_id), data = cumulative_explotation_over_time, family = "poisson")
summary(mod)
mod <- glmer(cumulated_exploitation_time ~ food_source*time + (1|colony_id), data = cumulative_explotation_over_time, family = "poisson")
warnings()
cumulated_exploitation_time
cumulative_explotation_over_time$cumulated_exploitation_time[2]
cumulative_explotation_over_time$cumulated_exploitation_time[5]
head(cumulative_explotation_over_time)
mod <- glmer(cumulated_exploitation_time ~ food_source*(time+1) + (1|colony_id), data = cumulative_explotation_over_time, family = "poisson")
mod <- lmer(cumulated_exploitation_time ~ 0 + food_source*time + (1|colony_id), data = cumulative_explotation_over_time)
summary(mod)
Anova(mod, type=3)
resids <- residuals(object = mod)
test_norm(resids)
test_norm <- function(resids) { # function from Nathalie
cat(blue("Testing normality\n"))
if (length(resids) <= 300) {
print("Fewer than 300 data points so performing Shapiro-Wilk's test")
print(shapiro.test(resids))
print("below 0.05, the data significantly deviate from a normal distribution")
} else {
print("More than 300 data points so using the skewness and kurtosis approach")
print("Skewness should be between -3 and +3 (best around zero)")
skew <- skewness(resids)
print(skew)
print("Excess kurtosis (i.e. absolute kurtosis -3) should be less than 4; ideally around zero")
kurt <- kurtosis(resids)
print(kurt)
if(skew >= -3 & skew <= 3 & kurt < 4){
cat(green("Model is fine... go ahead \U1F44D"))
} else {
cat(red("Warning: Adjust or change model!"))
}
}
}
test_norm(resids)
print("Skewness = ", skew)
test_norm <- function(resids) { # function from Nathalie
cat(blue("Testing normality\n"))
if (length(resids) <= 300) {
print("Fewer than 300 data points so performing Shapiro-Wilk's test")
print(shapiro.test(resids))
print("below 0.05, the data significantly deviate from a normal distribution")
} else {
print("More than 300 data points so using the skewness and kurtosis approach")
print("Skewness should be between -3 and +3 (best around zero)")
skew <- skewness(resids)
print("Skewness = ", skew)
print("Excess kurtosis (i.e. absolute kurtosis -3) should be less than 4; ideally around zero")
kurt <- kurtosis(resids)
print("Kurtosis = ", kurt)
if(skew >= -3 & skew <= 3 & kurt < 4){
cat(green("Model is fine... go ahead \U1F44D"))
} else {
cat(red("Warning: Adjust or change model!"))
}
}
}
test_norm(resids)
test_norm <- function(resids) { # function from Nathalie
cat(blue("Testing normality\n"))
if (length(resids) <= 300) {
print("Fewer than 300 data points so performing Shapiro-Wilk's test")
print(shapiro.test(resids))
print("below 0.05, the data significantly deviate from a normal distribution")
} else {
print("More than 300 data points so using the skewness and kurtosis approach")
print("Skewness should be between -3 and +3 (best around zero)")
skew <- skewness(resids)
print(paste0("Skewness = ", skew))
print("Excess kurtosis (i.e. absolute kurtosis -3) should be less than 4; ideally around zero")
kurt <- kurtosis(resids)
print(paste0("Kurtosis = ", kurt))
if(skew >= -3 & skew <= 3 & kurt < 4){
cat(green("Model is fine... go ahead \U1F44D"))
} else {
cat(red("Warning: Adjust or change model!"))
}
}
}
test_norm(resids)
data_predic$time
time_range
new_dat <- expand.grid(
time = seq(min(data_predic$time), max(data_predic$time), length.out = 100),
food_source = unique(data_predic$food_source)
)
new_dat
new_dat$cumulated_exploitation_time <- predict(mod, new_dat, re.form = NA)
new_dat$cumulated_exploitation_time
mm <- model.matrix(terms(mod),new_dat)
mm
mod <- lmer(cumulated_exploitation_time ~ food_source*time + (1|colony_id), data = cumulative_explotation_over_time)
summary(mod)
Anova(mod, type=3)
resids <- residuals(object = mod)
test_norm(resids)
data_predic <- cumulative_explotation_over_time
time_range <- max(data_predic$time)-min(data_predic$time)
new_dat <- expand.grid(
time = seq(min(data_predic$time), max(data_predic$time), length.out = 100),
food_source = unique(data_predic$food_source)
)
new_dat$cumulated_exploitation_time <- predict(mod, new_dat, re.form = NA)
mm <- model.matrix(terms(mod),new_dat)
pvar1 <- diag(mm %*% tcrossprod(vcov(mod),mm))
pvar1
cmult <- 1.96 # use 1.96 for a 95% confidence interval
pvar1 <- diag(mm %*% tcrossprod(vcov(mod),mm))
cmult <- 1.96 # use 1.96 for a 95% confidence interval
new_dat <- data.frame(
new_dat,
ci_lo = new_dat$cumulated_exploitation_time - cmult * sqrt(pvar1),
ci_hi = new_dat$cumulated_exploitation_time + cmult * sqrt(pvar1),
se_lo = new_dat$cumulated_exploitation_time - sqrt(pvar1),
se_hi = new_dat$cumulated_exploitation_time + sqrt(pvar1)
)
new_dat_control     <- new_dat[which(new_dat$food_source == "control"),]
new_dat_virus       <- new_dat[which(new_dat$food_source == "virus"  ),]
data_predic$food_source <- factor(data_predic$food_source, levels = c("control", "virus"))
new_dat_control
p_cum_exploitation <- ggplot(data = new_dat, aes(x = time, y = cumulated_exploitation_time)) +
geom_line(data = new_dat_control, aes(y = cumulated_exploitation_time), size = 1.2, color = col_control) +
geom_line(data = new_dat_virus, aes(y = cumulated_exploitation_time), size = 1.2, color = col_virus) +
geom_ribbon(data = new_dat_control, aes(ymin = ci_lo, ymax = ci_hi), fill = alpha(col_control, 0.2), color = NA) + # ribbons for standard error ranges
geom_ribbon(data = new_dat_virus, aes(ymin = ci_lo, ymax = ci_hi), fill = alpha(col_virus, 0.2), color = NA) +
# Add points for observed data
#geom_point(alpha = 0.5, size = 1, position = position_jitterdodge(jitter.width = 4.2, dodge.width = 9),
#           aes(group = food_source, color = food_source)) +
xlab("Time (sec)") +
ylab("Cumulated Exploitation Time (sec)") +
scale_color_manual(values = c("control" = col_control, "virus" = col_virus)) +
theme_bw() +
theme(legend.title = element_blank())+
theme(legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(p_cum_exploitation)
library(broom.mixed)
# Fit your model
mod <- lmer(cumulated_exploitation_time ~ food_source*time + (1|colony_id), data = cumulative_explotation_over_time)
# Generate predictions and confidence intervals
newdata <- expand.grid(
food_source = unique(cumulative_explotation_over_time$food_source),
time = unique(cumulative_explotation_over_time$time)
)
predictions <- predict(mod, newdata = newdata, re.form = NULL, se.fit = TRUE)
newdata$fit <- predictions$fit
newdata$se.fit <- predictions$se.fit
predictions
newdata$fit <- predictions$fit
predictions <- predict(mod, newdata = newdata, re.form = NULL, se.fit = TRUE)
newdata$fit <- predictions$fit
newdata$se.fit <- predictions$se.fit
emm <- emmeans(mod, ~ food_source * time)
install.packages("sjPlot")
library(sjPlot)
plot_model(mod, type = "pred", terms = c("food_source", "time"), show.data = TRUE)
#### 3.3.5 First feeding ####
names(dat_duration_first)
head(dat_duration_first)
dat_duration_first %>% group_by(colony_id, food_source) %>%
summarise(
time_first_feeding = min(feeding_start_seconds)
)
first_feeding <- dat_duration_first %>% group_by(colony_id, food_source) %>%
summarise(time_first_feeding = min(feeding_start_seconds)) %>% as.data.frame()
first_feeding
first_feeding <- dat_duration_first %>% group_by(colony_id, food_source) %>%
summarise(time_first_feeding = min(feeding_start_seconds, na.rm = TRUE)) %>% as.data.frame()
first_feeding
food_first_eaten_from <- first_feeding %>% group_by(colony_id) %>%
arrange(min_feeding_start_seconds) %>%
slice(1) %>% select(colony_id, earliest_food_source = food_source, earliest_start_time = min_feeding_start_seconds) %>% as.data.frame()
first_feeding %>% group_by(colony_id) %>%
arrange(min_feeding_start_seconds)
first_feeding
food_first_eaten_from <- first_feeding %>% group_by(colony_id) %>%
arrange(time_first_feeding) %>%
slice(1) %>% select(colony_id, earliest_food_source = food_source, earliest_start_time = min_feeding_start_seconds) %>% as.data.frame()
first_feeding %>% group_by(colony_id) %>%
arrange(time_first_feeding)
first_feeding %>% group_by(colony_id) %>%
arrange(colony_id, time_first_feeding)
first_feeding %>% group_by(colony_id) %>%
arrange(colony_id, time_first_feeding) %>%
slice(1)
food_first_eaten_from <- first_feeding %>% group_by(colony_id) %>%
arrange(colony_id, time_first_feeding) %>%
slice(1) %>% select(colony_id, food_first_eaten_from = food_source, time_earliest_feeding = time_first_feeding) %>% as.data.frame()
first_feeding %>% group_by(colony_id) %>%
arrange(colony_id, time_first_feeding) %>%
slice(1) %>% select(colony_id, food_first_eaten_from = food_source, time_earliest_feeding = time_first_feeding)
food_first_eaten_from <- first_feeding %>% group_by(colony_id) %>%
arrange(colony_id, time_first_feeding) %>%
slice(1) %>% select(colony_id, food_first_eaten_from = food_source, time_earliest_feeding = time_first_feeding) %>% as.data.frame()
first_feeding <- dat_duration_first %>% group_by(colony_id, food_source) %>%
summarise(time_first_feeding = as.numeric(min(feeding_start_seconds, na.rm = TRUE))) %>% as.data.frame()
food_first_eaten_from <- first_feeding %>% group_by(colony_id) %>%
arrange(colony_id, time_first_feeding) %>%
slice(1) %>% select(colony_id, food_first_eaten_from = food_source, time_earliest_feeding = time_first_feeding) %>% as.data.frame()
first_feeding
food_first_eaten_from <- first_feeding %>%
group_by(colony_id) %>%
arrange(colony_id, time_first_feeding) %>%
slice(1) %>%
select(colony_id, food_first_eaten_from = food_source, time_earliest_feeding = time_first_feeding) %>%
as.data.frame()
food_first_eaten_from <- first_feeding %>%
group_by(colony_id) %>%
arrange(colony_id, time_first_feeding) %>%
slice(1) %>%
dplyr::select(colony_id, food_first_eaten_from = food_source, time_earliest_feeding = time_first_feeding) %>%
as.data.frame()
food_first_eaten_from <- first_feeding %>% group_by(colony_id) %>%
arrange(colony_id, time_first_feeding) %>%
slice(1) %>% dplyr::select(colony_id, food_first_eaten_from = food_source, time_earliest_feeding = time_first_feeding) %>% as.data.frame()
food_first_eaten_from
first_feeding
# mean time until first feeding per food source
mod <- lmer(time_first_feeding ~ food_source + (1|colony_id), data = first_feeding)
# mean time until first feeding per food source
mod <- lmer(time_first_feeding ~ food_source + (1|colony_id), data = first_feeding)
summary(mod)
Anova(mod)
compareqqnorm(mod); par(mfrow=c(1,1))
compareqqnorm(mod); par(mfrow=c(1,1))
compareqqnorm(mod); par(mfrow=c(1,1))
compareqqnorm(mod)
resid <- residuals(object = mod)
test_norm(resid)
par(mfrow=c(2,2))
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
par(mfrow=c(1,1))
# mean time until first feeding per food source
mod <- lmer(log10(time_first_feeding) ~ food_source + (1|colony_id), data = first_feeding)
summary(mod)
Anova(mod)
compareqqnorm(mod); par(mfrow=c(1,1))
resid <- residuals(object = mod)
test_norm(resid)
par(mfrow=c(2,2))
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
par(mfrow=c(1,1))
food_first_eaten_from
# plot mean number of ants and show which of the food sources was discovered first
ggplot(data_plot2_wide) +
geom_segment(aes(x = 1, xend = 2, y = mean.healthy, yend = mean.virus, color = first_discovered)) +
theme_classic() +
geom_point(aes(x = 1,  y = mean.healthy)) +
geom_point(aes(x = 2, y = mean.virus)) +
scale_x_continuous(name="food source", breaks = c(1,2), labels = c("control", "virus"), limits=c(0.8, 2.2)) +
scale_color_viridis(end = 0.8,
name  ="first discovered",
labels=c("control", "virus"),
discrete = TRUE, option = "D") +
ggtitle("Mean number of ants per food pair") +
ylab("mean number of ants") +
theme(text = element_text(size = 20))
barplot(t, main = "", xlab = "food source", ylab = "number of first discoveries", ylim = c(0,26), xaxt="n")
axis(1, at=c(0.7, 1.95), labels=c("control", "virus"))
segments(x0 = 0.7, y0 =24, x1 = 1.9)
text(x = 1.3, y = 25, label = "p = 0.07 (glmer bino)", font = 2, cex = 1.1)
t
t2 <- table(food_first_eaten_from$food_first_eaten_from)
barplot(t2, main = "", xlab = "food source", ylab = "number of first feedings", ylim = c(0,13), xaxt="n")
axis(1, at=c(0.7, 1.95), labels=c("control", "virus"))
axis(1, at=c(0.7, 1.95), labels=c("control", "virus"))
segments(x0 = 0.7, y0 =24, x1 = 1.9)
segments(x0 = 0.7, y0 =12.5, x1 = 1.9)
n_virus_eaten_first <- sum(food_first_eaten_from$food_first_eaten_from[which(food_first_eaten_from$food_first_eaten_from == "virus"])
n_virus_eaten_first <- sum(food_first_eaten_from$food_first_eaten_from[which(food_first_eaten_from$food_first_eaten_from == "virus")])
n_virus_eaten_first <- sum(food_first_eaten_from$food_first_eaten_from == "virus")
n_virus_eaten_first
n_max <- nrow(food_first_eaten_from)
n_max
prop.test(n_virus_discovered_first, n_max, alternative = "two.sided", p = 0.5)
n_max
n_virus_eaten_first
binom.test(n_virus_discovered_first, n_max, p = 0.5)
prop.test(n_virus_eaten_first, n_max, alternative = "two.sided", p = 0.5)
binom.test(n_virus_eaten_first, n_max, p = 0.5)
text(x = 1.3, y = 25, label = "p = 0.07 (prop.test)", font = 2, cex = 1.1)
text(x = 1.3, y = 13, label = "p = 0.07 (prop.test)", font = 2, cex = 1.1)
barplot(t2, main = "", xlab = "food source", ylab = "number of first feedings", ylim = c(0,14), xaxt="n")
axis(1, at=c(0.7, 1.95), labels=c("control", "virus"))
segments(x0 = 0.7, y0 =12.5, x1 = 1.9)
text(x = 1.3, y = 13, label = "p = 0.07 (prop.test)", font = 2, cex = 1.1)
n_virus_eaten_first <- sum(food_first_eaten_from$food_first_eaten_from == "virus")
n_max <- nrow(food_first_eaten_from)
binom.test(n_virus_eaten_first, n_max, p = 0.5)
prop.test(n_virus_eaten_first, n_max, alternative = "two.sided", p = 0.5)
# there might be a trend but it is just not significant...
ggplot(data_plot2_wide, aes(x = factor(feeding_session), fill = factor(first_discovered_binomial))) +
geom_bar(position = "stack") +
scale_fill_manual(values = c("0" = "#CCEBC5", "1" = "#FBB4AE"),
labels = c("0" = "Control", "1" = "Virus")) +
labs(x = "Week", y = "Count of first discovery", fill = "First Discovered") +
scale_y_continuous(limits = c(0, 18), breaks = c(0, 4, 8, 12, 16)) +
theme_classic() +
annotate("text", x = 1.9 , y = 18, label = "p = 0.07 (glmer bino)",
hjust = 1.1, vjust = 2, size = 4)
