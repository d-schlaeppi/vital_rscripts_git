horiz = TRUE)
mtext("sample", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
percent_positive_DWV <- c(50, 18.75, 0, 0)
percent_positive_DWV_minus <- c(rep(0, 4))
percent_positive_ABPV <- c(85, 87.5, 0, 100)
percent_positive_ABPV_minus c(16.7, 50, 0, 100)
percent_positive_ABPV_minus <- c(16.7, 50, 0, 100)
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers", "queens", "workers", "queens"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("sample", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers", "queens", "workers", "queens"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("sample", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV_minus,
main = "DWV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers", "queens", "workers", "queens"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("sample", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers", "queens", "workers", "queens"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("sample", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 2.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(73, 2.5, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(73, 2.6, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV_minus,
main = "ABPV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers", "queens", "workers", "queens"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("sample", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("sample", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
par(mar = c(5.1, 8.1, 4.1, 2.1))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
par(mar = c(5.1, 7.1, 4.1, 2.1))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
par(mfrow=c(2,2))
par(mar = c(5.1, 7.1, 4.1, 2.1))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV_minus,
main = "DWV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 2.6, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV_minus,
main = "ABPV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV_minus,
main = "DWV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 2.6, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV_minus,
main = "ABPV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
par(mfrow=c(1,1))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
par(mar = c(5.1, 7.3, 4.1, 2.1))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV_minus,
main = "DWV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV_minus,
main = "DWV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 2.6, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(5, 1, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(1, 0, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(1, 0.2, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(1, 0.3, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(1, 0.3, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV_minus,
main = "ABPV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
?rsequ
rm(list=ls())
rm(list=ls())
# libraries
# library(blmeco) #contains compareqqnorm  (multiple qq boxplots)
library(dplyr) #contains pipe operator
library(broom) #contains tidy()
library(viridis)
library(lme4)
library(car) # Anova()
library(multcomp) # contains cld
library(emmeans) # contains emmeans()
library(coxme)
library(survminer) # used in the analysis of the survival curves incl ggsurvplot
library(ggplot2)
library(survival)
library(emmeans)
# set general working directory and get data
directory <- "/Users/gismo/Documents/GitHub/vital_rscripts_git/snf_2/"
setwd(directory) # homeoffice mac github folder
source('printme_coxme.R') # used in the analysis of the survival curves
# load data
dat <- read.table("full_fluorescin_feeding_quantification.txt", header = TRUE)
# prepare data frame:
# fluorescence corrected for ant debris -> subtract values from ant-only wells (negative controls) (is different for run 1 ant 2)
mean_negative_ant_week1_run1 <- mean(dat$fluorescence_week1[dat$sample_type == "negative_ant" & dat$run == 1])
mean_negative_ant_week2_run1 <- mean(dat$fluorescence_week2[dat$sample_type == "negative_ant" & dat$run == 1])
mean_negative_ant_week1_run2  <- mean(dat$fluorescence_week1[dat$sample_type == "negative_ant" & dat$run == 2])
# data frame with corrected fluorescence values
data <- NULL
for(i in 1:nrow(dat)) {
# collect variables
run                   <- as.factor(dat[i, "run"])
nr                    <- dat[i, "nr"]
colony                <- as.factor(dat[i, "colony"])
petridish             <- as.factor(dat[i, "petridish"])
treatment             <- as.factor(dat[i, "treatment"])
sample_type           <- dat[i, "sample_type"]
concentration         <- dat[i, "conc"]
fluorescence_week1    <- dat[i, "fluorescence_week1"]
fluorescence <- ifelse(dat[i, "run"] == 1 & dat[i, "fluorescence_week1"] >= mean_negative_ant_week1_run1,
dat[i, "fluorescence_week1"] - mean_negative_ant_week1_run1,
ifelse(dat[i, "run"] == 2 & dat[i, "fluorescence_week1"] >= mean_negative_ant_week1_run2,
dat[i, "fluorescence_week1"] - mean_negative_ant_week1_run2,
0))
data <- rbind(data, data.frame(run, nr, colony, petridish, treatment, sample_type, concentration, fluorescence
))
}
# std curves only data
data_stdcurves <- subset(data, dat$treatment == "std_curve", drop = TRUE)
data_stdcurves$treatment <- droplevels(data_stdcurves$treatment)
# samples only data
data_samples <- subset(data, dat$sample_type == "ant")
data_samples$treatment <- droplevels(data_samples$treatment)
{
data_samples$treatment <- relevel(data_samples$treatment, "mid")# reorder the levels of the treatment variable
data_samples$treatment <- relevel(data_samples$treatment, "low")
data_samples$treatment <- relevel(data_samples$treatment, "control")
}
head(data_samples)
# preliminary data exploration:
group_by(data_samples, treatment) %>%
summarise(
count = n(),
mean = mean(fluorescence, na.rm = TRUE),
sd = sd(fluorescence, na.rm = TRUE)
)
boxplot(fluorescence ~ treatment, data = data_samples)
# Step 1 use standard curves to calculate micro liter of food instead of fluorescence
# Plot raw standard curves (we had 4 std. curves for the first and two for the second run)
ggplot(data_stdcurves, aes(x = concentration, y = fluorescence, color = sample_type)) +
geom_line() +
xlab("Concentration") +
ylab("Fluorescence") +
ggtitle("Standard Curves") +
scale_color_viridis_d(name = "Run")
# -> standard curves for the second run are flatter --> first and second run need different coefficients for food calculation
# remove no ant standard curve, then calculate a mean std curve for the first and the second round and derive their coefficients for food consumption
data_stdcurves <- subset(data_stdcurves, sample_type != "std_curve_no_ant")
data_stdcurves$sample_type <- droplevels(as.factor(data_stdcurves$sample_type))
# Plot the pooled standard curves for each of the two runs
data_mean <- data_stdcurves %>%
group_by(concentration, run) %>%
summarise(mean_fluorescence = mean(fluorescence))
ggplot(data_mean, aes(x = concentration, y = mean_fluorescence, color = as.factor(run))) +
theme_bw() +
geom_point(size = 3) +
geom_smooth(aes(group = run), method = "lm", se = FALSE, linewidth = 0.5) +
ggtitle("Standard Curves with Linear Model Fit") +
xlab("Concentration [μl fluorescin / 100 μl sugar water]") +
ylab("Mean Fluorescence") +
scale_color_viridis_d(name = "Run")
# get coeficients from linear model to calculate of how much food the ants consumed based on the standard curves (forcing std curves through zero)
data_mean_lm_0 <- data_mean %>%
group_by(run) %>%
do(mod = lm(mean_fluorescence ~ 0 + concentration, data = .))
coef_df_0 <- data_mean_lm_0 %>%
do(tidy(.$mod)) %>%
bind_rows()
# calculate meal volume and add it to the dataframe:
data_samples$consumed_volume_0 <- NA
for (i in 1:nrow(data_samples)) {
if(data_samples[i, "run"] == 1) {
Slope = coef_df_0$estimate[1]
} else {Slope = coef_df_0$estimate[2]}
data_samples[i, "consumed_volume_0"] <- data_samples[i, "fluorescence"] / Slope
}
# Define the labels and their positions
labels_df <- data.frame(treatment = c("high", "mid", "control", "low"),
label = c("a", "ab", "ab", "b"),
x = c(1, 2, 3, 4),
y = c(0.8, 0.8, 0.8, 0.8))
# Plot with labels
ggplot(data_samples, aes(x = treatment, y = consumed_volume_0)) +
geom_boxplot(fill = alpha("grey", 0.5), color = "black", notch = TRUE) +
geom_jitter(width = 0.2, height = 0, alpha = 0.2, color = viridis(1)[1]) +
labs(x = "Treatments", y = "Sugarwater Consumption [μL]", title = "") +
theme(panel.background = element_rect(fill = "white", color = "black"),
panel.border = element_rect(color = "black", fill = NA),
axis.title = element_text(size = 15),
axis.text = element_text(size = 13)) +
geom_text(data = labels_df, aes(label = label, x = x, y = y, fontface = "bold"),
hjust = -0.2, vjust = 0.5, size = 5)
mod <- glmer.nb(consumed_volume_0 ~ treatment + (1|colony) + (1|petridish) + (1|run), data = data_samples)
summary(mod)
Anova(mod)
cld(emmeans(mod, pairwise ~ "treatment", adjust = "tukey"), Letters = letters)
# mean consumed volume for control low mid combined:
mean_consumed_volume <- mean(data_samples$consumed_volume_0[data_samples$treatment %in% c("low", "control", "mid")], na.rm = TRUE)
mean_consumed_volume
