geom_point(size = 3) +
geom_smooth(aes(group = run), method = "lm", se = FALSE, size = 0.5) +
ggtitle("Standard Curves with Linear Model Fit") +
xlab("Concentration [μl fluorescin / 100 μl sugar water]") +
ylab("Mean Fluorescence") +
scale_color_viridis_d(name = "Run")
ggplot(data_mean, aes(x = mean_fluorescence, y = concentration, color = as.factor(run))) +
geom_point(size = 3) +
geom_smooth(aes(group = run), method = "lm", se = FALSE, size = 0.5) +
ggtitle("Standard Curves with Linear Model Fit") +
ylab("Concentration [μl fluorescin / 100 μl sugar water]") +
xlab("Mean Fluorescence") +
scale_color_viridis_d(name = "Run")
m <- lm(mean_fluorescence ~ concentration, data = run_1)
run_1 <- subset(data_mean, run == 1)
m <- lm(mean_fluorescence ~ concentration, data = run_1)
m
m0 <- lm(mean_fluorescence ~ 0 + concentration, data = run_1)
m0
# calculation of how much food the ants consumed based on the standard curves.
data_mean_lm <- data_mean %>%
group_by(run) %>%
do(mod = lm(mean_fluorescence ~ 0 + concentration, data = .))
coef_df <- data_mean_lm %>%
do(tidy(.$mod)) %>%
bind_rows()
coef_df
data_samples$consumed_volume <- NA
for (i in 1:nrow(data_samples)) {
if (data_samples[i, "run"] == 1) {
coefs <- data.frame(Slope = coef_df[1, "estimate"])
colnames(coefs) <- c("Slope")
} else {
coefs <- data.frame(Slope = coef_df[3, "estimate"])
colnames(coefs) <- c("Slope")
}
data_samples[i, "consumed_volume"] <- (data_samples[i, "fluorescence"] - coefs$Intercept) / coefs$Slope
}
data_samples$consumed_volume <- NA
for (i in 1:nrow(data_samples)) {
if (data_samples[i, "run"] == 1) {
coefs <- data.frame(Slope = coef_df[1, "estimate"])
colnames(coefs) <- c("Slope")
} else {
coefs <- data.frame(Slope = coef_df[3, "estimate"])
colnames(coefs) <- c("Slope")
}
data_samples[i, "consumed_volume"] <- (data_samples[i, "fluorescence"] - coefs$Intercept) / coefs$Slope
}
for (i in 1:nrow(data_samples)) {
if (data_samples[i, "run"] == 1) {
coefs <- data.frame(Slope = coef_df[1, "estimate"])
colnames(coefs) <- c("Slope")
} else {
coefs <- data.frame(Slope = coef_df[2, "estimate"])
colnames(coefs) <- c("Slope")
}
data_samples[i, "consumed_volume"] <- (data_samples[i, "fluorescence"] - coefs$Intercept) / coefs$Slope
}
coefs <- data.frame(Slope = coef_df[1, "estimate"])
colnames(coefs) <- c("Slope")
coefs
data_samples$consumed_volume
plot(data_stdcurves$concentration[data_stdcurves$sample_type != "std_curve_no_ant"] ~ data_stdcurves$fluorescence[data_stdcurves$sample_type != "std_curve_no_ant"],
xlab = "fluorescence", ylab = "volume of food in ul")
abline(linear_model <- lm(concentration ~ fluorescence, data = data_stdcurves))
# calculation of how much food the ants consumed based on the standard curves.
data_mean_lm <- data_mean %>%
group_by(run) %>%
do(mod = lm(mean_fluorescence ~ 0 + concentration, data = .))
coef_df <- data_mean_lm %>%
do(tidy(.$mod)) %>%
bind_rows()
coef_df
Intercept = coef_df$estimate
Intercept
coef_df$estimate[1]
for (i in 1:nrow(data_samples)) {
if(data_samples[i, "run"] == 1) {
Intercept = coef_df$estimate[1]
} else {Intercept = coef_df$estimate[2]}
data_samples[i, "consumed_volume"] <- data_samples[i, "fluorescence"] / coefs$Slope
}
data_samples
data_samples$consumed_volume
boxplot(data_samples$consumed_volume ~ data_samples$treatment)
data_run_1 <- subset(data_mean, run == 1)
data_run_2 <- subset(data_mean, run == 2)
data_run_1 <- subset(data_samples, run == 1)
data_run_2 <- subset(data_samples, run == 2)
boxplot(data_run_1$consumed_volume~data_run_1$treatment)
boxplot(data_run_1$consumed_volume~data_run_1$treatment)
boxplot(data_run_2$consumed_volume~data_run_2$treatment)
#### 1. prerequisites ####
rm(list=ls())
# set general working directory and get data
directory <- "/Users/gismo/Documents/GitHub/snf_2/"
setwd(directory) # homeoffice mac github folder
#### 2. Fluorescin Feeding trial ####
files <- list.files()
print(files)
dat <- read.table("full_fluorescin_feeding_quantification.txt", header = TRUE)
head(dat)
mean_negative_ant_week1_run1 <- mean(dat$fluorescence_week1[dat$sample_type == "negative_ant" & dat$run == 1])
mean_negative_ant_week2_run1 <- mean(dat$fluorescence_week2[dat$sample_type == "negative_ant" & dat$run == 1])
mean_negative_ant_week1_run2  <- mean(dat$fluorescence_week1[dat$sample_type == "negative_ant" & dat$run == 2])
data <- NULL
for(i in 1:nrow(dat)) {
# collect variables
run                   <- as.factor(dat[i, "run"])
nr                    <- dat[i, "nr"]
colony                <- dat[i, "colony"]
petridish             <- dat[i, "petridish"]
treatment             <- as.factor(dat[i, "treatment"])
sample_type           <- dat[i, "sample_type"]
concentration         <- dat[i, "conc"]
fluorescence_week1    <- dat[i, "fluorescence_week1"]
fluorescence_week1_corrected <- ifelse(dat[i, "run"] == 1 & dat[i, "fluorescence_week1"] >= mean_negative_ant_week1_run1,
dat[i, "fluorescence_week1"] - mean_negative_ant_week1_run1,
ifelse(dat[i, "run"] == 2 & dat[i, "fluorescence_week1"] >= mean_negative_ant_week1_run2,
dat[i, "fluorescence_week1"] - mean_negative_ant_week1_run2,
0))
fluorescence_week2    <- dat[i, "fluorescence_week2"]
fluorescence_week2_corrected <- ifelse(dat[i, "run"] == 1 & !is.na(dat[i, "fluorescence_week2"]) & dat[i, "fluorescence_week2"] >= mean_negative_ant_week2_run1,
dat[i, "fluorescence_week2"] - mean_negative_ant_week2_run1,
ifelse(is.na(dat[i, "fluorescence_week2"]),
NA,
0))
data <- rbind(data, data.frame(run, nr, colony, petridish, treatment, sample_type, concentration, fluorescence_week1_corrected, fluorescence_week2_corrected
))
}
table(data$treatment)
#### 2.1 Fluorescin decay ####
# Is week one significantly different from week 2 #
# To test if there is a decay of the fluorescin signal if the samples are in the freezer at -80°C for a week we compare week 1 values with week2 values (repeated measures on the same samples)
# modify data so we have a long table with fluorescence for week 1 and week 2 in one column
data_long <- melt(data, id.vars=c("run", "nr", "colony", "petridish", "treatment", "sample_type", "concentration"))
# renaming variables
names(data_long)[names(data_long) == "variable"] <- "week"
names(data_long)[names(data_long) == "value"] <- "fluorescence"
data_long$week <- str_replace(data_long$week, "fluorescence_week1_corrected", "week_1")
data_long$week <- str_replace(data_long$week, "fluorescence_week2_corrected", "week_2")
data_long$week <- as.factor(data_long$week)
# first look
group_by(data_long, week, run) %>%
summarise(
count = n(),
mean = mean(fluorescence, na.rm = TRUE),
sd = sd(fluorescence, na.rm = TRUE)
)
# separate standard curves from data points because they have totally different values and check how they look
# std curves only
data_stdcurves <- subset(data_long, dat$treatment == "std_curve", drop = TRUE)
data_stdcurves$treatment <- droplevels(data_stdcurves$treatment)
# samples only
data_samples <- subset(data_long, dat$sample_type == "ant")
data_samples$treatment <- droplevels(data_samples$treatment)
table(data_samples$treatment)
# reorder the levels of the treatment variable
data_samples$treatment <- factor(data_samples$treatment)
# reorder the levels of the treatment variable
data_samples$treatment1 <- factor(data_samples$treatment)
levels(data_samples$treatment1) <- c("control", "low", "mid", "high")
levels(data_samples$treatment1) <- c("control", "low", "mid", "high")
data_samples$treatment1 <- recode(data_samples$treatment1, !!! set_names(levels(data_samples$treatment1), levels(data_samples$treatment1)))
table(data_samples$treatment1)
# reorder the levels of the treatment variable
data_samples$treatment <- droplevels(data_samples$treatment)
data_samples$treatment <- relevel(data_samples$treatment, "mid")
data_samples$treatment <- relevel(data_samples$treatment, "low")
data_samples$treatment <- relevel(data_samples$treatment, "control")
table(data_samples$treatment)
### visualisations ###
#without loosing the paired information:
# Subset data week 1 and week 2
before <- subset(data_samples,  week == "week_1", fluorescence, drop = TRUE)
after <- subset(data_samples,  week == "week_2", fluorescence, drop = TRUE)
# Plot paired data
pd <- paired(before, after)
plot(pd, type = "profile") + theme_bw()
ggpaired(data_samples, x = "week", y = "fluorescence", xlab = "time", ylab = "fluorescence",
color = "week", line.color = "gray", line.size = 0.4,
palette = "jco")
#only the first round:
data_samples_run1 <- data_samples[data_samples$run == 1, ]
ggpaired(data_samples_run1, x = "week", y = "fluorescence", xlab = "time", ylab = "fluorescence",
color = "week", line.color = "gray", line.size = 0.4,
palette = "jco")
# compute the difference
d <- with(data_samples, fluorescence[week == "week_1"] - fluorescence[week == "week_2"])
# Shapiro-Wilk normality test for the differences
shapiro.test(d) # => p-value ckearly smaller than 0.05 and thus the nullhypothesis of normally distributed data has to be rejected
hist(d)
# statistical test:
paired_t_test <- t.test(before, after, paired = TRUE)
paired_t_test # significant, but because the data is not normally distributed a non parametric test has to be used
# paired Wilcox signed rank test
wilcox.test(before, after, paired = TRUE)
#### 2.2 Food consumption ####
#is there a significant difference between treatments regarding food consumption #
# we no longer need week 2 --> create a subset of week1 only for both samples and standard curves
data_samples <- subset(data_samples, week == "week_1")
data_stdcurves <- subset(data_stdcurves, week == "week_1")
# preliminary data exploration:
group_by(data_samples, treatment) %>%
summarise(
count = n(),
mean = mean(fluorescence, na.rm = TRUE),
sd = sd(fluorescence, na.rm = TRUE)
)
boxplot(fluorescence ~ treatment, data = data_samples)
# Step 1 use standard curves to calculate micro liter of food instead of fluorescence
# Plot the standard curves
ggplot(data_stdcurves, aes(x = concentration, y = fluorescence, color = sample_type)) +
geom_line() +
xlab("Concentration") +
ylab("Fluorescence") +
ggtitle("Standard Curves") +
scale_color_discrete(name = "Sample Type")
data_stdcurves <- subset(data_stdcurves, sample_type != "std_curve_no_ant")
data_stdcurves$sample_type <- droplevels(as.factor(data_stdcurves$sample_type))
# Plot the pooled standard curves for each of the two runs
data_mean <- data_stdcurves %>%
group_by(concentration, run) %>%
summarise(mean_fluorescence = mean(fluorescence))
ggplot(data_mean, aes(x = concentration, y = mean_fluorescence, color = as.factor(run))) +
geom_point(size = 3) +
geom_smooth(aes(group = run), method = "lm", se = FALSE, size = 0.5) +
ggtitle("Standard Curves with Linear Model Fit") +
xlab("Concentration [μl fluorescin / 100 μl sugar water]") +
ylab("Mean Fluorescence") +
scale_color_viridis_d(name = "Run")
ggplot(data_mean, aes(x = mean_fluorescence, y = concentration, color = as.factor(run))) +
geom_point(size = 3) +
geom_smooth(aes(group = run), method = "lm", se = FALSE, size = 0.5) +
ggtitle("Standard Curves with Linear Model Fit") +
ylab("Concentration [μl fluorescin / 100 μl sugar water]") +
xlab("Mean Fluorescence") +
scale_color_viridis_d(name = "Run")
data_run_1 <- subset(data_samples, run == 1)
boxplot(data_run_1$consumed_volume~data_run_1$treatment)
# calculation of how much food the ants consumed based on the standard curves.
data_mean_lm_0 <- data_mean %>%
group_by(run) %>%
do(mod = lm(mean_fluorescence ~ 0 + concentration, data = .))
coef_df_0 <- data_mean_lm %>%
do(tidy(.$mod)) %>%
bind_rows()
# calculation of how much food the ants consumed based on the standard curves.
data_mean_lm_0 <- data_mean %>%
group_by(run) %>%
do(mod = lm(mean_fluorescence ~ 0 + concentration, data = .))
coef_df_0 <- data_mean_lm_0 %>%
do(tidy(.$mod)) %>%
bind_rows()
coef_df_0
# calculation of how much food the ants consumed based on the standard curves (but NOT forcing std curves through zero) -> intercept != 0
data_mean_lm_1 <- data_mean %>%
group_by(run) %>%
do(mod = lm(mean_fluorescence ~ concentration, data = .))
coef_df_1 <- data_mean_lm_1 %>%
do(tidy(.$mod)) %>%
bind_rows()
coef_df_1
# actual calculation:
data_samples$consumed_volume_0 <- NA
Slope = 0
Intercept = coef_df_0$estimate[1]
# actual calculation:
data_samples$consumed_volume_0 <- NA
Slope = 0
Intercept = coef_df_0$estimate[1]
coef_df_0
for (i in 1:nrow(data_samples)) {
if(data_samples[i, "run"] == 1) {
Intercept = coef_df$estimate[1]
} else {Intercept = coef_df$estimate[2]}
data_samples[i, "consumed_volume_0"] <- data_samples[i, "fluorescence"] / Intercept
}
# calculation for the 0 model
data_samples$consumed_volume_0 <- NA
Slope = 0
for (i in 1:nrow(data_samples)) {
if(data_samples[i, "run"] == 1) {
Intercept = coef_df_0$estimate[1]
} else {Intercept = coef_df_0$estimate[2]}
data_samples[i, "consumed_volume_0"] <- data_samples[i, "fluorescence"] / Intercept
}
data_samples$consumed_volume_0
boxplot(data_samples$consumed_volume ~ data_samples$treatment)
data_run_1 <- subset(data_samples, run == 1)
data_run_2 <- subset(data_samples, run == 2)
boxplot(data_run_1$consumed_volume~data_run_1$treatment)
boxplot(data_run_2$consumed_volume~data_run_2$treatment)
coef_df_1
# calculation for the model with intercept !=0
data_samples$consumed_volume_1 <- NA
for (i in 1:nrow(data_samples)) {
if(data_samples[i, "run"] == 1) {
Intercept = coef_df_1$estimate[1]
Slope = coef_df_1$estimate[2]
} else {
Intercept = coef_df_0$estimate[3]
Slope = coef_df_1$estimate[4]}
data_samples[i, "consumed_volume_1"] <- (data_samples[i, "fluorescence"] - Intercept) / Slope
}
boxplot(data_samples$consumed_volume_0 ~ data_samples$treatment)
boxplot(data_samples$consumed_volume_1 ~ data_samples$treatment)
data_run_1 <- subset(data_samples, run == 1)
data_run_2 <- subset(data_samples, run == 2)
boxplot(data_run_1$consumed_volume~data_run_1$treatment)
data_samples
#### 1. prerequisites ####
rm(list=ls())
# set general working directory and get data
directory <- "/Users/gismo/Documents/GitHub/snf_2/"
setwd(directory) # homeoffice mac github folder
#### 2. Fluorescin Feeding trial ####
files <- list.files()
print(files)
dat <- read.table("full_fluorescin_feeding_quantification.txt", header = TRUE)
head(dat)
mean_negative_ant_week1_run1 <- mean(dat$fluorescence_week1[dat$sample_type == "negative_ant" & dat$run == 1])
mean_negative_ant_week2_run1 <- mean(dat$fluorescence_week2[dat$sample_type == "negative_ant" & dat$run == 1])
mean_negative_ant_week1_run2  <- mean(dat$fluorescence_week1[dat$sample_type == "negative_ant" & dat$run == 2])
data <- NULL
for(i in 1:nrow(dat)) {
# collect variables
run                   <- as.factor(dat[i, "run"])
nr                    <- dat[i, "nr"]
colony                <- dat[i, "colony"]
petridish             <- dat[i, "petridish"]
treatment             <- as.factor(dat[i, "treatment"])
sample_type           <- dat[i, "sample_type"]
concentration         <- dat[i, "conc"]
fluorescence_week1    <- dat[i, "fluorescence_week1"]
fluorescence_week1_corrected <- ifelse(dat[i, "run"] == 1 & dat[i, "fluorescence_week1"] >= mean_negative_ant_week1_run1,
dat[i, "fluorescence_week1"] - mean_negative_ant_week1_run1,
ifelse(dat[i, "run"] == 2 & dat[i, "fluorescence_week1"] >= mean_negative_ant_week1_run2,
dat[i, "fluorescence_week1"] - mean_negative_ant_week1_run2,
0))
fluorescence_week2    <- dat[i, "fluorescence_week2"]
fluorescence_week2_corrected <- ifelse(dat[i, "run"] == 1 & !is.na(dat[i, "fluorescence_week2"]) & dat[i, "fluorescence_week2"] >= mean_negative_ant_week2_run1,
dat[i, "fluorescence_week2"] - mean_negative_ant_week2_run1,
ifelse(is.na(dat[i, "fluorescence_week2"]),
NA,
0))
data <- rbind(data, data.frame(run, nr, colony, petridish, treatment, sample_type, concentration, fluorescence_week1_corrected, fluorescence_week2_corrected
))
}
#### 2.1 Fluorescin decay ####
# Is week one significantly different from week 2 #
# To test if there is a decay of the fluorescin signal if the samples are in the freezer at -80°C for a week we compare week 1 values with week2 values (repeated measures on the same samples)
# modify data so we have a long table with fluorescence for week 1 and week 2 in one column
data_long <- melt(data, id.vars=c("run", "nr", "colony", "petridish", "treatment", "sample_type", "concentration"))
# renaming variables
names(data_long)[names(data_long) == "variable"] <- "week"
names(data_long)[names(data_long) == "value"] <- "fluorescence"
data_long$week <- str_replace(data_long$week, "fluorescence_week1_corrected", "week_1")
data_long$week <- str_replace(data_long$week, "fluorescence_week2_corrected", "week_2")
data_long$week <- as.factor(data_long$week)
# first look
group_by(data_long, week, run) %>%
summarise(
count = n(),
mean = mean(fluorescence, na.rm = TRUE),
sd = sd(fluorescence, na.rm = TRUE)
)
# separate standard curves from data points because they have totally different values and check how they look
# std curves only
data_stdcurves <- subset(data_long, dat$treatment == "std_curve", drop = TRUE)
data_stdcurves$treatment <- droplevels(data_stdcurves$treatment)
# samples only
data_samples <- subset(data_long, dat$sample_type == "ant")
data_samples$treatment <- droplevels(data_samples$treatment)
# reorder the levels of the treatment variable
data_samples$treatment <- droplevels(data_samples$treatment)
data_samples$treatment <- relevel(data_samples$treatment, "mid")
data_samples$treatment <- relevel(data_samples$treatment, "low")
data_samples$treatment <- relevel(data_samples$treatment, "control")
### visualisations ###
#without loosing the paired information:
# Subset data week 1 and week 2
before <- subset(data_samples,  week == "week_1", fluorescence, drop = TRUE)
after <- subset(data_samples,  week == "week_2", fluorescence, drop = TRUE)
# Plot paired data
pd <- paired(before, after)
plot(pd, type = "profile") + theme_bw()
ggpaired(data_samples, x = "week", y = "fluorescence", xlab = "time", ylab = "fluorescence",
color = "week", line.color = "gray", line.size = 0.4,
palette = "jco")
#only the first round:
data_samples_run1 <- data_samples[data_samples$run == 1, ]
ggpaired(data_samples_run1, x = "week", y = "fluorescence", xlab = "time", ylab = "fluorescence",
color = "week", line.color = "gray", line.size = 0.4,
palette = "jco")
# compute the difference
d <- with(data_samples, fluorescence[week == "week_1"] - fluorescence[week == "week_2"])
# Shapiro-Wilk normality test for the differences
shapiro.test(d) # => p-value ckearly smaller than 0.05 and thus the nullhypothesis of normally distributed data has to be rejected
hist(d)
# statistical test:
paired_t_test <- t.test(before, after, paired = TRUE)
paired_t_test # significant, but because the data is not normally distributed a non parametric test has to be used
# paired Wilcox signed rank test
wilcox.test(before, after, paired = TRUE)
#### 2.2 Food consumption ####
#is there a significant difference between treatments regarding food consumption #
# we no longer need week 2 --> create a subset of week1 only for both samples and standard curves
data_samples <- subset(data_samples, week == "week_1")
data_stdcurves <- subset(data_stdcurves, week == "week_1")
# preliminary data exploration:
group_by(data_samples, treatment) %>%
summarise(
count = n(),
mean = mean(fluorescence, na.rm = TRUE),
sd = sd(fluorescence, na.rm = TRUE)
)
boxplot(fluorescence ~ treatment, data = data_samples)
# Step 1 use standard curves to calculate micro liter of food instead of fluorescence
# Plot the standard curves
ggplot(data_stdcurves, aes(x = concentration, y = fluorescence, color = sample_type)) +
geom_line() +
xlab("Concentration") +
ylab("Fluorescence") +
ggtitle("Standard Curves") +
scale_color_discrete(name = "Sample Type")
data_stdcurves <- subset(data_stdcurves, sample_type != "std_curve_no_ant")
data_stdcurves$sample_type <- droplevels(as.factor(data_stdcurves$sample_type))
# Plot the pooled standard curves for each of the two runs
data_mean <- data_stdcurves %>%
group_by(concentration, run) %>%
summarise(mean_fluorescence = mean(fluorescence))
ggplot(data_mean, aes(x = concentration, y = mean_fluorescence, color = as.factor(run))) +
geom_point(size = 3) +
geom_smooth(aes(group = run), method = "lm", se = FALSE, size = 0.5) +
ggtitle("Standard Curves with Linear Model Fit") +
xlab("Concentration [μl fluorescin / 100 μl sugar water]") +
ylab("Mean Fluorescence") +
scale_color_viridis_d(name = "Run")
# calculation of how much food the ants consumed based on the standard curves (forcing std curves through zero)
data_mean_lm_0 <- data_mean %>%
group_by(run) %>%
do(mod = lm(mean_fluorescence ~ 0 + concentration, data = .))
coef_df_0 <- data_mean_lm_0 %>%
do(tidy(.$mod)) %>%
bind_rows()
coef_df_0
# calculation of how much food the ants consumed based on the standard curves (but NOT forcing std curves through zero) -> intercept != 0
data_mean_lm_1 <- data_mean %>%
group_by(run) %>%
do(mod = lm(mean_fluorescence ~ concentration, data = .))
coef_df_1 <- data_mean_lm_1 %>%
do(tidy(.$mod)) %>%
bind_rows()
# calculation for the 0 model
data_samples$consumed_volume_0 <- NA
for (i in 1:nrow(data_samples)) {
if(data_samples[i, "run"] == 1) {
Slope = coef_df_0$estimate[1]
} else {Intercept = coef_df_0$estimate[2]}
data_samples[i, "consumed_volume_0"] <- data_samples[i, "fluorescence"] / Slope
}
data_samples$consumed_volume_0
data_samples
boxplot(data_samples$consumed_volume ~ data_samples$treatment)
# calculation for the model with intercept !=0
data_samples$consumed_volume_1 <- NA
for (i in 1:nrow(data_samples)) {
if(data_samples[i, "run"] == 1) {
Intercept = coef_df_1$estimate[1]
Slope = coef_df_1$estimate[2]
} else {
Intercept = coef_df_0$estimate[3]
Slope = coef_df_1$estimate[4]}
data_samples[i, "consumed_volume_1"] <- (data_samples[i, "fluorescence"] - Intercept) / Slope
}
data_samples
View(data_samples)
View(data_samples)
data_samples$consumed_volume_1
# calculation for the model with intercept !=0
data_samples$consumed_volume_1 <- NA
for (i in 1:nrow(data_samples)) {
if(data_samples[i, "run"] == 1) {
Intercept = coef_df_1$estimate[1]
Slope = coef_df_1$estimate[2]
} else {
Intercept = coef_df_1$estimate[3]
Slope = coef_df_1$estimate[4]}
data_samples[i, "consumed_volume_1"] <- (data_samples[i, "fluorescence"] - Intercept) / Slope
}
data_samples$consumed_volume_1
head(data_samples)
boxplot(data_samples$consumed_volume_1 ~ data_samples$treatment)
boxplot(data_samples$consumed_volume_0 ~ data_samples$treatment)
boxplot(data_samples$consumed_volume_0 ~ data_samples$treatment)
boxplot(data_samples$consumed_volume_1 ~ data_samples$treatment)
#comparison
data_samples$consumed_volume_0
data_samples$consumed_volume_1
data_run_1 <- subset(data_samples, run == 1)
data_run_2 <- subset(data_samples, run == 2)
boxplot(data_run_1$consumed_volume~data_run_1$treatment)
boxplot(data_run_1$consumed_volume_0~data_run_1$treatment)
boxplot(data_run_2$consumed_volume_0~data_run_2$treatment)
boxplot(data_samples$consumed_volume_0 ~ data_samples$treatment)
boxplot(data_run_1$consumed_volume_0~data_run_1$treatment)
boxplot(data_run_2$consumed_volume_0~data_run_2$treatment)
plot(data_stdcurves$concentration[data_stdcurves$sample_type != "std_curve_no_ant"] ~ data_stdcurves$fluorescence[data_stdcurves$sample_type != "std_curve_no_ant"],
xlab = "fluorescence", ylab = "volume of food in ul")
abline(linear_model <- lm(concentration ~ fluorescence, data = data_stdcurves))
