summary(final$treatment_1)
summary(final$treatment_2)
final$treatment_1 <- as.factor(final$treatment_1)
final$treatment_1 <- factor(final$treatment_1, levels = c("control", "low", "high"))
final$treatment_2 <- as.factor(final$treatment_2)
final$workforce <- final$pupae+final$adults # create a new variable the looks at the total workforce available to the colony in a short time --> will mostlikely be neglected later, but might be interesting
final$workforce
mean(final$workforce)
boxplot(pupae ~ treatment_1, data=final)
boxplot(adults ~ treatment_1, data=final)
boxplot(workforce ~ treatment_1, data=final) # not really different and thus neglected (it is at the end of the season and thus not a lot of pupae are in the colonies anyways)
# First graph of colonysize for y1 and y2
boxplot(final$adults ~ final$treatment_1)
boxplot(final1$adults ~ final1$treatment_1)
#### weight of workers and queens ####
boxplot(final$weight_queen ~ final$treatment_1)
boxplot(final$weight_20adults ~final$treatment_1)
#workers
shapiro.test(final$weight_20adults)  # nicht signifikant und daher nehmen kann normalverteilung angenommen werden.
leveneTest(final$weight_20adults, final$treatment_1) # nicht signifikant --> Nullhypothese von gleicher Varianz kann angenommen werden.
fligner.test(final$weight_20adults, final$treatment_1) #Test for Homoskedacity, nicht signifikant --> Nullhypothese kann angenommen werden --> ANOVA
mod <- lm(final$weight_20adults ~ final$treatment_1)
summary(mod)
anova(mod) # signifikante differenz zwischen den drei gruppen
#pairwise post hoc tests
#bonferroni
pairwise.t.test(final$weight_20adults, final$treatment_1, p.adj = "bonf")
#Tukey HSD
a1 <- aov(mod)
TukeyHSD(a1)
#queens
shapiro.test(final$weight_queen)  # nicht signifikant und daher nehmen kann normalverteilung angenommen werden.
leveneTest(final$weight_queen, final$treatment_1) # nicht signifikant --> Nullhypothese von gleicher Varianz kann angenommen werden.
fligner.test(final$weight_queen, final$treatment_1) #Test for Homoskedacity, nicht signifikant --> Nullhypothese kann angenommen werden --> ANOVA
mod <- lm(final$weight_queen ~ final$treatment_1)
anova(mod) # keine signifikante differenz zwischen den drei gruppen
summary(mod)
#pairwise post hoc tests
#bonferroni
pairwise.t.test(final$weight_queen, final$treatment_1, p.adj = "bonf")
#Tukey HSD
a1 <- aov(mod)
TukeyHSD(a1)
control <- subset(final, treatment_1 == "control")
low     <- subset(final, treatment_1 == "low")
high    <- subset(final, treatment_1 == "high")
mean(final$weight_queen)
sd(final$weight_queen, na.rm = TRUE)
mean(control$weight_queen)
sd(control$weight_queen, na.rm = TRUE)
mean(low$weight_queen)
sd(low$weight_queen, na.rm = TRUE)
mean(high$weight_queen)
sd(high$weight_queen, na.rm = TRUE)
mean(control$weight_20adults)
sd(control$weight_20adults, na.rm = TRUE)
mean(low$weight_20adults)
sd(low$weight_20adults, na.rm = TRUE)
mean(high$weight_20adults)
sd(high$weight_20adults, na.rm = TRUE)
par(mfrow=c(1,2))
boxplot(final$weight_queen ~final$treatment_1, main = "queen weight", xlab = "treatments", ylab="weight [mg]", ylim=c(22, 47) )
text(c(1,2,3), 45.6, labels = c("a", "a", "a"), font = 2)
mtext('A', side=3, line=1.5, at=0, cex = 1.5, font = 2)
boxplot(final$weight_20adults ~final$treatment_1, main = "weight of 20 workers", xlab = "treatments", ylab="weight [mg]", ylim=c(15, 25) )
text(c(1,2,3), 24.5, labels = c("a", "ab", "b"), font = 2)
mtext('B', side=3, line=1.5, at=0, cex = 1.5, font = 2)
boxplot(final1$adults ~ final1$treatment_1)
boxplot(final$adults ~ final$treatment_1)
#Y1 adults
shapiro.test(final1$adults)
hist(final1$adults)
mod <- lm(adults ~ treatment_1, data=final1)
mod
summary(modc)
summary(mod)
Anova(mod)
par(mfrow=c(2,2))
plot(modc)
acf(resid(modc))
par(mfrow=c(2,2))
plot(mod)
acf(resid(mod))
final$treat21 <- factor(paste(final$treatment_2, final$treatment_1))
final$treat21
plot(resid(modc)~final$treatment_1)
plot(resid(mod)~final$treatment_1)
par(mfrow=c(2,2))
plot(mod)
acf(resid(mod))
anova(mod)
#Y2 adults
mod <- lm(adults ~ treatment_1, data=final)
par(mfrow=c(2,2))
plot(mod)
acf(resid(mod))
summary(mod)
anova(mod)
a1 <- aov(mod)
TukeyHSD(a1)
#Y1 adults
mod <- lm(adults ~ treatment_1, data=final1)
par(mfrow=c(2,2))
plot(mod)
acf(resid(mod))
summary(mod)
anova(mod) # keine signifikante differenz zwischen den drei gruppen --> auch kein post hoc test der differenz nötig.
control1 <- subset(final1, treatment_1 == "control")
low1     <- subset(final1, treatment_1 == "low")
high1    <- subset(final1, treatment_1 == "high")
#Mean and SD values
mean(control1$adults)
sd(control1$adults, na.rm = TRUE)
mean(low1$adults)
sd(low1$adults, na.rm = TRUE)
mean(high1$adults)
sd(high1$adults, na.rm = TRUE)
meadian(control1$adults)
median(control1$adults)
median(control1$adults)
meadian(control1$adults)
median(control1$adults)
median(low1$adults)
median(high1$adults)
#Y2 adults
mod <- lm(adults ~ treatment_1, data=final)
par(mfrow=c(2,2))
plot(mod)
acf(resid(mod))
summary(mod)
anova(mod)
#Mean and SD values
mean(control$adults)
sd(control$adults, na.rm = TRUE)
mean(low$adults)
sd(low$adults, na.rm = TRUE)
a1 <- aov(mod)
TukeyHSD(a1)
mean(high$adults)
sd(high$adults, na.rm = TRUE)
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers" )
#nicer boxplot
par(mfrow=c(1,2))
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers" )
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers", ylim=c(0, 26))
text(c(1,2,3), 25, labels = c("a", "a", "a"), font = 2)
#nicer boxplot
par(mfrow=c(1,2))
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers", ylim=c(0, 26))
text(c(1,2,3), 25, labels = c("a", "a", "a"), font = 2)
mtext('A', side=3, line=1.5, at=0, cex = 1.5, font = 2)
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers")
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers", ylim=c(, 420) )
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers", ylim=c(140, 420) )
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers", ylim=c(120, 420) )
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers", ylim=c(0, 26))
text(c(1,2,3), 25, labels = c("a", "a", "a"), font = 2)
mtext('A', side=3, line=1.5, at=0, cex = 1.5, font = 2)
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers", ylim=c(120, 420) )
text(c(1,2,3), 420, labels = c("a", "b", "b"), font = 2)
text(c(1,2,3), 400, labels = c("a", "b", "b"), font = 2)
text(c(1,2,3), 410, labels = c("a", "b", "b"), font = 2)
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers", ylim=c(0, 26))
text(c(1,2,3), 25, labels = c("a", "a", "a"), font = 2)
mtext('A', side=3, line=1.5, at=0, cex = 1.5, font = 2)
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers", ylim=c(120, 420) )
text(c(1,2,3), 410, labels = c("a", "b", "b"), font = 2)
mtext('B', side=3, line=1.5, at=0, cex = 1.5, font = 2)
modc <- lm(workforce ~ treatment_1, data=final)
modc
summary(modc)
Anova(modc)
final$treatment_1 <- relevel(final$treatment_1, ref ="low")
modc <- lm(adults ~ treatment_1, data=final)
summary(modc)
final$treatment_1 <- relevel(final$treatment_1, ref ="control")
#check the model assumptions
par(mfrow=c(2,2))
plot(modc)
mod <- lm(aduöts ~ treatment_1, data = final)
mod <- lm(adults ~ treatment_1, data = final)
mod
summary(mod)
anova(mod)
a1 <- aov(mod)
TukeyHSD(a1)
#relevel to see pairwais differences (not correct)
final$treatment_1 <- relevel(final$treatment_1, ref ="low")
modc <- lm(adults ~ treatment_1, data=final)
summary(modc)
final$treatment_1 <- relevel(final$treatment_1, ref ="control")
mod <- lm(adults ~ treatment_1, data = final)
mod
summary(mod)
anova(mod)
a1 <- aov(mod) #post hoc test to see pairwise differences
TukeyHSD(a1)
#check the model assumptions
par(mfrow=c(2,2))
plot(modc)
acf(resid(modc))
final$treat21 <- factor(paste(final$treatment_2, final$treatment_1))
final$treat21
plot(resid(modc)~final$treatment_1)
#check the model assumptions
par(mfrow=c(2,2))
plot(mod)
acf(resid(mod))
final$treat21 <- factor(paste(final$treatment_2, final$treatment_1))
final$treat21
plot(resid(mod)~final$treatment_1)
hist(final$adults)
shapiro.test((final$adults))
shapiro.test(final$adults)
#bayesian inference using sim
# add predicted values (group means)
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
#bayesian inference using sim
# add predicted values (group means), we did not have predicted values
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
newdatc$fit <- predict(mod, newdata=newdatc)
nsim <- 2000
bsimc <- sim(mod, n.sim=nsim)
bsimc <- sim(mod, n.sim=nsim)
#bayesian inference using sim
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
newdatc$fit <- predict(mod, newdata=newdatc)
nsim <- 2000
bsimc <- sim(mod, n.sim=nsim)
str(bsimc)
bsimc <- sim(modc, n.sim=nsim)
bsimc <- sim(mod, n.sim=2000)
?sim
bsimc <- sim(mod, n.sims=nsim)
n.sim
nsim
bsimc <- sim(mod, n.sim=nsim)
bsimc <- sim(mod, nRep=nsim)
bsimc <- sim(2000,mod)
bsimc <- sim(2000, mod, n=nsim)
bsimc <- sim(mod, n=nsim)
bsimc <- sim(mod, n=nsim)
#bayesian inference using sim
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
newdatc$fit <- predict(mod, newdata=newdatc)
nsim <- 2000
bsimc <- sim(mod, n=nsim)
bsimc <- sim(mod, n.sim=nsim)
#bayesian inference using sim
modc <- mod
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final1$treatment_1)))
newdatc$fit <- predict(modc, newdata=newdatc)
nsim <- 2000
bsimc <- sim(modc, n.sim=nsim)
str(bsimc)
fitmat <- matrix(ncol=nsim, nrow=nrow(newdatc))
Xmat <- model.matrix(formula(modc)[c(1,3)], data=newdatc)
for(i in 1:nsim) fitmat[,i] <- Xmat%*%bsimc@coef[i,]
bsimc <- sim(nRep=2000, modc)
bsimc <- sim(modc)
bsimc <- sim(modc, times=2000)
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final1$treatment_1)))
newdatc$fit <- predict(modc, newdata=newdatc)
nsim <- 2000
bsimc <- sim(modc, n.sim=nsim)
bsimc <- sim(modc, n.sim=nsim)
summary(final1$treatment_1)
summary(final1$treatment_2)
#exclude failure queens
final1 <- subset(final1, id!= "C9C" &  id!= "H4C" & id!="H11V")
final1$treatment_1 <- as.factor(final1$treatment_1)
final1$treatment_1 <- factor(final1$treatment_1, levels = c("control", "low", "high"))
final1$treatment_2 <- as.factor(final1$treatment_2)
final1$workforce <- final1$pupae+final1$adults
final1$workforce
mean(final1$workforce)
boxplot(workforce ~ treatment_1, data=final1)
boxplot(adults ~ treatment_1, data=final1)
boxplot(workforce ~ treatment_1, data=final1)
boxplot(adults ~ treatment_1, data=final1)
modc <- lm(workforce ~ treatment_1, data=final1)
modc
summary(modc)
Anova(modc)
final1$treatment_1 <- relevel(final1$treatment_1, ref ="low")
modc <- lm(adults ~ treatment_1, data=final1)
summary(modc)
final1$treatment_1 <- relevel(final1$treatment_1, ref ="control")
#check the model assumptions
par(mfrow=c(2,2))
plot(modc)
acf(resid(modc))
final1$treat21 <- factor(paste(final1$treatment_2, final1$treatment_1))
final1$treat21
plot(resid(modc)~final1$treatment_1)
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final1$treatment_1)))
newdatc$fit <- predict(modc, newdata=newdatc)
nsim <- 2000
bsimc <- sim(modc, n.sim=nsim)
str(bsimc)
fitmat <- matrix(ncol=nsim, nrow=nrow(newdatc))
Xmat <- model.matrix(formula(modc)[c(1,3)], data=newdatc)
for(i in 1:nsim) fitmat[,i] <- Xmat%*%bsimc@coef[i,]
getwd()
setwd("G:/BIENEN/Personnel/Daniel_Schlaeppi/DS-Bees_new/R/")
library(lme4)
dat <- read.table("speed.txt", header = TRUE)
head(dat)
str(dat)
dat$treat1 <- as.factor(dat$treat1)
dat$treat1 <- factor(dat$treat1, levels = c("control", "low", "high"))
dat$treat2 <- as.factor(dat$treat2)
#transform time into Minutes only
install.packages("chron")
install.packages("chron")
library(chron)
dat$time2 <- times(dat$time)
dat$time_min <- 60 * hours(dat$time2) + minutes(dat$time2)
dat$time_min
plot(dat$inispeed ~ dat$date) #day might have an effect and will be included as random foactor
plot(dat$inispeed ~ dat$time_min)
plot(dat$inispeed ~ dat$date) #day might have an effect and will be included as random foactor
head(dat)
mod_time <- lm(dat$inispeed ~ dat$time_min)
dat$inispeed <- dat$ini_speed
plot(dat$inispeed ~ dat$date) #day might have an effect and will be included as random foactor
plot(dat$inispeed ~ dat$time_min)
mod_time <- lm(dat$inispeed ~ dat$time_min)
abline(mod_time)              # time of day does not really seem to be relevant
#### For initial speed ####
hist(dat$inispeed, breaks = 7)
par(mfrow=c(1,1))
boxplot(dat$inispeed ~ dat$treat1 + dat$treat2) # plot data with boxplots to have a first idea of the data
mod <- lmer(inispeed ~ treat1 + treat2 + treat1:treat2 + time_min + (1|colony) + (1|date), data=dat, REML=FALSE)
mod
summary(mod)
str(mod)
#check model assumptions
par(mfrow=c(2,2))
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
qqnorm(ranef(mod)$colony[,1]) # qq of random effects
qqline(ranef(mod)$colony[,1])
qqnorm(ranef(mod)$date[,1]) # The varince of date is so small that in the qq-plot it collapses to zero --> it is a bug and it can be assumed to be close to zero
qqline(ranef(mod)$date[,1])
boxplot(resid(mod)~dat$date)
#bayesian inference using sim
nsim <- 2000
bsim <- sim(mod, n.sim=nsim)
str(bsim)
apply(bsim@fixef, 2,quantile, prob=c(0.025,0.5,0.975))
#fitted values with 95% credible intervals
newdat<-expand.grid(
treat1=factor(c('control','low','high'), levels=levels(dat$treat1)),
treat2=factor(c('control','virus'),levels=levels(dat$treat2)))
newdat$time_min=mean(dat$time_min)
head(newdat)
Xmat <- model.matrix(~treat1 + treat2 + treat1:treat2 + time_min, data=newdat)      ####second part of model without of random factors
fitmat <- matrix(ncol=nsim, nrow=nrow(newdat))
for(i in 1:nsim) fitmat[,i] <- Xmat%*%bsim@fixef[i,]
newdat$lower <- apply(fitmat, 1, quantile, prob=0.025)
newdat$upper <- apply(fitmat, 1, quantile, prob=0.975)
newdat$fit <- Xmat%*%fixef(mod)
newdat
#create a super nice Graph:
library(extrafont)
fonts()
par(mfrow=c(1,1))
par(oma=c(1,0,0,0))
col <- c("darkolivegreen1", "darkorange3", "darkred")
boxplot(dat$inispeed ~ dat$treat1 + dat$treat2, border = "white",
main = "Initial speed", ylab = "initial movment speed [~cm/s]", xlab = "Treatment",
family = c("mono"), xaxt="n")
axis(1, at = c(1.2,2,2.8,4.2,5,5.8), labels=c("","no virus","","","virus",""))
stripchart(inispeed ~ treat1 + treat2, data = dat,
vertical = TRUE, at = c(1.2,2,2.8,4.2,5,5.8) ,method = "jitter",
pch = c(19,19,19,17,17,17), col = alpha(col, 0.8),
add = TRUE)
#plot posteriors
points(c(1.2,2,2.8,4.2,5,5.8), newdat$fit, pch = 19, cex=1.5)
segments(c(1.2,2,2.8,4.2,5,5.8), newdat$lower, c(1.2,2,2.8,4.2,5,5.8), newdat$upper, lwd = 3)
#add legends
legend(0.3, 13.4, c("control", "low", "high"), col = col, title = "neonicotinoid treatment", pch = c(19) , bty = "o", bg="transparent")
legend(0.7, 13.2, c("","",""), col = col, title = "", pch = c(17) , bty = "n", bg="transparent")
mtext("Real data of the initial speed plotted with the predicted mean and its 95% credible interval for each treatment", side = 1, outer = TRUE)
str(fitmat)
head(fitmat)
#bayesian inference using sim
nsim <- 2000
bsim <- sim(mod, n.sim=nsim)
bsim <- sim(nRep = 2000, model=mod)
load("dragons.RData")
# Load igraph
library(igraph)
# Load igraph
intall.packages("igraph")
# Load igraph
install.packages("igraph")
# Inspect the objects 'genders' and 'ages'
genders
library(igraph)
# Inspect the first few rows of the dataframe 'friends'
head(friends)
# Convert friends dataframe to a matrix
friends.mat <- as.matrix(friends)
setwd("G:/BIENEN/Personnel/Daniel_Schlaeppi/DS-Bees_new/R/Nest")
library(dplyr)
library(igraph)
mono <- read.table("monodomous_interactions.txt", header = TRUE)
poly <- read.table("polydomous_interactions.txt", header = TRUE)
# create new variable to determine interaction-duration as weight for the network analyses
mono$duration <- (mono$Stoptime-mono$Starttime)+0.25
poly$duration <- (poly$Stoptime-poly$Starttime)+0.25
# cut superlong interactions that might arise from ants resting close to each other to a max. of 120 seconds
mono$duration[mono$duration>120] <- 120
poly$duration[poly$duration>120] <- 120
mono[3:6] = NULL
poly[3:6] = NULL
# sum up the interaction durations for each pair of ants
mono_weighted <- mono %>%
group_by(Ant1, Ant2) %>%
summarise(duration = sum(duration))
poly_weighted <-poly %>%
group_by(Ant1, Ant2) %>%
summarise(duration = sum(duration))
# create graph opjects for the package i-graph
g1 <- graph_from_data_frame(d = mono_weighted, directed = FALSE)
g2 <- graph_from_data_frame(d = poly_weighted, directed = FALSE)
# Count number of edges
gsize(g1)
gsize(g2)
#plot the graphs to see how the networks look like and get some informations about them
V(g1)$vertex_degree <- degree(g1)
plot(g1,
vertex.label=NA,
edge.width=log10((E(g1)$duration)+1)*0.1,
edge.color = 'black',
vertex.size = log10((V(g1)$vertex_degree)+1),
layout = layout_with_fr(g1))
V(g2)$vertex_degree <- degree(g2)
plot(g2,
vertex.label.cex = 0.8,
edge.width=log10((E(g2)$duration)+1)*0.1,
edge.color = 'black',
vertex.size = log10((V(g2)$vertex_degree)+1),
layout = layout_with_fr(g1))
# Count number of vertices
gorder(g1)
gorder(g2)
# Density - proportion of realized connections among all possible connections
ed1 <- edge_density(g1)
ed2 <- edge_density(g2)
# Network efficiency - average connection efficiency of all pairs of nodes (inverse average shortest distance between nodes)
ef1 <- 1/mean_distance(g1)
ef2 <- 1/mean_distance(g2)
# Degree centrality - Average number of edges connecting a node to other network nodes normalized by dividing with the max. possible, i.e. (N-1) to account for network size
dc1 <- mean(centr_degree(g1)$`res`/(gorder(g1)-1))
dc2 <- mean(centr_degree(g2)$`res`/(gorder(g2)-1))
# Diameter - Maximum length of the shortest paths between all pairs of nodes
dia1 <- diameter(g1)
dia2 <- diameter(g2)
# Modularity
ebc1 <- edge.betweenness.community(g1, weights = E(g1)$duration)
sizes(ebc1)
mod1 <- modularity(g1,membership(ebc1))
ebc2 <- edge.betweenness.community(g2, weights = E(g2)$duration)
sizes(ebc2)
mod2 <- modularity(g2,membership(ebc2))
cc1 <- mean(transitivity(g1, type = "weighted", weights = E(g1)$duration))
cc2 <- mean(transitivity(g2, type = "weighted", weights = E(g2)$duration))
# Based on the direction of effects the variables are entered  in a new vector
# for enhancing effects as positive values and for decreasing effects as negative values
monodomous <- c(ed1, ef1, dc1, -(dia1), -(mod1), -(cc1))
polydomous <- c(ed2, ef2, dc2, -(dia2), -(mod2), -(cc2))
#remove any variable in the vectors if they are the same, as no effect of nest architecture on transmission dynamicson can be deduced
y <- monodomous != polydomous
output <- monodomous[y] > polydomous[y]
names <- c("Density", "Network efficiency", "Degree centrality", "Modularity", "Clustering coefficient")
z <- cbind(output, names)
z
cc1
cc2
mod1
mod2
# Modularity
ebc1 <- edge.betweenness.community(g1)
sizes(ebc1)
mod1 <- modularity(g1,membership(ebc1))
ebc2 <- edge.betweenness.community(g2)
sizes(ebc2)
mod2 <- modularity(g2,membership(ebc2))
mod1
mod2
# Modularity
ebc1 <- edge.betweenness.community(g1, weights = E(g1)$duration)
sizes(ebc1)
mod1 <- modularity(g1,membership(ebc1))
ebc2 <- edge.betweenness.community(g2, weights = E(g2)$duration)
sizes(ebc2)
mod2 <- modularity(g2,membership(ebc2))
mod1
mod2
