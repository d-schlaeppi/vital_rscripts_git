suppressPackageStartupMessages(library(lsmeans)) #cld
suppressPackageStartupMessages(library(multcomp)) #cld 2
suppressPackageStartupMessages(library(glmmTMB))
suppressPackageStartupMessages(library(multcompView)) #for the CLD functions
suppressPackageStartupMessages(library(lmtest)) #bptest(model) -  heteroscedasticity
suppressPackageStartupMessages(library(survminer)) #contains ggsurvplot()
suppressPackageStartupMessages(library(ARTool)) #The Aligned Rank Transform for nonparametric factorial analyses using only ANOVA procedures
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(effsize)
#### prerequisites ####
# setwd("G:/BIENEN/Personnel/Daniel_Schlaeppi/DS-Bees_new/R/ANV") #office computer
setwd("/Users/gismo/Desktop/R/ANV") # homeoffice mac
dat <- read.table("ANV_all_Data.txt", header = TRUE)
mov <- read.table("speed.txt", header = TRUE)
# preparation of Dataframe --> dat
head(dat)
str(dat)
dat_r <- subset(dat, treatment_1 != "low") #remove low because it does not really add valuable information to the study
dat_r$treatment_1 <- droplevels(dat_r)$treatment_1
dat_r$treatment <- droplevels(dat_r)$treatment
dat_r$identity <- droplevels(dat_r)$identity
dat_r$treatment <- as.factor(dat_r$treatment)
dat_r$treatment <- revalue(dat_r$treatment, c("1"="Control", "2"="Virus","5" = "Neonic","6" = "Interaction"))
dat_r$tr <- dat_r$treatment
dat_r$tr <- relevel(dat_r$tr, "Neonic")
dat_r$tr <- relevel(dat_r$tr, "Control")
table(dat_r$tr)
#dat_r$treatment <- revalue(dat_r$treatment, c("control-control"="Control", "control-virus"="Virus","high-control" = "Neonicotinoid","high-virus" = "Mixed" ))
dat_r$treatment_1 <- revalue(dat_r$treatment_1, c("control" = "Control", "high" = "Neonicotinoid"))
dat_r$treatment_2 <- revalue(dat_r$treatment_2, c("control" = "Control", "virus" = "Virus"))
table(dat_r$treatment)
table(dat_r$treatment_2)
table(dat_r$treatment_1)
tapply(dat_r$day_of_death[dat_r$y2_survival_status==1], dat_r$treatment[dat_r$y2_survival_status==1], mean)
plot(dat_r$day_of_death ~ dat_r$treatment)
plot(survfit(Surv(dat_r$day_of_death, dat_r$y2_survival_status)~1)) #plots first basic plot with 95 confidence intervalls for all the data
fit=survfit(Surv(dat_r$day_of_death, dat_r$y2_survival_status)~dat_r$treatment)
plot(fit)
summary(fit)
ggsurvplot(fit, data = dat_r, pval = TRUE,
xlab = "Time in days",
ylim = c(0.5,1),
legend.labs = c("Control", "Mixed", "Neonic", "Virus"),
ggtheme = theme_bw())
#calculate potential statistical difference between the groups
mod <- survdiff(Surv(day_of_death, y2_survival_status) ~ treatment, data=dat_r)
mod # no statistical difference between the four groups.
require(dplyr)
group_by(dat_r, treatment_1, treatment_2) %>%
summarise(
count = n(),
count_survivers = sum(y2_survival_status == 0),
count_death = sum(y2_survival_status == 1)
)
dat_r$adult_production <- as.factor(dat_r$adult_production)
plot(dat_r$adult_production ~ dat_r$treatment)
chisq.test(dat_r$adult_production, dat_r$treatment_1)
#calculate potential statistical difference between the groups
mod <- survdiff(Surv(day_of_death, y2_survival_status) ~ treatment, data=dat_r)
mod # no statistical difference between the four groups.
require(dplyr)
group_by(dat_r, treatment_1, treatment_2) %>%
summarise(
count = n(),
count_survivers = sum(y2_survival_status == 0),
count_death = sum(y2_survival_status == 1)
)
dat_r$adult_production <- as.factor(dat_r$adult_production)
plot(dat_r$adult_production ~ dat_r$treatment)
chisq.test(dat_r$adult_production, dat_r$treatment_1)
#generalised logistic mixed model!!!!!!!!!!! (ev ordinal family, Bernulli ja / nein 1/0
mod <- glm(dat_r$adult_production ~ dat_r$treatment_1*dat_r$treatment_2, family = binomial)
summary(mod)
Anova(mod)
# test model assumtions
par(mfrow=c(2,2))
leveneTest(residuals(mod) ~ dat_r$treatment_1*dat_r$treatment_2) #non-significant = ok #homogenity of variance (plot(mod,1))
aov_residuals <- residuals(object = mod)
shapiro.test(x = aov_residuals) #does not need to be fulfilled in a binomial glm
bptest(mod) #non significant --> assumtions of heteroskedasticity not violated ok
### workers ###
boxplot(dat_r$weight_adults ~ dat_r$treatment)
#stat summary:
require(dplyr)
group_by(dat_r, tr) %>%
summarise(
count = n(),
N_W = sum(!is.na(weight_adults)),
mean = mean(weight_adults, na.rm = TRUE),
sd = sd(weight_adults, na.rm = TRUE),
shapiro = shapiro.test(dat_r$weight_adults)$p,
levene = leveneTest(dat_r$weight_adults, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(weight_adults, probs = (0), na.rm = TRUE),
q_25 = quantile(weight_adults, probs = (0.25), na.rm = TRUE),
q_50 = quantile(weight_adults, probs = (0.5), na.rm = TRUE),
q_75 = quantile(weight_adults, probs = (0.75), na.rm = TRUE),
q_100 = quantile(weight_adults, probs = (1), na.rm = TRUE),
)
#model
mod <- lm(weight_adults ~ treatment_1*treatment_2, data = dat_r) # is equal to the interaction model.
summary(mod)
Anova(mod)
baseline <- lm(weight_adults ~ 1, data = dat_r)
neonic_M <- update(baseline, .~. + treatment_1)
virus_M <- update(neonic_M, .~. + treatment_2)
interaction_M <- update(virus_M, .~. + treatment_1:treatment_2)
anova(baseline, neonic_M, virus_M, interaction_M)
Anova(mod)
#pairwise differences
lsmeans(mod, pairwise ~ treatment_1*treatment_2, data = dat_r, adjust = "tukey")
TukeyHSD(aov(mod))
marginal = lsmeans(mod, ~ treatment_1*treatment_2, data = dat_r)
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="tukey")
CLD
# test model assumtions
compareqqnorm(mod)
par(mfrow=c(2,2))
leveneTest(mod) #non-significant = ok #homogenity of variance (plot(mod,1))
aov_residuals <- residuals(object = mod)
shapiro.test(x = aov_residuals) #non significant --> assumption of normally distributed residuals is ok ##plot(mod, 2)#normality
bptest(mod) #non significant --> assumtions of heteroskedasticity not violated ok
plot(mod)
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
par(mfrow=c(1,1))
#Effect size
control_neonic <- subset(dat_r, dat_r$treatment == "Control" | dat_r$treatment == "Neonic")
control_virus <- subset(dat_r, dat_r$treatment == "Control" | dat_r$treatment == "Virus")
control_combined <- subset(dat_r, dat_r$treatment == "Control" | dat_r$treatment == "Interaction")
neonic_virus <- subset(dat_r, dat_r$treatment == "Neonic" | dat_r$treatment == "Virus")
neonic_combined <- subset(dat_r, dat_r$treatment == "Neonic" | dat_r$treatment == "Interaction")
virus_combined <- subset(dat_r, dat_r$treatment == "Virus" | dat_r$treatment == "Interaction")
control_neonic$treatment <- droplevels(control_neonic)$treatment
control_virus$treatment <- droplevels(control_virus)$treatment
control_combined$treatment <- droplevels(control_combined)$treatment
neonic_virus$treatment <- droplevels(neonic_virus)$treatment
neonic_combined$treatment <- droplevels(neonic_combined)$treatment
virus_combined$treatment <- droplevels(virus_combined)$treatment
cohen.d(control_neonic$weight_adults, control_neonic$treatment, na.rm = TRUE)
cohen.d(control_virus$weight_adults, control_virus$treatment, na.rm = TRUE)
cohen.d(control_combined$weight_adults, control_combined$treatment, na.rm = TRUE)
cohen.d(neonic_virus$weight_adults, neonic_virus$treatment, na.rm = TRUE)
cohen.d(neonic_combined$weight_adults, neonic_combined$treatment, na.rm = TRUE)
cohen.d(virus_combined$weight_adults, virus_combined$treatment, na.rm = TRUE)
### queens ###
boxplot(dat_r$weight_queens ~ dat_r$treatment)
#stat summary:
require(dplyr)
group_by(dat_r, tr) %>%
summarise(
count = n(),
N_W = sum(!is.na(weight_queens)),
mean = mean(weight_queens, na.rm = TRUE),
sign = "Â±",
sd = sd(weight_queens, na.rm = TRUE),
shapiro = shapiro.test(dat_r$weight_queens)$p,
levene = leveneTest(dat_r$weight_queens, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(weight_queens, probs = (0), na.rm = TRUE),
q_25 = quantile(weight_queens, probs = (0.25), na.rm = TRUE),
q_50 = quantile(weight_queens, probs = (0.5), na.rm = TRUE),
q_75 = quantile(weight_queens, probs = (0.75), na.rm = TRUE),
q_100 = quantile(weight_queens, probs = (1), na.rm = TRUE),
) %>% as.data.frame()
#model
mod <- lm(weight_queens ~ treatment_1*treatment_2, data = dat_r)
summary(mod)
Anova(mod)
baseline <- lm(weight_queens ~ 1, data = dat_r)
neonic_M <- update(baseline, .~. + treatment_1)
virus_M <- update(neonic_M, .~. + treatment_2)
interaction_M <- update(virus_M, .~. + treatment_1:treatment_2)
anova(baseline, neonic_M, virus_M, interaction_M)
#pairwise differences
lsmeans(mod, pairwise ~ treatment_1*treatment_2, data = dat_r, adjust = "tukey")
marginal = lsmeans(mod, ~ treatment_1*treatment_2, data = dat_r)
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="tukey")
CLD
# test model assumtions
leveneTest(mod) #non-significant = ok #homogenity of variance (plot(mod,1))
aov_residuals <- residuals(object = mod)
shapiro.test(x = aov_residuals) #non significant --> assumption of normally distributed residuals is ok ##plot(mod, 2)#normality
bptest(mod) #non significant --> assumtions of heteroskedasticity not violated ok
par(mfrow=c(2,2))
plot(mod)
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
compareqqnorm(mod)
par(mfrow=c(1,1))
#overview
dat_r$y1_brood <- dat_r$y1_eggs + dat_r$y1_larva + dat_r$y1_pupae
boxplot(dat_r$y1_adults ~ dat_r$treatment_1)
boxplot(dat_r$y1_brood ~ dat_r$treatment_1)
boxplot(dat_r$y1_eggs ~ dat_r$treatment_1)
boxplot(dat_r$y1_larva ~ dat_r$treatment_1)
boxplot(dat_r$y1_pupae ~ dat_r$treatment_1)
### adults ###
# summary
require(dplyr)
group_by(dat_r, treatment_1) %>%
summarise(
count = n(),
surviving = sum(y1_survival_status == 0),
dead = sum(y1_survival_status == 1),
mean = mean(y1_adults, na.rm = TRUE),
sd = sd(y1_adults, na.rm = TRUE),
shapiro = shapiro.test(dat_r$y1_adults)$p,
levene = leveneTest(dat_r$y1_adults, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(y1_adults, probs = (0), na.rm = TRUE),
q_25 = quantile(y1_adults, probs = (0.25), na.rm = TRUE),
q_50 = quantile(y1_adults, probs = (0.5), na.rm = TRUE),
q_75 = quantile(y1_adults, probs = (0.75), na.rm = TRUE),
q_100 = quantile(y1_adults, probs = (1), na.rm = TRUE),
) %>% as.data.frame()
#data not normally distributed resp modelassumptions are violated with linear models --> non parametric test
kruskal.test(dat$y1_adults ~ dat$treatment_1, na.action = na.omit)
### brood ###
require(dplyr)
group_by(dat_r, treatment_1) %>%
summarise(
count = n(),
surviving = sum(y1_survival_status == 0),
dead = sum(y1_survival_status == 1),
mean = mean(y1_brood, na.rm = TRUE),
sd = sd(y1_brood, na.rm = TRUE),
shapiro = shapiro.test(dat_r$y1_brood)$p,
levene = leveneTest(dat_r$y1_brood, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(y1_brood, probs = (0), na.rm = TRUE),
q_25 = quantile(y1_brood, probs = (0.25), na.rm = TRUE),
q_50 = quantile(y1_brood, probs = (0.5), na.rm = TRUE),
q_75 = quantile(y1_brood, probs = (0.75), na.rm = TRUE),
q_100 = quantile(y1_brood, probs = (1), na.rm = TRUE),
) %>% as.data.frame()
kruskal.test(dat_r$y1_brood ~ dat_r$treatment_1, na.action = na.omit)
#### Colony after year II - adults and brood ####
#overview
dat_r$y2_brood <- dat_r$y2_eggs + dat_r$y2_larva + dat_r$y2_pupae
boxplot(dat_r$y2_adults ~ dat_r$treatment)
boxplot(dat_r$y2_brood ~ dat_r$treatment)
### adults y2 ###
# summary
require(dplyr)
group_by(dat_r, tr) %>%
summarise(
count = n(),
surviving = sum(y2_survival_status == 0),
dead = sum(y2_survival_status == 1),
mean____ = mean(y2_adults, na.rm = TRUE),
sd = sd(y2_adults, na.rm = TRUE),
shapiro = shapiro.test(dat_r$y2_adults)$p,
levene = leveneTest(dat_r$y2_adults, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(y2_adults, probs = (0), na.rm = TRUE),
q_25 = quantile(y2_adults, probs = (0.25), na.rm = TRUE),
q_50 = quantile(y2_adults, probs = (0.5), na.rm = TRUE),
q_75 = quantile(y2_adults, probs = (0.75), na.rm = TRUE),
q_100 = quantile(y2_adults, probs = (1), na.rm = TRUE),
) %>% as.data.frame()
#model
boxplot(dat_r$y2_adults ~ dat_r$treatment)
mod <- lm(y2_adults ~ treatment_1*treatment_2, data = dat_r)
summary(mod)
baseline <- lm(y2_adults ~ 1, data = dat_r)
neonic_M <- update(baseline, .~. + treatment_1)
virus_M <- update(neonic_M, .~. + treatment_2)
interaction_M <- update(virus_M, .~. + treatment_1:treatment_2)
anova(baseline, neonic_M, virus_M, interaction_M)
Anova(mod)
coefficients(mod)
#check model assumptions
compareqqnorm(mod)
par(mfrow=c(2,2))
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
plot(mod)
par(mfrow=c(1,1))
#homogenity of variance # plot(mod, 1)
leveneTest(mod) #non-significant = ok
#normality  # plot(mod, 2)
aov_residuals <- residuals(object = mod)
shapiro.test(x = aov_residuals) # non significant --> ok
#heteroskedastity
bptest(mod) #non significant --> ok
#pairwise comparison
lsmeans(mod, pairwise ~ treatment_1:treatment_2, adjust = "tukey") #or TukeyHSD(aov(mod))
marginal = lsmeans(mod, ~ treatment_1:treatment_2, data = dat_r)
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="tukey")
CLD
non_NA <- subset(dat_r, dat_r$y2_adults != "NA")
non_NA$y2_adults
#Pairwise Cohens D
cohen.d(control_neonic$y2_adults, control_neonic$treatment, na.rm = TRUE)
cohen.d(control_virus$y2_adults, control_virus$treatment, na.rm = TRUE)
cohen.d(control_combined$y2_adults, control_combined$treatment, na.rm = TRUE)
cohen.d(neonic_virus$y2_adults, neonic_virus$treatment, na.rm = TRUE)
cohen.d(neonic_combined$y2_adults, neonic_combined$treatment, na.rm = TRUE)
cohen.d(virus_combined$y2_adults, virus_combined$treatment, na.rm = TRUE)
### brood ###
require(dplyr)
group_by(dat_r, tr) %>%
summarise(
count = n(),
surviving = sum(y2_survival_status == 0),
dead = sum(y2_survival_status == 1),
mean = mean(y2_brood, na.rm = TRUE),
sd = sd(y2_brood, na.rm = TRUE),
shapiro = shapiro.test(dat_r$y2_brood)$p,
levene = leveneTest(dat_r$y2_brood, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(y2_brood, probs = (0), na.rm = TRUE),
q_25 = quantile(y2_brood, probs = (0.25), na.rm = TRUE),
q_50 = quantile(y2_brood, probs = (0.5), na.rm = TRUE),
q_75 = quantile(y2_brood, probs = (0.75), na.rm = TRUE),
q_100 = quantile(y2_brood, probs = (1), na.rm = TRUE),
) %>% as.data.frame()
boxplot(dat_r$y2_brood ~ dat_r$treatment)
dat_r$y2_brood
mod1 <- lm(dat_r$y2_brood ~ treatment_1*treatment_2, data = dat_r)
summary(mod1)
Anova(mod1)
mod1$coefficients
#homogenity of variance # plot(mod, 1)
leveneTest(mod1) #significant = bad
#normality  # plot(mod, 2)
aov_residuals <- residuals(object = mod1)
shapiro.test(x = aov_residuals) # non significant = ok
#heteroskedastity
bptest(mod1) #significant --> bad
#ART MODEL
dat_noNA <- subset(dat_r, dat_r$y2_brood != "NA") #model can not process NA's!
m = art(y2_brood ~ treatment_1 * treatment_2, data=dat_noNA) # uses a linear mixed model
anova(m)
names(m)
uncorrected_pairwise_p_values <- c(
c_v = wilcox.test(dat_r[dat_r$treatment == "Control",]$y2_brood,   dat_r[dat_r$treatment == "Virus",]$y2_brood)$p.value,
c_n = wilcox.test(dat_r[dat_r$treatment == "Control",]$y2_brood,   dat_r[dat_r$treatment == "Neonic",]$y2_brood)$p.value,
c_m = wilcox.test(dat_r[dat_r$treatment == "Control",]$y2_brood,   dat_r[dat_r$treatment == "Interaction",]$y2_brood)$p.value,
v_n = wilcox.test(dat_r[dat_r$treatment == "Virus",]$y2_brood,     dat_r[dat_r$treatment == "Neonic",]$y2_brood)$p.value,
v_m = wilcox.test(dat_r[dat_r$treatment == "Virus",]$y2_brood,     dat_r[dat_r$treatment == "Interaction",]$y2_brood)$p.value,
n_m = wilcox.test(dat_r[dat_r$treatment == "Neonic",]$y2_brood,   dat_r[dat_r$treatment == "Interaction",]$y2_brood)$p.value
)
uncorrected_pairwise_p_values
# correct for multiple comparisons using Holm's sequential Bonferroni procedure (method="holm") or the bonferroni correction (Holm 1979)
p.adjust(uncorrected_pairwise_p_values, method="bonferroni")
#Pairwise Cohens D
#Effect size
control_neonic <- subset(dat_r, dat_r$treatment == "Control" | dat_r$treatment == "Neonic")
control_virus <- subset(dat_r, dat_r$treatment == "Control" | dat_r$treatment == "Virus")
control_combined <- subset(dat_r, dat_r$treatment == "Control" | dat_r$treatment == "Interaction")
neonic_virus <- subset(dat_r, dat_r$treatment == "Neonic" | dat_r$treatment == "Virus")
neonic_combined <- subset(dat_r, dat_r$treatment == "Neonic" | dat_r$treatment == "Interaction")
virus_combined <- subset(dat_r, dat_r$treatment == "Virus" | dat_r$treatment == "Interaction")
control_neonic$treatment <- droplevels(control_neonic)$treatment
control_virus$treatment <- droplevels(control_virus)$treatment
control_combined$treatment <- droplevels(control_combined)$treatment
neonic_virus$treatment <- droplevels(neonic_virus)$treatment
neonic_combined$treatment <- droplevels(neonic_combined)$treatment
virus_combined$treatment <- droplevels(virus_combined)$treatment
cohen.d(control_neonic$y2_brood, control_neonic$treatment, na.rm = TRUE)
cohen.d(control_virus$y2_brood, control_virus$treatment, na.rm = TRUE)
cohen.d(control_combined$y2_brood, control_combined$treatment, na.rm = TRUE)
cohen.d(neonic_virus$y2_brood, neonic_virus$treatment, na.rm = TRUE)
cohen.d(neonic_combined$y2_brood, neonic_combined$treatment, na.rm = TRUE)
cohen.d(virus_combined$y2_brood, virus_combined$treatment, na.rm = TRUE)
#### create dataframe to compare the castes using models ####
dat_r$tw <- dat_r$tw_thiamethoxam_workers_dryconcentration
dat_r$cw <- dat_r$cw_clothianidin_workers_dryconcentration
dat_r$tq <- dat_r$tq_thiamethoxam_queens_dryconcentration
dat_r$cq <- dat_r$cq_clothianidin_queens_dryconcentration
#create virus titer per mg bodyweight to compare them between castes and species.
dat_r$log10_viral_copies_per_mg_workers <- log10(dat_r$virus_copies_per_worker/(dat_r$weight_adults/20))
dat_r$log10_viral_copies_per_mg_queens <- log10(dat_r$virus_copies_per_queen/dat_r$weight_queens)
dat_r$infection_status_queens <- revalue(dat_r$pos_neg_queens, c("neg" = 0, "pos" = 1))
dat_r$infection_status_workers <- revalue(dat_r$pos_neg_workers, c("neg" = 0, "pos" = 1))
#virus titer dead individuals of colony H9V
copies_per_individual <- 1.34E+07
copies_per_mg <- copies_per_individual/(mean(dat_r$weight_adults, na.rm = TRUE)/20)
1.4212794*10^7
plot(as.factor(dat_r$infection_status_queens)~dat_r$treatment)
plot(as.factor(dat_r$infection_status_workers)~dat_r$treatment)
data <- data.frame(sample =c(1:40, 1:40),
identity = rep(dat_r$identity, times = 2),
treatment = rep(dat_r$treatment, times = 2),
treatment_1 = rep(dat_r$treatment_1, times = 2),
treatment_2 = rep(dat_r$treatment_2, times = 2),
caste = c(rep("w", times = length(dat_r$identity)), rep("q", times = length(dat_r$identity))),
thiamethoxam = c(dat_r$tw, dat_r$tq),
clothianidin = c(dat_r$cw, dat_r$cq),
virus_titre = c(dat_r$log10_viral_copies_per_mg_workers, dat_r$log10_viral_copies_per_mg_queens)
)
head(data)
# Virus detection treshold
vdt_workers_uncorrected <- 3.03E+02
vdt_queens_uncorrected <- 1.48E+04
vdt_workers <- log10(vdt_workers_uncorrected/(mean(dat_r$weight_adults, na.rm = TRUE)/20))
vdt_queens <- log10(vdt_queens_uncorrected/mean(dat_r$weight_queens, na.rm = TRUE))
# Virus detection treshold new (derived form the max instead of the average of the negative samples)
vdt_workers_uncorrected_new <- 1.00E+03
vdt_queens_uncorrected_new <- 4.07E+04
vdt_workers_new <- log10(vdt_workers_uncorrected_new/(mean(dat_r$weight_adults, na.rm = TRUE)/20))
vdt_queens_new <- log10(vdt_queens_uncorrected_new/mean(dat_r$weight_queens, na.rm = TRUE))
virus_load_dead_workers <- log10(1.34E+07/(mean(dat_r$weight_adults, na.rm = TRUE)/20))
max(dat_r$log10_viral_copies_per_mg_queens, na.rm = TRUE)
max(dat_r$log10_viral_copies_per_mg_workers, na.rm = TRUE)
max(dat_r$log10_viral_copies_per_mg_workers, na.rm = TRUE)
10^virus_load_dead_workers/10^max(dat_r$log10_viral_copies_per_mg_workers, na.rm = TRUE)
# look at data
#queens
group_by(dat_r, tr) %>%
summarise(
count = n(),
N_Q = sum(!is.na(log10_viral_copies_per_mg_queens)),
positive_q = sum(!is.na(log10_viral_copies_per_mg_queens)) - sum(pos_neg_queens=="neg", na.rm = TRUE),
negative_q = sum(pos_neg_queens=="neg", na.rm = TRUE),
mean_titer_q = mean(log10_viral_copies_per_mg_queens, na.rm = TRUE),
sd_titer_q = sd(log10_viral_copies_per_mg_queens, na.rm = TRUE),
shapiro = shapiro.test(dat_r$log10_viral_copies_per_mg_queens)$p,
levene = leveneTest(dat_r$log10_viral_copies_per_mg_queens, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(log10_viral_copies_per_mg_queens, probs = (0), na.rm = TRUE),
q_25 = quantile(log10_viral_copies_per_mg_queens, probs = (0.25), na.rm = TRUE),
q_50 = quantile(log10_viral_copies_per_mg_queens, probs = (0.5), na.rm = TRUE),
q_75 = quantile(log10_viral_copies_per_mg_queens, probs = (0.75), na.rm = TRUE),
q_100 = quantile(log10_viral_copies_per_mg_queens, probs = (1), na.rm = TRUE),
)
#only positive values for summary stats ?
virus_q_pos <- subset(dat_r, dat_r$pos_neg_queens == "pos")
group_by(virus_q_pos, tr) %>%
summarise(
count = n(),
N_Q = sum(!is.na(log10_viral_copies_per_mg_queens)),
positive_q = sum(!is.na(log10_viral_copies_per_mg_queens)) - sum(pos_neg_queens=="neg", na.rm = TRUE),
negative_q = sum(pos_neg_queens=="neg", na.rm = TRUE),
mean_titer_q = mean(log10_viral_copies_per_mg_queens, na.rm = TRUE),
sd_titer_q = sd(log10_viral_copies_per_mg_queens, na.rm = TRUE),
q_0 = quantile(log10_viral_copies_per_mg_queens, probs = (0), na.rm = TRUE),
q_25 = quantile(log10_viral_copies_per_mg_queens, probs = (0.25), na.rm = TRUE),
q_50 = quantile(log10_viral_copies_per_mg_queens, probs = (0.5), na.rm = TRUE),
q_75 = quantile(log10_viral_copies_per_mg_queens, probs = (0.75), na.rm = TRUE),
q_100 = quantile(log10_viral_copies_per_mg_queens, probs = (1), na.rm = TRUE),
)
#workers
group_by(dat_r, tr) %>%
summarise(
count = n(),
N_Q = sum(!is.na(log10_viral_copies_per_mg_workers)),
positive_w = sum(!is.na(log10_viral_copies_per_mg_workers)) - sum(pos_neg_workers=="neg", na.rm = TRUE),
negative_w = sum(pos_neg_workers=="neg", na.rm = TRUE),
mean_titer_w = mean(log10_viral_copies_per_mg_workers, na.rm = TRUE),
sd_titer_w = sd(log10_viral_copies_per_mg_workers, na.rm = TRUE),
shapiro = shapiro.test(dat_r$log10_viral_copies_per_mg_workers)$p,
levene = leveneTest(dat_r$log10_viral_copies_per_mg_workers, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(log10_viral_copies_per_mg_workers, probs = (0), na.rm = TRUE),
q_25 = quantile(log10_viral_copies_per_mg_workers, probs = (0.25), na.rm = TRUE),
q_50 = quantile(log10_viral_copies_per_mg_workers, probs = (0.5), na.rm = TRUE),
q_75 = quantile(log10_viral_copies_per_mg_workers, probs = (0.75), na.rm = TRUE),
q_100 = quantile(log10_viral_copies_per_mg_workers, probs = (1), na.rm = TRUE),
)
plot(dat_r$log10_viral_copies_per_mg_queens, dat_r$log10_viral_copies_per_mg_workers)
boxplot(dat_r$log10_viral_copies_per_mg_queens ~ dat_r$treatment)
boxplot(dat_r$log10_viral_copies_per_mg_workers ~ dat_r$treatment)
plot(dat_r$pos_neg_queens ~ dat_r$treatment)
plot(dat_r$pos_neg_workers ~ dat_r$treatment)
### positive queens or workers ###
mod <- glm(infection_status_queens ~ treatment_1*treatment_2, data=dat_r, family="binomial")
Anova(mod)
mod <- glm(infection_status_workers ~ treatment_1*treatment_2, data=dat_r, family="binomial")
Anova(mod)
#Analyse castes separately
queens <- subset(data, caste == "q")
workers <- subset(data, caste == "w")
### workers ###
boxplot(log10(workers$virus_titre) ~ workers$treatment)
boxplot(workers$virus_titre ~ workers$treatment)
abline(vdt_workers, 0, lty = 2)
abline(vdt_workers_new, 0, lty = 2)
mod <- lm(log10(virus_titre) ~ treatment_1*treatment_2, data = workers)
baseline <- lm(log10(virus_titre) ~ 1, data = workers)
treatment_1_M <- update(baseline, .~. + treatment_1)
treatment_2_M <- update(treatment_1_M, .~. + treatment_2)
interaction_M <- update(treatment_2_M, .~. + treatment_1:treatment_2 )
anova(baseline, treatment_1_M, treatment_2_M, interaction_M)
Anova(mod)
mod <- interaction_M
#pairwise comparison
lsmeans(mod, pairwise ~ treatment_1:treatment_2, adjust = "tukey") #or TukeyHSD(aov(mod))
marginal = lsmeans(mod, ~ treatment_1:treatment_2, data = dat_r)
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="tukey")
CLD
Anova(mod)
anova(baseline, treatment_1_M, treatment_2_M, interaction_M)
mod <- glm(infection_status_workers ~ treatment_1*treatment_2, data=dat_r, family="binomial")
Anova(mod)
