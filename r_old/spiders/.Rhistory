horiz = TRUE)
par(mfrow=c(2,2))
par(mar = c(5.1, 7.1, 4.1, 2.1))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV_minus,
main = "DWV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 2.6, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV_minus,
main = "ABPV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV_minus,
main = "DWV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 2.6, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV_minus,
main = "ABPV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
par(mfrow=c(1,1))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
par(mar = c(5.1, 7.3, 4.1, 2.1))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV_minus,
main = "DWV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=2)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV,
main = "DWV",
xlab = "% of samples tested positive for DWV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_DWV_minus,
main = "DWV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 2.6, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(5, 1, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(1, 0, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(1, 0.2, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(1, 0.3, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(1, 0.3, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV_minus,
main = "ABPV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
?rsequ
#### load libraries ####
suppressPackageStartupMessages(library(survival))# contains kalan meier plot function
suppressPackageStartupMessages(library(plyr)) #contains revalue
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(chron))
suppressPackageStartupMessages(library(car))#contains levene's test
suppressPackageStartupMessages(library(dunn.test)) #contains the dunn test
suppressPackageStartupMessages(library(nlme)) #lme
suppressPackageStartupMessages(library(emmeans)) #lsmeans to compare pairwise differences after the modeling using bonferroni corrections
suppressPackageStartupMessages(library(blmeco)) #contains compareqqnorm  (multiple qq boxplots)
suppressPackageStartupMessages(library(lme4)) #lmer
suppressPackageStartupMessages(library(lsmeans)) #cld
suppressPackageStartupMessages(library(multcomp)) #cld 2
suppressPackageStartupMessages(library(glmmTMB))
suppressPackageStartupMessages(library(multcompView)) #for the CLD functions
suppressPackageStartupMessages(library(lmtest)) #bptest(model) -  heteroscedasticity
suppressPackageStartupMessages(library(survminer)) #contains ggsurvplot()
suppressPackageStartupMessages(library(ARTool)) #The Aligned Rank Transform for nonparametric factorial analyses using only ANOVA procedures
### campell2x2 optimized chi test chi-test ###
# compare to https://measuringu.com/what-test/   &   https://measuringu.com/ab-cal/
campbell2x2.test <- function(t) {
min_exp_val <- min(colSums(t))*min(rowSums(t))/sum(t)
if (min_exp_val < 1) {
# in Campbell's naming: Fisher–Irwin test by Irwin’s rule
result <- fisher.test(t, alternative = "two.sided")
result$method <- paste("Optimal 2x2 test according to Campbell(2007) recommendation\n\n",
paste("Minimal expected cell count: ", round(min_exp_val, 3), "\n\n", sep = ""),
paste("Performing", result$method)
)
return(result)
} else {
#  'N − 1' Pearson's Chi-squared test
n1chisq.test <- function(t) {
chisqtst <- chisq.test(t, correct = FALSE)
N <- sum(chisqtst$observed)
chisqtst$statistic = ((N-1)/N) * chisqtst$statistic
chisqtst$p.value <- 1 - pchisq(chisqtst$statistic, chisqtst$parameter)
chisqtst$method <- paste("'N-1'", chisqtst$method)
return(chisqtst)
}
result <- n1chisq.test(t)
result$method <- paste("Optimal 2x2 test according to Campbell(2007) recommendation\n\n",
paste("Minimal expected cell count: ", round(min_exp_val, 3), "\n\n", sep = ""),
paste("Performing", result$method)
)
return(result)
}
}
n1chisq.test <- function(t) {
chisqtst <- chisq.test(t, correct = FALSE)
N <- sum(chisqtst$observed)
chisqtst$statistic = ((N-1)/N) * chisqtst$statistic
chisqtst$p.value <- 1 - pchisq(chisqtst$statistic, chisqtst$parameter)
chisqtst$method <- paste("'N-1'", chisqtst$method)
return(chisqtst)
}
#### prerequisites ####
# setwd("G:/BIENEN/Personnel/Daniel_Schlaeppi/DS-Bees_new/R/ANV") #office computer
setwd("/Users/gismo/Desktop/R/spiders") # homeoffice mac
dat <- read.table("viruses_in_spiders.txt", header = TRUE)
head(dat)
str(dat)
dat$treatment <- revalue(dat$treatment, c("control"="Control", "virus"="Virus"))
table(dat$treatment)
levels(dat$sample_id)
table(dat$sample_id)
# Virus detection treshold
vdt_ABPV <- log10(7.45E+03) # corresponds to the treshold for 1 body part, but it needs to be doubled to stand for the full body? check later in ghraphs!
vdt_ABPV_full <- log10(2*7.45E+03) #
vdt_DWV <- log10(2.40E+04)
vdt_DWV_full <- log10(2*2.40E+04)
# preparation of titres used in analyses: substract detection treshold and apply 0 to negative samples
dat$P_ABPV_titer_cor <- dat$P_ABPV_titer - 7.45E+03
dat$O_ABPV_titer_cor <- dat$O_ABPV_titer - 7.45E+03
dat$P_DWV_titer_cor <- dat$P_DWV_titer - 2.40E+04
dat$O_DWV_titer_cor <- dat$O_DWV_titer - 2.40E+04
dat$P_ABPV_titer_cor[dat$P_ABPV_PN == "neg"] <- 0
dat$O_ABPV_titer_cor[dat$O_ABPV_PN == "neg"] <- 0
dat$P_DWV_titer_cor[dat$P_DWV_PN == "neg"] <- 0
dat$O_DWV_titer_cor[dat$O_DWV_PN == "neg"] <- 0
#logtransform plus 1 to avoid log10(0) = -inf
dat$ABPV_pro <- log10(dat$P_ABPV_titer_cor +1)
dat$ABPV_opi <- log10(dat$O_ABPV_titer_cor +1)
dat$DWV_pro <- log10(dat$P_DWV_titer_cor +1)
dat$DWV_opi <- log10(dat$O_DWV_titer_cor +1)
# titres of the samples when combining the pro- and opisthosoma
dat$ABPV_full <- log10(dat$P_ABPV_titer_cor + dat$O_ABPV_titer_cor + 1)
dat$DWV_full <- log10(dat$P_DWV_titer_cor + dat$O_DWV_titer_cor +1)
# titre as a sum of both virus titres for the entire body
dat$virus_full <- log10(dat$P_ABPV_titer_cor + dat$O_ABPV_titer_cor+dat$P_DWV_titer_cor + dat$O_DWV_titer_cor +1)
#### descriptive statistics ####
#### ABPV ####
# prosoma
group_by(dat, treatment) %>%
summarise(
count = n(),
pos = sum(P_ABPV_PN =="pos"),
neg = sum(P_ABPV_PN == "neg"),
p_percent = sum(P_ABPV_PN =="pos")/n(),
mean_tit = mean(ABPV_pro[P_ABPV_PN == "pos"]),
sd_tit = sd(ABPV_pro[P_ABPV_PN == "pos"]),
q_0 = quantile(ABPV_pro[P_ABPV_PN == "pos"], probs = (0), na.rm = TRUE),
q_25 = quantile(ABPV_pro[P_ABPV_PN == "pos"], probs = (0.25), na.rm = TRUE),
q_50 = quantile(ABPV_pro[P_ABPV_PN == "pos"], probs = (0.5), na.rm = TRUE),
q_75 = quantile(ABPV_pro[P_ABPV_PN == "pos"], probs = (0.75), na.rm = TRUE),
q_100 = quantile(ABPV_pro[P_ABPV_PN == "pos"], probs = (1), na.rm = TRUE),
HLI = sum(ABPV_pro >= 7)
)
# opisthosoma
group_by(dat, treatment) %>%
summarise(
count = n(),
pos = sum(O_ABPV_PN =="pos"),
neg = sum(O_ABPV_PN == "neg"),
p_percent = sum(O_ABPV_PN =="pos")/n(),
mean_tit = mean(ABPV_opi[O_ABPV_PN == "pos"]),
sd_tit = sd(ABPV_opi[O_ABPV_PN == "pos"]),
q_0 = quantile(ABPV_opi[O_ABPV_PN == "pos"], probs = (0), na.rm = TRUE),
q_25 = quantile(ABPV_opi[O_ABPV_PN == "pos"], probs = (0.25), na.rm = TRUE),
q_50 = quantile(ABPV_opi[O_ABPV_PN == "pos"], probs = (0.5), na.rm = TRUE),
q_75 = quantile(ABPV_opi[O_ABPV_PN == "pos"], probs = (0.75), na.rm = TRUE),
q_100 = quantile(ABPV_opi[O_ABPV_PN == "pos"], probs = (1), na.rm = TRUE),
HLI = sum(ABPV_opi >= 7)
)
#### DWV ####
# prosoma
group_by(dat, treatment) %>%
summarise(
count = n(),
pos = sum(P_DWV_PN =="pos"),
neg = sum(P_DWV_PN == "neg"),
p_percent = sum(P_DWV_PN =="pos")/n(),
mean_tit = mean(DWV_pro[P_DWV_PN == "pos"]),
sd_tit = sd(DWV_pro[P_DWV_PN == "pos"]),
q_0 = quantile(DWV_pro[P_DWV_PN == "pos"], probs = (0), na.rm = TRUE),
q_25 = quantile(DWV_pro[P_DWV_PN == "pos"], probs = (0.25), na.rm = TRUE),
q_50 = quantile(DWV_pro[P_DWV_PN == "pos"], probs = (0.5), na.rm = TRUE),
q_75 = quantile(DWV_pro[P_DWV_PN == "pos"], probs = (0.75), na.rm = TRUE),
q_100 = quantile(DWV_pro[P_DWV_PN == "pos"], probs = (1), na.rm = TRUE),
HLI = sum(DWV_pro >= 7)
)
# opisthosoma
group_by(dat, treatment) %>%
summarise(
count = n(),
pos = sum(O_DWV_PN =="pos"),
neg = sum(O_DWV_PN == "neg"),
pos_per = sum(O_DWV_PN =="pos")/n(),
mean_tit = mean(DWV_opi[O_DWV_PN == "pos"]),
sd_tit = sd(DWV_opi[O_DWV_PN == "pos"]),
q_0 = quantile(DWV_opi[O_DWV_PN == "pos"], probs = (0), na.rm = TRUE),
q_25 = quantile(DWV_opi[O_DWV_PN == "pos"], probs = (0.25), na.rm = TRUE),
q_50 = quantile(DWV_opi[O_DWV_PN == "pos"], probs = (0.5), na.rm = TRUE),
q_75 = quantile(DWV_opi[O_DWV_PN == "pos"], probs = (0.75), na.rm = TRUE),
q_100 = quantile(DWV_opi[O_DWV_PN == "pos"], probs = (1), na.rm = TRUE),
HLI = sum(DWV_opi >= 7),
min = min(DWV_opi[O_DWV_PN == "pos"]),
max = max(DWV_opi[O_DWV_PN == "pos"])
)
# Full titres
group_by(dat) %>%
summarise(
ABPV_min = min(ABPV_full),
ABPV_max = max(ABPV_full),
DWV_min = min(DWV_full[DWV_full!=0], na.rm = TRUE),
DWV_max = max(DWV_full, na.rm = TRUE)
)
#ABPV
plot(dat$ABPV_full ~ dat$treatment, ylim = c(0,11))
abline(vdt_ABPV_full, 0, lty = 2)
shapiro.test(dat$ABPV_full) # significant --> not normally distributed
leveneTest(dat$ABPV_full, dat$treatment) # non significant --> nullhypothesis of equal variance can be assumed
wilcox.test(dat$ABPV_full ~ dat$treatment)
#DWV
plot(dat$DWV_full ~ dat$treatment, ylim = c(0,11))
abline(vdt_DWV_full, 0, lty = 2)
shapiro.test(dat$DWV_full) # significant --> not normally distributed
leveneTest(dat$DWV_full, dat$treatment) # non significant --> nullhypothesis of equal variance can be assumed
wilcox.test(dat$DWV_full ~ dat$treatment)
#### High level infection (HLI)
control_total <- sum(dat$treatment=="Control") #count(dat, treatment)[1,2] #total number of samples in control group
treatment_total <- sum(dat$treatment=="Virus") #count(dat, treatment)[2,2] #total number of samples in treatment group
control_hli <- sum(dat$treatment == "Control" & (dat$ABPV_pro >= 7 | dat$ABPV_opi >= 7 | dat$DWV_pro >= 7 | dat$DWV_opi >= 7)) #number of cases (spiders with at least one body part having a high level infection with at least one of the two viruses) in control group
treatment_hli <- sum(dat$treatment == "Virus" & (dat$ABPV_pro >= 7 | dat$ABPV_opi >= 7 | dat$DWV_pro >= 7 | dat$DWV_opi >= 7)) #number of cases (high level infections) in treatment group
values <- c(control_hli,
treatment_hli,
control_total - control_hli,
treatment_total - treatment_hli) #create the vector with the values
chi_matrix <- matrix(values,  nrow = 2) # create a matrix from the vector
chi_matrix
# alternatively create a more informative datatable
treatment = c("control", "virus treatment", "control", "virus treatment")
hli = c("yes", "yes", "no", "no")
N = values #c(4, 7, 1, 12)
data <- data.frame(treatment, hli, N)
#create crosstabulation
highlevelinfections <- xtabs(N ~ treatment + hli, data = data)
highlevelinfections
#all the same just for testing
#campbell2x2.test(matrix(c(1, 12, 4, 7), nrow = 2))
campbell2x2.test(highlevelinfections)
#campbell2x2.test(chi_matrix)
#campbell2x2.test(matrix(values, nrow = 2))
#Output for the one tailed campell test:
value <- as.numeric(campbell2x2.test(highlevelinfections)$p.value/2)
paste("p-value for one tailed campell test = ", value)
####
# comparison of pro and opisthosoma
# ABPV
shapiro.test(c(dat$ABPV_pro, dat$ABPV_opi)) #significant --> not normally distributed
bodypart = c(rep("prosoma", nrow(dat)), rep("opistosoma", nrow(dat)))
ABPV_titer = c(dat$ABPV_pro, dat$ABPV_opi)
levene_dat <- data.frame(bodypart, ABPV_titer)
leveneTest(levene_dat$ABPV_titer, levene_dat$bodypart)# non significant --> nullhypothesis of equal variance can be assumed
test <- wilcox.test(dat$ABPV_pro, dat$ABPV_opi, paired = TRUE)
test
Z_score <-  qnorm(test$p.value/2)
Z_score
#DWV
shapiro.test(c(dat$DWV_pro, dat$DWV_opi)) #significant --> not normally distributed
DWV_titer = c(dat$DWV_pro, dat$DWV_opi)
levene_dat <- data.frame(bodypart, DWV_titer)
leveneTest(levene_dat$DWV_titer, levene_dat$bodypart)# significant --> variance not equal. but wilcox test is ok.
test <- wilcox.test(dat$DWV_pro, dat$DWV_opi, paired = TRUE)
test
Z_score <-  qnorm(test$p.value/2)
Z_score
ggscatter(dat, x = "ABPV_pro", y = "ABPV_opi",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "kendall",
xlab = "ABPV titer prosoma", ylab = "ABPV titer opisthosoma")
cor.test(dat$ABPV_pro, dat$ABPV_opi, method = "kendall")
ggscatter(dat, x = "DWV_pro", y = "DWV_opi",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "kendall",
xlab = "DWV titer prosoma", ylab = "DWV titer opisthosoma")
cor.test(dat$DWV_pro, dat$DWV_opi, method = "kendall")
names(dat)
boxplot(dat$ABPV_pro, dat$ABPV_opi)
boxplot(dat$DWV_pro, dat$DWV_opi)
boxplot(dat$ABPV_pro+dat$DWV_pro, dat$DWV_opi+dat$ABPV_opi)
