x=Sepal.Length,
y=Sepal.Width)
head(iris)
ggplot2:::qplot(data=iris,
x=Sepal.Length,
y=Sepal.Width)
qplot(data=iris,
x=Sepal.Length,
y=Sepal.Width)
require(ggplot2)
qplot(data=iris,
x=Sepal.Length,
y=Sepal.Width)
sample(1:60, 60, replace=FALSE)
x <- sample(1:60, 60, replace=FALSE)
x
sample(1:60, 60, replace=TRUE)
library(blmeco)
install.packages("blmeco")
library(blmeco)
data(periparusater)
View(periparusater)
head(periparusater)
x <- data
x
x <- periparusater
x
x$sex <- as.factor(x$sex)
?tapply
?aggregate
aggregate(x$weight, by=x$sex)
aggregate(x$weight, by=x$sex, FUN=mean
)
aggregate(x$weight, by=x$sex,  FUN=mean, na.rm=TRUE)
x <- periparusater
aggregate(x$weight, by=x$sex,  FUN=mean, na.rm=TRUE)
aggregate(x$weight, by=list(x$sex),  FUN=mean, na.rm=TRUE)
#3) Apply a function to a matrix column- or row-wise
#A matrix is a more dimensional number (all values have the same unit). We can calculate summary statistics row- or column-wise.
m<- matrix(rnorm(6*4), ncol=6, nrow=4)
m
std <- function(x) sd(x)/sqrt(length(x))
aggregate(x$weight, by=list(x$sex),  FUN=std, na.rm=TRUE)
aggregate(x$weight, by=list(x$sex),  FUN=std, na.rm=TRUE)
#Use the function apply to get row- and column-wise: mean, 5% and 90% quantiles.
apply
#Use the function apply to get row- and column-wise: mean, 5% and 90% quantiles.
?apply
apply(x, MARGIN = c(1,), FUN = quantile)
m
apply(x, MARGIN = 1, FUN = quantile)
apply(x, MARGIN = 1, FUN = mean,)
apply(m, MARGIN = 1, FUN = mean,)
m
apply(m, MARGIN = 1, FUN = mean)
apply(m, MARGIN = 1, FUN = quantile)
apply(m, MARGIN = 1, FUN = quantile)
apply(m, MARGIN = 2, FUN = mean)
apply(m, MARGIN = 2, FUN = quantile)
dat <- periparusaterÂ¨
a <- array(rpois(5*7*2,3), dim=c(5,7,2))
a[,3,]
std <- function(x) sd(x)/sqrt(length(x))
aggregate(dat$weight, by=list(dat$sex),  FUN=mean, na.rm=TRUE)
dat <- periparusater
aggregate(dat$weight, by=list(dat$sex),  FUN=mean, na.rm=TRUE)
aggregate(dat$weight, by=list(dat$sex),  FUN=std, na.rm=TRUE)
aggregate(dat$weight, by=list(dat$sex),  FUN=std)
# create an array
a <- array(rpois(5*7*2, 10), dim=c(5,7,2))
[,6]
a
dim(a)
a[,3,]
#now we can apply functions to all the dimensions... which can be applied in the MArgin Argument:
apply(a, c(1,3), mean)
install.packages(c("arm", "rstanarm", "blmeco", "coda", "sp", "gstat", "lasso2", "spBayes", "fields", "dclone", "birdring", "carcass")
install.packages(c("arm", "rstanarm", "blmeco", "coda", "sp", "gstat", "lasso2", "spBayes", "fields", "dclone", "birdring", "carcass")
)
install.packages(c("arm", "rstanarm", "blmeco", "coda", "sp", "gstat", "lasso2", "spBayes", "fields", "dclone", "birdring", "carcass"))
install.packages(c("arm", "rstanarm", "blmeco", "coda", "sp", "gstat", "lasso2", "spBayes", "fields", "dclone", "birdring", "carcass"))
install.packages(c("arm", "rstanarm", "blmeco", "coda", "sp", "gstat", "lasso2", "spBayes", "fields", "dclone", "birdring", "carcass"))
# note: omit the 's' in 'https' if you cannot handle https downloads
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
log(1)
log(10)
### citations ###
#citing R Studio
RStudio.Version()
citation()
R.Version()
citation()
library(effsize)
set.seed(1492)
treatment1 <- rnorm(100, mean=10)
treatment2 <- rnorm(100, mean=10)
control <- rnorm(100, mean=12)
cohen.d(control, treatment1)
cohen.d(control, treatment2)
cohen.d(treatment1, treatment2)'
cohen.d(treatment1, treatment2)
cohen.d(treatment1, treatment2)
library(effsize)
)set.seed(1492)
""
"
"
>
1+1
)
1+1
cohen.d(treatment1, treatment2)
treatment3 <- rnorm(100, mean= 10.2)
cohen.d(treatment1, treatment3)
hedge_g(control, treatment1)
hedges_g(control, treatment1)
?hedges_g
hedg_g(control, treatment1)
#### load libraries ####
suppressPackageStartupMessages(library(survival))# contains kalan meier plot function
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(chron))
suppressPackageStartupMessages(library(car)) #contains levene's test + Anova
#library(arm) #contains the sim function for bayesian inference
#library(dunn.test) #contains the dunn test
suppressPackageStartupMessages(library(nlme)) #lme
suppressPackageStartupMessages(library(emmeans)) #lsmeans to compare pairwise differences after the modeling using bonferroni corrections
suppressPackageStartupMessages(library(blmeco)) #contains compareqqnorm  (multiple qq boxplots)
suppressPackageStartupMessages(library(lme4)) #lmer
suppressPackageStartupMessages(library(lsmeans)) #cld
suppressPackageStartupMessages(library(multcomp)) #cld 2
suppressPackageStartupMessages(library(glmmTMB))
suppressPackageStartupMessages(library(multcompView)) #for the CLD functions
suppressPackageStartupMessages(library(lmtest)) #bptest(model) -  heteroscedasticity
suppressPackageStartupMessages(library(survminer)) #contains ggsurvplot()
setwd("/Users/gismo/Desktop/R/ANV") # homeoffice mac
dat <- read.table("ANV_all_Data.txt", header = TRUE)
mov <- read.table("speed.txt", header = TRUE)
# preparation of Dataframe --> dat
head(dat)
str(dat)
dat$treatment_1 <- factor(dat$treatment_1, levels(dat$treatment_1)[c(1,3,2)])
dat$treatment <- as.factor(dat$treatment)
dat$treatment <- revalue(dat$treatment, c("1"="control-control", "2"="control-virus","3" = "low-control","4" = "low-virus","5" = "high-control","6" = "high-virus" ))
dat$adult_production <- as.factor(dat$adult_production)
dat$adult_production <- revalue(dat$adult_production, c("1" = "yes", "0" = "no"))
tapply(dat$day_of_death[dat$y2_survival_status==1], dat$treatment[dat$y2_survival_status==1], mean)
plot(dat$day_of_death ~ dat$treatment)
plot(survfit(Surv(dat$day_of_death, dat$y2_survival_status)~1)) #plots first basic plot with 95 confidence intervalls for all the data
fit=survfit(Surv(dat$day_of_death, dat$y2_survival_status)~dat$treatment)
plot(fit)
summary(fit)
#plot cumulative queen survival
ggsurvplot(fit, data = dat, pval = TRUE) #modify graoh to put it into supplementary material
#calculate potential statistical difference between the groups
mod <- survdiff(Surv(day_of_death, y2_survival_status) ~ treatment, data=dat)
mod
head(dat)
str(dat)
dat_r <- subset(dat, treatment_1 != "low") #remove low because it does not really add valuable information to the study
dat_r$treatment_1 <- droplevels(dat_r)$treatment_1
dat_r$treatment <- droplevels(dat_r)$treatment
dat_r$treatment <- as.factor(dat_r$treatment)
dat_r$treatment <- revalue(dat_r$treatment, c("1"="Control", "2"="Virus","5" = "Neonicotinoid","6" = "Mixed"))
#dat_r$treatment <- revalue(dat_r$treatment, c("control-control"="Control", "control-virus"="Virus","high-control" = "Neonicotinoid","high-virus" = "Mixed" ))
dat_r$treatment_1 <- revalue(dat_r$treatment_1, c("control" = "Control", "high" = "Neonicotinoid"))
dat_r$treatment_2 <- revalue(dat_r$treatment_2, c("control" = "Control", "virus" = "Virus"))
table(dat_r$treatment)
table(dat_r$treatment_2)
table(dat_r$treatment_1)
tapply(dat_r$day_of_death[dat_r$y2_survival_status==1], dat_r$treatment[dat_r$y2_survival_status==1], mean)
plot(dat_r$day_of_death ~ dat_r$treatment)
plot(survfit(Surv(dat_r$day_of_death, dat_r$y2_survival_status)~1)) #plots first basic plot with 95 confidence intervalls for all the data
fit=survfit(Surv(dat_r$day_of_death, dat_r$y2_survival_status)~dat_r$treatment)
plot(fit)
summary(fit)
ggsurvplot(fit, data = dat_r, pval = TRUE) #modify graoh to put it into supplementary material?
#calculate potential statistical difference between the groups
mod <- survdiff(Surv(day_of_death, y2_survival_status) ~ treatment, data=dat_r)
mod # no statistical difference between the four groups.
plot(dat_r$adult_production ~ dat_r$treatment)
plot(dat_r$adult_production ~ dat_r$treatment)
chisq.test(dat_r$adult_production, dat_r$treatment_1)
mod <- glm(dat$adult_production ~ dat$treatment_1*dat$treatment_2, family = binomial)
summary(mod)
Anova(mod)
mod <- glm(dat_r$adult_production ~ dat_r$treatment_1*dat$treatment_2, family = binomial)
summary(mod)
Anova(mod)
mod <- glm(dat_r$adult_production ~ dat_r$treatment_1*dat$treatment_2, family = binomial)
mod <- glm(dat_r$adult_production ~ dat_r$treatment_1*dat_r$treatment_2, family = binomial)
summary(mod)
Anova(mod)
#calculate potential statistical difference between the groups
mod <- survdiff(Surv(day_of_death, y2_survival_status) ~ treatment, data=dat_r)
mod # no statistical difference between the four groups.
ggsurvplot(fit, data = dat_r, pval = TRUE) #modify graoh to put it into supplementary material?
mod <- glm(dat_r$adult_production ~ dat_r$treatment_1*dat_r$treatment_2, family = binomial)
### workers ###
boxplot(dat_r$weight_adults ~ dat_r$treatment)
#stat summary:
require(dplyr)
group_by(dat_r, treatment_1, treatment_2) %>%
summarise(
count = n(),
N_W = sum(!is.na(weight_adults)),
mean = mean(weight_adults, na.rm = TRUE),
sd = sd(weight_adults, na.rm = TRUE),
shapiro = shapiro.test(dat_r$weight_adults)$p,
levene = leveneTest(dat_r$weight_adults, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(weight_adults, probs = (0), na.rm = TRUE),
q_25 = quantile(weight_adults, probs = (0.25), na.rm = TRUE),
q_50 = quantile(weight_adults, probs = (0.5), na.rm = TRUE),
q_75 = quantile(weight_adults, probs = (0.75), na.rm = TRUE),
q_100 = quantile(weight_adults, probs = (1), na.rm = TRUE),
)
### workers ###
boxplot(dat$weight_adults ~ dat$treatment)
#stat summary:
require(dplyr)
group_by(dat, treatment_1, treatment_2) %>%
summarise(
count = n(),
N_W = sum(!is.na(weight_adults)),
mean = mean(weight_adults, na.rm = TRUE),
sd = sd(weight_adults, na.rm = TRUE),
shapiro = shapiro.test(dat$weight_adults)$p,
levene = leveneTest(dat$weight_adults, dat$treatment)$`Pr(>F)`[1],
q_0 = quantile(weight_adults, probs = (0), na.rm = TRUE),
q_25 = quantile(weight_adults, probs = (0.25), na.rm = TRUE),
q_50 = quantile(weight_adults, probs = (0.5), na.rm = TRUE),
q_75 = quantile(weight_adults, probs = (0.75), na.rm = TRUE),
q_100 = quantile(weight_adults, probs = (1), na.rm = TRUE),
)
#model
mod <- lm(weight_adults ~ treatment_1*treatment_2, data = dat)
summary(mod)
Anova(mod)
mod <- lm(weight_adults ~ treatment_1 + treatment_2 + treatment_1:treatment_2, data = dat)
summary(mod)
Anova(mod)
#model
mod <- lm(weight_adults ~ treatment_1*treatment_2, data = dat_r)
summary(mod)
Anova(mod)
#pairwise differences
lsmeans(mod, pairwise ~ treatment_1:treatment_2, data = dat_r, adjust = "tukey")
marginal = lsmeans(mod, ~ treatment_1:treatment_2, data = dat_r)
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="tukey")
CLD
#pairwise differences
lsmeans(mod, pairwise ~ treatment_1*treatment_2, data = dat_r, adjust = "tukey")
marginal = lsmeans(mod, ~ treatment_1*treatment_2, data = dat_r)
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="tukey")
CLD
TukeyHSD(mod)
TukeyHSD(Anova(mod))
TukeyHSD(aov(mod))
marginal = lsmeans(mod, ~ treatment_1*treatment_2, data = dat_r)
#pairwise differences
lsmeans(mod, pairwise ~ treatment_1*treatment_2, data = dat_r, adjust = "tukey")
# test model assumtions
leveneTest(mod) #non-significant = ok #homogenity of variance (plot(mod,1))
aov_residuals <- residuals(object = mod)
shapiro.test(x = aov_residuals) #non significant --> assumption of normally distributed residuals is ok ##plot(mod, 2)#normality
bptest(mod) #non significant --> assumtions of heteroskedasticity not violated ok
par(mfrow=c(2,2))
plot(mod)
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
compareqqnorm(mod)
par(mfrow=c(1,1))
#Bodymass export as 10x8 inch pdfs
boxplot(dat_r$weight_adults ~ dat_r$treatment, main = "Workers", xlab = "Treatments", ylab="Weight [mg]", ylim=c(15, 25), las=1, xaxt = "n")
mfrow=c(1,2)
#Bodymass export as 10x8 inch pdfs
boxplot(dat_r$weight_adults ~ dat_r$treatment, main = "Workers", xlab = "Treatments", ylab="Weight [mg]", ylim=c(15, 25), las=1, xaxt = "n")
par(mar=c(4.1, 4.1, 3.1, 1.1),
oma = c(0,0,0,0)+0.5,
cex.lab=1.5,
cex.axis=1.5,
cex.main= 1.5,
mfrow=c(1,2))
label <- c("Control", "Virus", "Neonicotinoid", "Mixed")
#Bodymass export as 10x8 inch pdfs
boxplot(dat_r$weight_adults ~ dat_r$treatment, main = "Workers", xlab = "Treatments", ylab="Weight [mg]", ylim=c(15, 25), las=1, xaxt = "n")
axis(1, at=1:4, labels = label)
text(c(1:4), 24.5, labels = c("a", "a", "ab", "b"), font = 2, cex = 1.5)
mtext('a', side=3, line=1.5, at=0, cex = 2, font = 2)
boxplot(dat_r$weight_queens ~dat_r$treatment, main = "Queens", xlab = "Treatments", ylab="Weight [mg]", ylim=c(22, 47), las=1, xaxt = "n")
axis(1, at=1:4, labels = label)
text(c(1:4), 45.6, labels = c("a", "a", "a", "a"), font = 2, cex = 1.5)
mtext('B', side=3, line=1.5, at=0, cex = 2, font = 2)
boxplot(dat_r$weight_adults ~ dat_r$treatment, main = "Workers", xlab = "Treatments", ylab="Weight [mg]", ylim=c(15, 25), las=1, xaxt = "n")
axis(1, at=1:4, labels = label)
text(c(1:4), 24.5, labels = c("a", "a", "ab", "b"), font = 2, cex = 1.5)
mtext('A', side=3, line=1.5, at=0, cex = 2, font = 2)
boxplot(dat_r$weight_queens ~dat_r$treatment, main = "Queens", xlab = "Treatments", ylab="Weight [mg]", ylim=c(22, 47), las=1, xaxt = "n")
axis(1, at=1:4, labels = label)
text(c(1:4), 45.6, labels = c("a", "a", "a", "a"), font = 2, cex = 1.5)
mtext('B', side=3, line=1.5, at=0, cex = 2, font = 2)
#model
mod <- lm(weight_adults ~ treatment_1*treatment_2, data = dat_r)
Anova(mod)
dat_all <- read.table <- read.table("AN_data.txt", header = TRUE)
dat_all$treatment <- factor(dat_all$treatment, levels(dat_all$treatment)[c(1,3,2)])
setwd("/Users/gismo/Desktop/R/AN")
dat_all <- read.table <- read.table("AN_data.txt", header = TRUE)
dat_all$treatment <- factor(dat_all$treatment, levels(dat_all$treatment)[c(1,3,2)])
#eggs
plot(dat_all$duration_eggs ~ dat_all$treatment, main = "duration egg development", xlab= "treatments", ylab = "duration [days]", cex.axis = 1.5, cex.lab= 1.5, cex.main= 1.5)
#pupae
plot(dat_all$duration_pupae ~ dat_all$treatment, main = "duration pupae development", xlab= "treatments", ylab = "duration [days]", cex.axis = 1.5, cex.lab= 1.5, cex.main= 1.5)
group_by(dat_all, treatment) %>%
summarise(
count = n(),
N = sum(!is.na(duration_pupae)),
mean = mean(duration_pupae, na.rm = TRUE),
sd = sd(duration_pupae, na.rm = TRUE)
)
tapply(dat_all$duration_pupae, dat_all$treatment, quantile, na.rm = TRUE)
#statistical testing:
shapiro.test(dat_all$duration_pupae) #shapiro ist nicht signifikant --> Nullhypothese (Daten sind Normalverteilt)  kann angenommen werden
leveneTest(dat_all$duration_pupae, dat_all$treatment) # not significant --> Nullhypthose of equal variance of the data can be assumed
mod <- aov(duration_pupae ~ treatment, data = dat_all, na.action=na.omit)
summary(mod)
#### Graphs in Manuscript ####
par(mar=c(4.1, 4.1, 3.1, 1.1),
oma = c(0,0,0,0)+0.5,
cex.lab=1.5,
cex.axis=1.5,
cex.main= 1.5,
mfrow=c(1,2))
label <- c("Control", "Low", "High")
#Bodymass export as 10x8 inch pdfs
boxplot(dat_all$weight_queens ~ dat_all$treatment, main = "Queens", xlab = "Treatments", ylab="Mass [mg]", ylim=c(22, 47), las=1, xaxt = "n")
axis(1, at=1:3, labels = label)
text(c(1,2,3), 45.6, labels = c("a", "a", "a"), font = 2, cex = 1.5)
mtext('a', side=3, line=1.5, at=0, cex = 2, font = 2)
boxplot(dat_all$weight_adults ~dat_all$treatment, main = "Workers", xlab = "Treatments", ylab="Mass [mg]", ylim=c(15, 25), las=1, xaxt = "n")
axis(1, at=1:3, labels = label)
text(c(1,2,3), 24.5, labels = c("a", "ab", "b"), font = 2, cex = 1.5)
mtext('b', side=3, line=1.5, at=0, cex = 2, font = 2)
### queens ###
boxplot(dat_r$weight_queens ~ dat_r$treatment)
group_by(dat_r, treatment_1, treatment_2) %>%
summarise(
count = n(),
N_W = sum(!is.na(weight_queens)),
mean = mean(weight_queens, na.rm = TRUE),
sd = sd(weight_queens, na.rm = TRUE),
shapiro = shapiro.test(dat_r$weight_queens)$p,
levene = leveneTest(dat_r$weight_queens, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(weight_queens, probs = (0), na.rm = TRUE),
q_25 = quantile(weight_queens, probs = (0.25), na.rm = TRUE),
q_50 = quantile(weight_queens, probs = (0.5), na.rm = TRUE),
q_75 = quantile(weight_queens, probs = (0.75), na.rm = TRUE),
q_100 = quantile(weight_queens, probs = (1), na.rm = TRUE),
)
#model
mod <- lm(weight_queens ~ treatment_1*treatment_2, data = dat_r)
summary(mod)
Anova(mod)
baseline <- lm(weight_adult ~ 1, data = caste_reduced, REML = FALSE)
baseline <- lm(weight_adult ~ 1, data = dat_r, REML = FALSE)
baseline <- lm(weight_adults ~ 1, data = dat_r, REML = FALSE)
baseline <- lm(weight_adults ~ 1, data = dat_r)
table(dat_r$treatment_1)
neonic_M <- update(baseline, .~. + treatment_1)
virus_M <- update(sample_M, .~. + treatment_2)
baseline <- lm(weight_adults ~ 1, data = dat_r)
neonic_M <- update(baseline, .~. + treatment_1)
virus_M <- update(neonic_M, .~. + treatment_2)
interaction_M <- update(virus_M, .~. + treatment_1:treatment_2)
anova(baseline, neonic_M, virus_M, interaction_M)
Anova(mod)
Anova(interaction_M)
#model
mod <- lm(weight_adults ~ treatment_1*treatment_2, data = dat_r)
Anova(mod)
Anova(interaction_M)
#model
mod <- lm(weight_queens ~ treatment_1*treatment_2, data = dat_r)
summary(mod)
Anova(mod)
#pairwise differences
lsmeans(mod, pairwise ~ treatment_1*treatment_2, data = dat_r, adjust = "tukey")
marginal = lsmeans(mod, ~ treatment_1*treatment_2, data = dat_r)
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="tukey")
CLD
### workers ###
boxplot(dat_r$weight_adults ~ dat_r$treatment)
#stat summary:
require(dplyr)
group_by(dat_r, treatment_1, treatment_2) %>%
summarise(
count = n(),
N_W = sum(!is.na(weight_adults)),
mean = mean(weight_adults, na.rm = TRUE),
sd = sd(weight_adults, na.rm = TRUE),
shapiro = shapiro.test(dat_r$weight_adults)$p,
levene = leveneTest(dat_r$weight_adults, dat_r$treatment)$`Pr(>F)`[1],
q_0 = quantile(weight_adults, probs = (0), na.rm = TRUE),
q_25 = quantile(weight_adults, probs = (0.25), na.rm = TRUE),
q_50 = quantile(weight_adults, probs = (0.5), na.rm = TRUE),
q_75 = quantile(weight_adults, probs = (0.75), na.rm = TRUE),
q_100 = quantile(weight_adults, probs = (1), na.rm = TRUE),
)
#model
mod <- lm(weight_adults ~ treatment_1*treatment_2, data = dat_r) # is equal to the interaction model.
summary(mod)
Anova(mod)
baseline <- lm(weight_adults ~ 1, data = dat_r)
neonic_M <- update(baseline, .~. + treatment_1)
virus_M <- update(neonic_M, .~. + treatment_2)
interaction_M <- update(virus_M, .~. + treatment_1:treatment_2)
anova(baseline, neonic_M, virus_M, interaction_M)
#pairwise differences
lsmeans(mod, pairwise ~ treatment_1*treatment_2, data = dat_r, adjust = "tukey")
# test model assumtions
compareqqnorm(mod)
#model
mod <- lm(weight_queens ~ treatment_1*treatment_2, data = dat_r)
summary(mod)
Anova(mod)
baseline <- lm(weight_queens ~ 1, data = dat_r)
neonic_M <- update(baseline, .~. + treatment_1)
virus_M <- update(neonic_M, .~. + treatment_2)
interaction_M <- update(virus_M, .~. + treatment_1:treatment_2)
anova(baseline, neonic_M, virus_M, interaction_M)
Anova(mod)
anova(baseline, neonic_M, virus_M, interaction_M)
#pairwise differences
lsmeans(mod, pairwise ~ treatment_1*treatment_2, data = dat_r, adjust = "tukey")
marginal = lsmeans(mod, ~ treatment_1*treatment_2, data = dat_r)
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="tukey")
CLD
#model
mod <- lm(weight_adults ~ treatment_1*treatment_2, data = dat_r) # is equal to the interaction model.
#pairwise differences
lsmeans(mod, pairwise ~ treatment_1*treatment_2, data = dat_r, adjust = "tukey")
TukeyHSD(aov(mod))
marginal = lsmeans(mod, ~ treatment_1*treatment_2, data = dat_r)
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="tukey")
CLD
boxplot(dat_r$weight_adults ~ dat_r$treatment, main = "Workers", xlab = "Treatments", ylab="Weight [mg]", ylim=c(15, 25), las=1, xaxt = "n")
axis(1, at=1:4, labels = label)
text(c(1:4), 24.5, labels = c("a", "ab", "b", "b"), font = 2, cex = 1.5)
mtext('A', side=3, line=1.5, at=0, cex = 2, font = 2)
boxplot(dat_r$weight_queens ~dat_r$treatment, main = "Queens", xlab = "Treatments", ylab="Weight [mg]", ylim=c(22, 47), las=1, xaxt = "n")
axis(1, at=1:4, labels = label)
text(c(1:4), 45.6, labels = c("a", "a", "a", "a"), font = 2, cex = 1.5)
mtext('B', side=3, line=1.5, at=0, cex = 2, font = 2)
par(mar=c(4.1, 4.1, 3.1, 1.1),
oma = c(0,0,0,0)+0.5,
cex.lab=1.5,
cex.axis=1.5,
cex.main= 1.5,
mfrow=c(1,2))
label <- c("Control", "Virus", "Neonicotinoid", "Mixed")
#Bodymass exported as 1000 X 880  (later ev. 10x8 inch pdfs)
boxplot(dat_r$weight_adults ~ dat_r$treatment, main = "Workers", xlab = "Treatments", ylab="Weight [mg]", ylim=c(15, 25), las=1, xaxt = "n")
axis(1, at=1:4, labels = label)
text(c(1:4), 24.5, labels = c("a", "ab", "b", "b"), font = 2, cex = 1.5)
mtext('A', side=3, line=1.5, at=0, cex = 2, font = 2)
boxplot(dat_r$weight_queens ~dat_r$treatment, main = "Queens", xlab = "Treatments", ylab="Weight [mg]", ylim=c(22, 47), las=1, xaxt = "n")
axis(1, at=1:4, labels = label)
text(c(1:4), 45.6, labels = c("a", "a", "a", "a"), font = 2, cex = 1.5)
mtext('B', side=3, line=1.5, at=0, cex = 2, font = 2)
label <- c("Control", "Virus", "Neonic", "Mixed")
#Bodymass exported as 1000 X 880  (later ev. 10x8 inch pdfs)
boxplot(dat_r$weight_adults ~ dat_r$treatment, main = "Workers", xlab = "Treatments", ylab="Weight [mg]", ylim=c(15, 25), las=1, xaxt = "n")
axis(1, at=1:4, labels = label)
text(c(1:4), 24.5, labels = c("a", "ab", "b", "b"), font = 2, cex = 1.5)
mtext('A', side=3, line=1.5, at=0, cex = 2, font = 2)
boxplot(dat_r$weight_queens ~dat_r$treatment, main = "Queens", xlab = "Treatments", ylab="Weight [mg]", ylim=c(22, 47), las=1, xaxt = "n")
axis(1, at=1:4, labels = label)
text(c(1:4), 45.6, labels = c("a", "a", "a", "a"), font = 2, cex = 1.5)
mtext('B', side=3, line=1.5, at=0, cex = 2, font = 2)
table(dat_r$treatment_1)
anova(baseline, neonic_M, virus_M, interaction_M)
#model
mod <- lm(weight_adults ~ treatment_1*treatment_2, data = dat_r) # is equal to the interaction model.
summary(mod)
Anova(mod)
#model
mod <- lm(weight_adults ~ treatment_1*treatment_2, data = dat_r) # is equal to the interaction model.
summary(mod)
Anova(mod)
baseline <- lm(weight_adults ~ 1, data = dat_r)
neonic_M <- update(baseline, .~. + treatment_1)
virus_M <- update(neonic_M, .~. + treatment_2)
interaction_M <- update(virus_M, .~. + treatment_1:treatment_2)
anova(baseline, neonic_M, virus_M, interaction_M)
