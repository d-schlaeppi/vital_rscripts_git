#check the model assumptions
par(mfrow=c(2,2))
plot(modc)
acf(resid(modc))
final$treat21 <- factor(paste(final$treatment_2, final$treatment_1))
final$treat21
plot(resid(modc)~final$treatment_1)
#check the model assumptions
par(mfrow=c(2,2))
plot(mod)
acf(resid(mod))
final$treat21 <- factor(paste(final$treatment_2, final$treatment_1))
final$treat21
plot(resid(mod)~final$treatment_1)
hist(final$adults)
shapiro.test((final$adults))
shapiro.test(final$adults)
#bayesian inference using sim
# add predicted values (group means)
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
#bayesian inference using sim
# add predicted values (group means), we did not have predicted values
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
newdatc$fit <- predict(mod, newdata=newdatc)
nsim <- 2000
bsimc <- sim(mod, n.sim=nsim)
bsimc <- sim(mod, n.sim=nsim)
#bayesian inference using sim
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
newdatc$fit <- predict(mod, newdata=newdatc)
nsim <- 2000
bsimc <- sim(mod, n.sim=nsim)
str(bsimc)
bsimc <- sim(modc, n.sim=nsim)
bsimc <- sim(mod, n.sim=2000)
?sim
bsimc <- sim(mod, n.sims=nsim)
n.sim
nsim
bsimc <- sim(mod, n.sim=nsim)
bsimc <- sim(mod, nRep=nsim)
bsimc <- sim(2000,mod)
bsimc <- sim(2000, mod, n=nsim)
bsimc <- sim(mod, n=nsim)
bsimc <- sim(mod, n=nsim)
#bayesian inference using sim
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
newdatc$fit <- predict(mod, newdata=newdatc)
nsim <- 2000
bsimc <- sim(mod, n=nsim)
bsimc <- sim(mod, n.sim=nsim)
#bayesian inference using sim
modc <- mod
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final1$treatment_1)))
newdatc$fit <- predict(modc, newdata=newdatc)
nsim <- 2000
bsimc <- sim(modc, n.sim=nsim)
str(bsimc)
fitmat <- matrix(ncol=nsim, nrow=nrow(newdatc))
Xmat <- model.matrix(formula(modc)[c(1,3)], data=newdatc)
for(i in 1:nsim) fitmat[,i] <- Xmat%*%bsimc@coef[i,]
bsimc <- sim(nRep=2000, modc)
bsimc <- sim(modc)
bsimc <- sim(modc, times=2000)
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final1$treatment_1)))
newdatc$fit <- predict(modc, newdata=newdatc)
nsim <- 2000
bsimc <- sim(modc, n.sim=nsim)
bsimc <- sim(modc, n.sim=nsim)
summary(final1$treatment_1)
summary(final1$treatment_2)
#exclude failure queens
final1 <- subset(final1, id!= "C9C" &  id!= "H4C" & id!="H11V")
final1$treatment_1 <- as.factor(final1$treatment_1)
final1$treatment_1 <- factor(final1$treatment_1, levels = c("control", "low", "high"))
final1$treatment_2 <- as.factor(final1$treatment_2)
final1$workforce <- final1$pupae+final1$adults
final1$workforce
mean(final1$workforce)
boxplot(workforce ~ treatment_1, data=final1)
boxplot(adults ~ treatment_1, data=final1)
boxplot(workforce ~ treatment_1, data=final1)
boxplot(adults ~ treatment_1, data=final1)
modc <- lm(workforce ~ treatment_1, data=final1)
modc
summary(modc)
Anova(modc)
final1$treatment_1 <- relevel(final1$treatment_1, ref ="low")
modc <- lm(adults ~ treatment_1, data=final1)
summary(modc)
final1$treatment_1 <- relevel(final1$treatment_1, ref ="control")
#check the model assumptions
par(mfrow=c(2,2))
plot(modc)
acf(resid(modc))
final1$treat21 <- factor(paste(final1$treatment_2, final1$treatment_1))
final1$treat21
plot(resid(modc)~final1$treatment_1)
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final1$treatment_1)))
newdatc$fit <- predict(modc, newdata=newdatc)
nsim <- 2000
bsimc <- sim(modc, n.sim=nsim)
str(bsimc)
fitmat <- matrix(ncol=nsim, nrow=nrow(newdatc))
Xmat <- model.matrix(formula(modc)[c(1,3)], data=newdatc)
for(i in 1:nsim) fitmat[,i] <- Xmat%*%bsimc@coef[i,]
getwd()
setwd("G:/BIENEN/Personnel/Daniel_Schlaeppi/DS-Bees_new/R/")
library(lme4)
dat <- read.table("speed.txt", header = TRUE)
head(dat)
str(dat)
dat$treat1 <- as.factor(dat$treat1)
dat$treat1 <- factor(dat$treat1, levels = c("control", "low", "high"))
dat$treat2 <- as.factor(dat$treat2)
#transform time into Minutes only
install.packages("chron")
install.packages("chron")
library(chron)
dat$time2 <- times(dat$time)
dat$time_min <- 60 * hours(dat$time2) + minutes(dat$time2)
dat$time_min
plot(dat$inispeed ~ dat$date) #day might have an effect and will be included as random foactor
plot(dat$inispeed ~ dat$time_min)
plot(dat$inispeed ~ dat$date) #day might have an effect and will be included as random foactor
head(dat)
mod_time <- lm(dat$inispeed ~ dat$time_min)
dat$inispeed <- dat$ini_speed
plot(dat$inispeed ~ dat$date) #day might have an effect and will be included as random foactor
plot(dat$inispeed ~ dat$time_min)
mod_time <- lm(dat$inispeed ~ dat$time_min)
abline(mod_time)              # time of day does not really seem to be relevant
#### For initial speed ####
hist(dat$inispeed, breaks = 7)
par(mfrow=c(1,1))
boxplot(dat$inispeed ~ dat$treat1 + dat$treat2) # plot data with boxplots to have a first idea of the data
mod <- lmer(inispeed ~ treat1 + treat2 + treat1:treat2 + time_min + (1|colony) + (1|date), data=dat, REML=FALSE)
mod
summary(mod)
str(mod)
#check model assumptions
par(mfrow=c(2,2))
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
qqnorm(ranef(mod)$colony[,1]) # qq of random effects
qqline(ranef(mod)$colony[,1])
qqnorm(ranef(mod)$date[,1]) # The varince of date is so small that in the qq-plot it collapses to zero --> it is a bug and it can be assumed to be close to zero
qqline(ranef(mod)$date[,1])
boxplot(resid(mod)~dat$date)
#bayesian inference using sim
nsim <- 2000
bsim <- sim(mod, n.sim=nsim)
str(bsim)
apply(bsim@fixef, 2,quantile, prob=c(0.025,0.5,0.975))
#fitted values with 95% credible intervals
newdat<-expand.grid(
treat1=factor(c('control','low','high'), levels=levels(dat$treat1)),
treat2=factor(c('control','virus'),levels=levels(dat$treat2)))
newdat$time_min=mean(dat$time_min)
head(newdat)
Xmat <- model.matrix(~treat1 + treat2 + treat1:treat2 + time_min, data=newdat)      ####second part of model without of random factors
fitmat <- matrix(ncol=nsim, nrow=nrow(newdat))
for(i in 1:nsim) fitmat[,i] <- Xmat%*%bsim@fixef[i,]
newdat$lower <- apply(fitmat, 1, quantile, prob=0.025)
newdat$upper <- apply(fitmat, 1, quantile, prob=0.975)
newdat$fit <- Xmat%*%fixef(mod)
newdat
#create a super nice Graph:
library(extrafont)
fonts()
par(mfrow=c(1,1))
par(oma=c(1,0,0,0))
col <- c("darkolivegreen1", "darkorange3", "darkred")
boxplot(dat$inispeed ~ dat$treat1 + dat$treat2, border = "white",
main = "Initial speed", ylab = "initial movment speed [~cm/s]", xlab = "Treatment",
family = c("mono"), xaxt="n")
axis(1, at = c(1.2,2,2.8,4.2,5,5.8), labels=c("","no virus","","","virus",""))
stripchart(inispeed ~ treat1 + treat2, data = dat,
vertical = TRUE, at = c(1.2,2,2.8,4.2,5,5.8) ,method = "jitter",
pch = c(19,19,19,17,17,17), col = alpha(col, 0.8),
add = TRUE)
#plot posteriors
points(c(1.2,2,2.8,4.2,5,5.8), newdat$fit, pch = 19, cex=1.5)
segments(c(1.2,2,2.8,4.2,5,5.8), newdat$lower, c(1.2,2,2.8,4.2,5,5.8), newdat$upper, lwd = 3)
#add legends
legend(0.3, 13.4, c("control", "low", "high"), col = col, title = "neonicotinoid treatment", pch = c(19) , bty = "o", bg="transparent")
legend(0.7, 13.2, c("","",""), col = col, title = "", pch = c(17) , bty = "n", bg="transparent")
mtext("Real data of the initial speed plotted with the predicted mean and its 95% credible interval for each treatment", side = 1, outer = TRUE)
str(fitmat)
head(fitmat)
#bayesian inference using sim
nsim <- 2000
bsim <- sim(mod, n.sim=nsim)
bsim <- sim(nRep = 2000, model=mod)
load("dragons.RData")
# Load igraph
library(igraph)
# Load igraph
intall.packages("igraph")
# Load igraph
install.packages("igraph")
# Inspect the objects 'genders' and 'ages'
genders
library(igraph)
# Inspect the first few rows of the dataframe 'friends'
head(friends)
# Convert friends dataframe to a matrix
friends.mat <- as.matrix(friends)
x <- -3
if (x >= 0) {
print ("is positive or zero ")
} else {print ("is negative")
}
x <- -3
if (x > 0) {
print ("is positive")
} else
if (x > 0) {
print ("is positive")
} else {if (x == 0) {
print("is zero")
} else { print ("is negative")
}
if (x >= 0) {
print ("is positive or zero ")
} else {print ("is negative")
}
}
if (x > 0) {
print ("is positive")
} else {if (x == 0) {
print("is zero")
} else { print ("is negative")
}
}
x <- 0
if (x >= 0) {
print ("is positive or zero ")
} else {print ("is negative")
}
if (x > 0) {
print ("is positive")
} else {if (x == 0) {
print("is zero")
} else {print ("is negative")
}}
#### for loops ####
# number of characters in a word -->  nchar
nchar("London")
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
# Loop version 1
for (l in linkedin) {
print(l)
}
# Loop version 2
for (i in 1:length(linkedin)) {
print(linkedin[i])
}
while (speed > 30) {
print(paste("Your speed is", speed))
if (speed > 80 ) {
break
} if (speed > 48) {
print("Slow down big time!")
speed <- speed - 11
} else {
print("Slow down!")
speed <- speed - 6
}
#### while loops ####
# as long as the condition is true, the loop will continue running.
# Initialize the speed variable (play around with different speeds)
speed <- 88
while (speed > 30) {
print(paste("Your speed is", speed))
if (speed > 80 ) {
break
}
if (speed > 48) {
print("Slow down big time!")
speed <- speed - 11
} else {
print("Slow down!")
speed <- speed - 6
}
# Break the while loop when speed exceeds 80 (for example you want to keep speeding up if a hurrican is behind you, otherwise keep to tempo limit)
while (speed > 30) {
print(paste("Your speed is", speed))
if (speed > 80 ) {
break
}
if (speed > 48) {
print("Slow down big time!")
speed <- speed - 11
} else {
print("Slow down!")
speed <- speed - 6
}
}
}
while (speed > 30) {
print(paste("Your speed is", speed))
if (speed > 80 ) {
break
}
if (speed > 48) {
print("Slow down big time!")
speed <- speed - 11
} else {
print("Slow down!")
speed <- speed - 6
}
}
x <- c("0", NA, "X")
y <- c(NA, "0", "0")
z <- c("X", NA, "X")
ttt <- rbind (x, y, z)
x <- c("0", NA, "X")
y <- c(NA, "0", "0")
z <- c("X", NA, "X")
ttt <- rbind (x, y, z)
ttt
# define the double for loop to print all the values of the matrix by row and column
for (i in 1:nrow(ttt)) {
for (j in 1:ncol(ttt)) {
print(paste(ttt[i,j]))
}
}
# define the double for loop to print all the values of the matrix by row and column
for (i in 1:nrow(ttt)) {
for (j in 1:ncol(ttt)) {
print(paste("On row", i, "and column", j, "the board contains", ttt[i,j]))
}
}
#### Functions ####
args(sd)
he mean
# are removed (eg. 20 % to remove outliers on each side set trim to 0.1 then on each side 10% of the samples are removed)
args(read.table)
args(read.table())
args(read.table)
pow_two(6)
#e.g. a funciton that calculates the square of a number
# Create a function pow_two()
pow_two <- function(x) {
x*x
}
pow_two(6)
abs(-6)
#some functions do not require an argument eg a function that prints the number of a fair die:
throw_die <- function() {
number <- sample(1:6, size = 1)
number
}
throw_die()
throw_die()
throw_die()
search)
search()
# most functions are part of packages
install.packages("ggvis")
my.df = data.frame(sex, pitch)
pitch = c(233,204,242,130,112,142)
sex = c(rep("female",3),rep("male",3))
my.df = data.frame(sex, pitch)
my.df
xmdl = lm(pitch ~ sex, my.df)
summary(xmdl)
#p value gives probability that the obtained data is collected if the null hypothesis (sex has no effect on pitch) is true...
#Coefficient table
# as we only had one fixe effect p value for sexmale is the same as the overall effect
# Estimate intercept:
mean(my.df[my.df$sex=="female",]$pitch)
age = c(14,23,35,48,52,67)
pitch = c(252,244,240,233,212,204)
my.df = data.frame(age,pitch)
xmdl = lm(pitch ~ age, my.df)
summary(xmdl)
# Look at coefficient again:
# The intercept now is 267.08 which is the predicted pitch value for people with age 0
# age: the estimate readS: for every increase of age by 1 the voice pitch is decreased by 0.9099
plot(xmld)
# Look at coefficient again:
# The intercept now is 267.08 which is the predicted pitch value for people with age 0
# age: the estimate readS: for every increase of age by 1 the voice pitch is decreased by 0.9099
plot(xmdl)
# Look at coefficient again:
# The intercept now is 267.08 which is the predicted pitch value for people with age 0
# age: the estimate readS: for every increase of age by 1 the voice pitch is decreased by 0.9099
plot(my_df$pitch ~ my_df$age)
# Look at coefficient again:
# The intercept now is 267.08 which is the predicted pitch value for people with age 0
# age: the estimate readS: for every increase of age by 1 the voice pitch is decreased by 0.9099
plot(my.df$pitch ~ my.df$age)
abline(xmdl)
# meaning full and meaningless intercepts
# create a new variable that centers the data (mean = 0)
my.df$age.c = my.df$age - mean(my.df$age)
xmdl = lm(pitch ~ age.c, my.df)
summary(xmdl)
mean(my.df$age.c)
mean(my.df$age)
mean(my.df$age.c)
# Assumptions:
# A model has some assumptions and thus , there are conditions that need to be satisfied in order for the liner model to be meaningful
# Linearity.
# to check for that look at the residual plot (residuals =  the amount each samples varries from the expeced value of the model)
plot(fitted(xmdl),residuals(xmdl))
abline(0)
line(x=o)
line(x=0)
abline(a=0, b=0)
plot(rnorm(100),rnorm(100))
# if any of the assumptions are violated consider transforming the data (eg. logtransforming of response or squaring explanatory variable)
# (4)	Normality	of	residuals (Least important)
hist(residuals(xmdl))
qqnorm(residuals(xmdl))
#(5)	Absence	of	influential	data	points
# influental datapoints can drasticly change the interpretation of data and thus should be aressed
# use dfbeta()
dfbeta(xmdl)
#read data from server
politeness=
read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
head(politeness)
which(is.na(politeness$frequency))
which(!complete.cases(politeness))
boxplot(frequency ~ attitude*gender,
col=c("white","lightgray"),politeness)
summary(politeness.model)
#start with first model
politeness.model = lmer(frequency ~ attitude +
(1|subject) + (1|scenario), data=politeness)
library(lme4)
#start with first model
politeness.model = lmer(frequency ~ attitude +
(1|subject) + (1|scenario), data=politeness)
summary(politeness.model)
summary(politeness.model)
politeness.model = lmer(frequency ~ attitude +
gender + (1|subject) +
(1|scenario), data=politeness)
summary(politeness.model)
politeness.null = lmer(frequency ~ gender +
(1|subject) + (1|scenario), data=politeness,
REML=FALSE)
# REML = FALSE is necessary to do when models are compared using likelyhood ratio tests
politeness.model = lmer(frequency ~ attitude +
gender + (1|subject) + (1|scenario),
data=politeness, REML=FALSE)
anova(politeness.null, politeness.model)
# super crucial: random slopes and random interceps
coef(politeness.model)
politeness.model = lmer(frequency ~ attitude +
gender + (1+attitude|subject) +
(1+attitude|scenario),
data=politeness,
REML=FALSE)
# super crucial: random slopes and random interceps
coef(politeness.model)
anova(politeness.null,politeness.model)
citation
citation()
citation()
RStudio.Version()
citation("lme4")
# Makes a table of observations -- similar to first example in chisq.test
M <- as.table(rbind(c(76, 32, 46), c(48,23,47), c(45,34,78)))
M
dimnames(M) <- list(sex=c("Male","Female","Juv"),loc=c("Lower","Middle","Upper"))
M
# Shows post-hoc pairwise comparisons using fdr method
chisq.post.hoc(M)
?chisq.post.hoc
??chisq.post.hoc
install.packages("fifer")
library(fifer)
install.packages("fifer")
install.packages("RVAideMemoire")
library(RVAideMemoire)
help(chisq.multcomp)
chisq.multcomp(M, p.method = "none")
10^log10(7)
10^7.95/5
?formatC
numb <- c(17825019)
formatC(numb, format = "e", digits = 2)
formatC(numb, format = "E", digits = 2)
formatC(numb, format = "f", digits = 2)
formatC(numb, format = "g", digits = 2)
formatC(numb, format = "E", digits = 2)
formatC(numb, format = "fg", digits = 2)
log10(17825019)
10/10
10^10/60
log10(166666667)
citation("survival")
citation("lme4")
citation("dunn.test")
citation("arm")
citation("survival") # contains kalan meier plot function
citation("dunn.test") #contains the dunn test
