mean(control1$adults)
sd(control1$adults, na.rm = TRUE)
mean(low1$adults)
sd(low1$adults, na.rm = TRUE)
mean(high1$adults)
sd(high1$adults, na.rm = TRUE)
meadian(control1$adults)
median(control1$adults)
median(control1$adults)
meadian(control1$adults)
median(control1$adults)
median(low1$adults)
median(high1$adults)
#Y2 adults
mod <- lm(adults ~ treatment_1, data=final)
par(mfrow=c(2,2))
plot(mod)
acf(resid(mod))
summary(mod)
anova(mod)
#Mean and SD values
mean(control$adults)
sd(control$adults, na.rm = TRUE)
mean(low$adults)
sd(low$adults, na.rm = TRUE)
a1 <- aov(mod)
TukeyHSD(a1)
mean(high$adults)
sd(high$adults, na.rm = TRUE)
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers" )
#nicer boxplot
par(mfrow=c(1,2))
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers" )
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers", ylim=c(0, 26))
text(c(1,2,3), 25, labels = c("a", "a", "a"), font = 2)
#nicer boxplot
par(mfrow=c(1,2))
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers", ylim=c(0, 26))
text(c(1,2,3), 25, labels = c("a", "a", "a"), font = 2)
mtext('A', side=3, line=1.5, at=0, cex = 1.5, font = 2)
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers")
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers", ylim=c(, 420) )
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers", ylim=c(140, 420) )
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers", ylim=c(120, 420) )
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers", ylim=c(0, 26))
text(c(1,2,3), 25, labels = c("a", "a", "a"), font = 2)
mtext('A', side=3, line=1.5, at=0, cex = 1.5, font = 2)
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers", ylim=c(120, 420) )
text(c(1,2,3), 420, labels = c("a", "b", "b"), font = 2)
text(c(1,2,3), 400, labels = c("a", "b", "b"), font = 2)
text(c(1,2,3), 410, labels = c("a", "b", "b"), font = 2)
boxplot(final1$adults ~ final1$treatment_1, main = "number of workers year 1", xlab = "treatments", ylab = "nr. of workers", ylim=c(0, 26))
text(c(1,2,3), 25, labels = c("a", "a", "a"), font = 2)
mtext('A', side=3, line=1.5, at=0, cex = 1.5, font = 2)
boxplot(final$adults ~ final$treatment_1, main = "number of workers year 2", xlab = "treatments", ylab = "nr. of workers", ylim=c(120, 420) )
text(c(1,2,3), 410, labels = c("a", "b", "b"), font = 2)
mtext('B', side=3, line=1.5, at=0, cex = 1.5, font = 2)
modc <- lm(workforce ~ treatment_1, data=final)
modc
summary(modc)
Anova(modc)
final$treatment_1 <- relevel(final$treatment_1, ref ="low")
modc <- lm(adults ~ treatment_1, data=final)
summary(modc)
final$treatment_1 <- relevel(final$treatment_1, ref ="control")
#check the model assumptions
par(mfrow=c(2,2))
plot(modc)
mod <- lm(aduÃ¶ts ~ treatment_1, data = final)
mod <- lm(adults ~ treatment_1, data = final)
mod
summary(mod)
anova(mod)
a1 <- aov(mod)
TukeyHSD(a1)
#relevel to see pairwais differences (not correct)
final$treatment_1 <- relevel(final$treatment_1, ref ="low")
modc <- lm(adults ~ treatment_1, data=final)
summary(modc)
final$treatment_1 <- relevel(final$treatment_1, ref ="control")
mod <- lm(adults ~ treatment_1, data = final)
mod
summary(mod)
anova(mod)
a1 <- aov(mod) #post hoc test to see pairwise differences
TukeyHSD(a1)
#check the model assumptions
par(mfrow=c(2,2))
plot(modc)
acf(resid(modc))
final$treat21 <- factor(paste(final$treatment_2, final$treatment_1))
final$treat21
plot(resid(modc)~final$treatment_1)
#check the model assumptions
par(mfrow=c(2,2))
plot(mod)
acf(resid(mod))
final$treat21 <- factor(paste(final$treatment_2, final$treatment_1))
final$treat21
plot(resid(mod)~final$treatment_1)
hist(final$adults)
shapiro.test((final$adults))
shapiro.test(final$adults)
#bayesian inference using sim
# add predicted values (group means)
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
#bayesian inference using sim
# add predicted values (group means), we did not have predicted values
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
newdatc$fit <- predict(mod, newdata=newdatc)
nsim <- 2000
bsimc <- sim(mod, n.sim=nsim)
bsimc <- sim(mod, n.sim=nsim)
#bayesian inference using sim
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
newdatc$fit <- predict(mod, newdata=newdatc)
nsim <- 2000
bsimc <- sim(mod, n.sim=nsim)
str(bsimc)
bsimc <- sim(modc, n.sim=nsim)
bsimc <- sim(mod, n.sim=2000)
?sim
bsimc <- sim(mod, n.sims=nsim)
n.sim
nsim
bsimc <- sim(mod, n.sim=nsim)
bsimc <- sim(mod, nRep=nsim)
bsimc <- sim(2000,mod)
bsimc <- sim(2000, mod, n=nsim)
bsimc <- sim(mod, n=nsim)
bsimc <- sim(mod, n=nsim)
#bayesian inference using sim
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final$treatment_1)))
newdatc$fit <- predict(mod, newdata=newdatc)
nsim <- 2000
bsimc <- sim(mod, n=nsim)
bsimc <- sim(mod, n.sim=nsim)
#bayesian inference using sim
modc <- mod
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final1$treatment_1)))
newdatc$fit <- predict(modc, newdata=newdatc)
nsim <- 2000
bsimc <- sim(modc, n.sim=nsim)
str(bsimc)
fitmat <- matrix(ncol=nsim, nrow=nrow(newdatc))
Xmat <- model.matrix(formula(modc)[c(1,3)], data=newdatc)
for(i in 1:nsim) fitmat[,i] <- Xmat%*%bsimc@coef[i,]
bsimc <- sim(nRep=2000, modc)
bsimc <- sim(modc)
bsimc <- sim(modc, times=2000)
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final1$treatment_1)))
newdatc$fit <- predict(modc, newdata=newdatc)
nsim <- 2000
bsimc <- sim(modc, n.sim=nsim)
bsimc <- sim(modc, n.sim=nsim)
summary(final1$treatment_1)
summary(final1$treatment_2)
#exclude failure queens
final1 <- subset(final1, id!= "C9C" &  id!= "H4C" & id!="H11V")
final1$treatment_1 <- as.factor(final1$treatment_1)
final1$treatment_1 <- factor(final1$treatment_1, levels = c("control", "low", "high"))
final1$treatment_2 <- as.factor(final1$treatment_2)
final1$workforce <- final1$pupae+final1$adults
final1$workforce
mean(final1$workforce)
boxplot(workforce ~ treatment_1, data=final1)
boxplot(adults ~ treatment_1, data=final1)
boxplot(workforce ~ treatment_1, data=final1)
boxplot(adults ~ treatment_1, data=final1)
modc <- lm(workforce ~ treatment_1, data=final1)
modc
summary(modc)
Anova(modc)
final1$treatment_1 <- relevel(final1$treatment_1, ref ="low")
modc <- lm(adults ~ treatment_1, data=final1)
summary(modc)
final1$treatment_1 <- relevel(final1$treatment_1, ref ="control")
#check the model assumptions
par(mfrow=c(2,2))
plot(modc)
acf(resid(modc))
final1$treat21 <- factor(paste(final1$treatment_2, final1$treatment_1))
final1$treat21
plot(resid(modc)~final1$treatment_1)
newdatc<-expand.grid(
treatment_1=factor(c('control','low','high'), levels=levels(final1$treatment_1)))
newdatc$fit <- predict(modc, newdata=newdatc)
nsim <- 2000
bsimc <- sim(modc, n.sim=nsim)
str(bsimc)
fitmat <- matrix(ncol=nsim, nrow=nrow(newdatc))
Xmat <- model.matrix(formula(modc)[c(1,3)], data=newdatc)
for(i in 1:nsim) fitmat[,i] <- Xmat%*%bsimc@coef[i,]
getwd()
setwd("G:/BIENEN/Personnel/Daniel_Schlaeppi/DS-Bees_new/R/")
library(lme4)
dat <- read.table("speed.txt", header = TRUE)
head(dat)
str(dat)
dat$treat1 <- as.factor(dat$treat1)
dat$treat1 <- factor(dat$treat1, levels = c("control", "low", "high"))
dat$treat2 <- as.factor(dat$treat2)
#transform time into Minutes only
install.packages("chron")
install.packages("chron")
library(chron)
dat$time2 <- times(dat$time)
dat$time_min <- 60 * hours(dat$time2) + minutes(dat$time2)
dat$time_min
plot(dat$inispeed ~ dat$date) #day might have an effect and will be included as random foactor
plot(dat$inispeed ~ dat$time_min)
plot(dat$inispeed ~ dat$date) #day might have an effect and will be included as random foactor
head(dat)
mod_time <- lm(dat$inispeed ~ dat$time_min)
dat$inispeed <- dat$ini_speed
plot(dat$inispeed ~ dat$date) #day might have an effect and will be included as random foactor
plot(dat$inispeed ~ dat$time_min)
mod_time <- lm(dat$inispeed ~ dat$time_min)
abline(mod_time)              # time of day does not really seem to be relevant
#### For initial speed ####
hist(dat$inispeed, breaks = 7)
par(mfrow=c(1,1))
boxplot(dat$inispeed ~ dat$treat1 + dat$treat2) # plot data with boxplots to have a first idea of the data
mod <- lmer(inispeed ~ treat1 + treat2 + treat1:treat2 + time_min + (1|colony) + (1|date), data=dat, REML=FALSE)
mod
summary(mod)
str(mod)
#check model assumptions
par(mfrow=c(2,2))
scatter.smooth(fitted(mod),resid(mod)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(mod), main="normal QQ-plot, residuals")
qqline(resid(mod))  # qq of residuals
scatter.smooth(fitted(mod), sqrt(abs(resid(mod))))  # homogeneity of variance
qqnorm(ranef(mod)$colony[,1]) # qq of random effects
qqline(ranef(mod)$colony[,1])
qqnorm(ranef(mod)$date[,1]) # The varince of date is so small that in the qq-plot it collapses to zero --> it is a bug and it can be assumed to be close to zero
qqline(ranef(mod)$date[,1])
boxplot(resid(mod)~dat$date)
#bayesian inference using sim
nsim <- 2000
bsim <- sim(mod, n.sim=nsim)
str(bsim)
apply(bsim@fixef, 2,quantile, prob=c(0.025,0.5,0.975))
#fitted values with 95% credible intervals
newdat<-expand.grid(
treat1=factor(c('control','low','high'), levels=levels(dat$treat1)),
treat2=factor(c('control','virus'),levels=levels(dat$treat2)))
newdat$time_min=mean(dat$time_min)
head(newdat)
Xmat <- model.matrix(~treat1 + treat2 + treat1:treat2 + time_min, data=newdat)      ####second part of model without of random factors
fitmat <- matrix(ncol=nsim, nrow=nrow(newdat))
for(i in 1:nsim) fitmat[,i] <- Xmat%*%bsim@fixef[i,]
newdat$lower <- apply(fitmat, 1, quantile, prob=0.025)
newdat$upper <- apply(fitmat, 1, quantile, prob=0.975)
newdat$fit <- Xmat%*%fixef(mod)
newdat
#create a super nice Graph:
library(extrafont)
fonts()
par(mfrow=c(1,1))
par(oma=c(1,0,0,0))
col <- c("darkolivegreen1", "darkorange3", "darkred")
boxplot(dat$inispeed ~ dat$treat1 + dat$treat2, border = "white",
main = "Initial speed", ylab = "initial movment speed [~cm/s]", xlab = "Treatment",
family = c("mono"), xaxt="n")
axis(1, at = c(1.2,2,2.8,4.2,5,5.8), labels=c("","no virus","","","virus",""))
stripchart(inispeed ~ treat1 + treat2, data = dat,
vertical = TRUE, at = c(1.2,2,2.8,4.2,5,5.8) ,method = "jitter",
pch = c(19,19,19,17,17,17), col = alpha(col, 0.8),
add = TRUE)
#plot posteriors
points(c(1.2,2,2.8,4.2,5,5.8), newdat$fit, pch = 19, cex=1.5)
segments(c(1.2,2,2.8,4.2,5,5.8), newdat$lower, c(1.2,2,2.8,4.2,5,5.8), newdat$upper, lwd = 3)
#add legends
legend(0.3, 13.4, c("control", "low", "high"), col = col, title = "neonicotinoid treatment", pch = c(19) , bty = "o", bg="transparent")
legend(0.7, 13.2, c("","",""), col = col, title = "", pch = c(17) , bty = "n", bg="transparent")
mtext("Real data of the initial speed plotted with the predicted mean and its 95% credible interval for each treatment", side = 1, outer = TRUE)
str(fitmat)
head(fitmat)
#bayesian inference using sim
nsim <- 2000
bsim <- sim(mod, n.sim=nsim)
bsim <- sim(nRep = 2000, model=mod)
load("dragons.RData")
library(lme4)
library(lmerTest)
library(car)
library(emmeans)
setwd("G:/BIENEN/Personnel/Daniel_Schlaeppi/DS-Bees_new/R/iUSSI")
dat <- read.table("ANV_Neonic_in_workers_and_queens.txt", header = TRUE)
head(dat)
dat$treatment <- as.factor(dat$treatment)
dat$TREATMENT_LARS <- as.factor(dat$TREATMENT_LARS)
# relevel treatment 1 to control low high
levels(dat$treatment_1)
dat$treatment_1 <- factor(dat$treatment_1, levels(dat$treatment_1)[c(1,3,2)])
#all data used -> virus treatments stay included
#only samples that were tested and from the colonies that survived until the end of the experiment
dat <- subset(dat, final == "y")
table(dat$treatment_1)
dat <- subset(dat, sample != "blank")  #exclude blanks and drop the sample level so it does not appear anymore
dat$sample <- droplevels(dat)$sample
table(dat$sample)
#dry weight makes most sense!
boxplot(dat$conc_T_dry ~ dat$sample*dat$treatment_1)
boxplot(dat$conc_C_dry ~ dat$sample*dat$treatment_1)
workers <- subset(dat, sample == "worker")
queens <- subset(dat, sample == "queen")
attach(dat)
#thiamethoxam
model <- lmer(conc_T_dry ~ sample + treatment_1 + (1|id), data = dat)
summary(model)
#thiamethoxam
model <- lmer(conc_T_dry ~ sample + treatment_1 + (1|id), data = dat)
summary(model)
anova(model)
plot(model)
scatter.smooth(fitted(model),resid(model)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(model), main="normal QQ-plot, residuals")
qqline(resid(model))  # qq of residuals
scatter.smooth(fitted(model), sqrt(abs(resid(model))))  # homogeneity of variance
marginal <- lsmeans(model,  ~ sample + treatment_1, adjust="tukey")
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="tukey")
CLD
plot(model)
scatter.smooth(fitted(model),resid(model)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(model), main="normal QQ-plot, residuals")
qqline(resid(model))  # qq of residuals
scatter.smooth(fitted(model), sqrt(abs(resid(model))))  # homogeneity of variance
marginal <- lsmeans(model,  ~ sample + treatment_1, adjust="bonferroni")
CLD = cld(marginal,
alpha=0.05,
Letters=letters,
adjust="bonferroni")
CLD
interaction_model <- lmer(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced)
setwd("G:/BIENEN/Personnel/Daniel_Schlaeppi/DS-Bees_new/R/LSUR")
library(ez)
install.packages("ez")
library(ggplot2)
library(nlme)
library(pastecs)
install.packages("pastecs")
library(pastecs)
library(reshape)
install.packages("reshape")
install.packages ("WRS", repos="http://R-Forge.R-project.org")
library(WRS)
library(WRS)
install.packages ("WRS", repos="http://R-Forge.R-project.org")
install.packages ("WRS")
library(WRS)
install.packages("WRS2")
library(WRS2)
dateData<-read.delim("LooksOrPersonality.dat", header = TRUE)
speedData<-melt(dateData, id = c("participant","gender"),
measured = c("att_high", "av_high", "ug_high", "att_some", "av_some", "ug_some", "att_none", "av_none", "ug_none"))
names(speedData)<-c("participant", "gender", "groups", "dateRating")
dateData<-read.delim("LooksOrPersonality.dat", header = TRUE)
speedData<-melt(dateData, id = c("participant","gender"),
measured = c("att_high", "av_high", "ug_high", "att_some", "av_some", "ug_some", "att_none", "av_none", "ug_none"))
library(reshape)
speedData<-melt(dateData, id = c("participant","gender"),
measured = c("att_high", "av_high", "ug_high", "att_some", "av_some", "ug_some", "att_none", "av_none", "ug_none"))
names(speedData)<-c("participant", "gender", "groups", "dateRating")
speedData$personality<-gl(3, 60, labels = c("Charismatic", "Average", "Dullard"))
dateBoxplot <- ggplot(speedData, aes(looks, dateRating, colour = personality))
dateBoxplot + geom_boxplot() + labs(x = "Attractiveness", y = "Mean Rating of Date", colour = "Charisma") + facet_wrap(~gender)
imageFile <- paste(imageDirectory,"14 Speed Date Boxplot.png",sep="/")
speedData$personality<-gl(3, 60, labels = c("Charismatic", "Average", "Dullard"))
speedData$looks<-gl(3,20, 180, labels = c("Attractive", "Average", "Ugly"))
dateBoxplot <- ggplot(speedData, aes(looks, dateRating, colour = personality))
dateBoxplot + geom_boxplot() + labs(x = "Attractiveness", y = "Mean Rating of Date", colour = "Charisma") + facet_wrap(~gender)
imageFile <- paste(imageDirectory,"14 Speed Date Boxplot.png",sep="/")
ggsave(file = imageFile)
by(speedData$dateRating, list(speedData$looks, speedData$personality, speedData$gender), stat.desc, basic = FALSE)
#setting contrasts
AttractivevsAv<-c(1, 0, 0)
UglyvsAv<-c(0, 0, 1)
contrasts(speedData$looks)<-cbind(AttractivevsAv, UglyvsAv)
HighvsAv<-c(1, 0, 0)
DullvsAv<-c(0, 0, 1)
contrasts(speedData$personality)<-cbind(HighvsAv, DullvsAv)
speedData$looks
speedData$personality
baseline <- lme(dateRating ~ 1, random = ~1|participant/looks/personality, data = speedData, method = "ML")
#or the shorter verision with the funktion "update()
looksM <- update(baseline, .~. +looks)
looks_gender<-update(genderM, .~. + looks:gender)
personality_gender<-update(looks_gender, .~. + personality:gender)
looks_personality<-update(personality_gender, .~. + looks:personality)
genderM<-update(personalityM, .~. + gender)
personalityM<-update(looksM, .~. + personality)
genderM<-update(personalityM, .~. + gender)
looks_gender<-update(genderM, .~. + looks:gender)
personality_gender<-update(looks_gender, .~. + personality:gender)
looks_personality<-update(personality_gender, .~. + looks:personality)
speedDateModel<-update(looks_personality, .~. + looks:personality:gender)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender, personality_ gender, looks_personality, speedDateModel)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender, personality_ gender, looks_personality, speedDateModel)
speedData$looks<-gl(3, 20, 180, labels = c("Attractive", "Average", "Ugly"))
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender, personality_ gender, looks_personality, speedDateModel)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender, personality_ gender, looks_personality, speedDateModel)
baseline <- lme(dateRating ~ 1, random = ~1|participant/looks/personality, data = speedData, method = "ML")
looksM<-lme(dateRating ~ looks, random = ~1|participant/looks/personality, data = speedData, method = "ML")
#or the shorter verision with the funktion "update()
looksM <- update(baseline, .~. +looks)
personalityM<-update(looksM, .~. + personality)
genderM<-update(personalityM, .~. + gender)
looks_gender<-update(genderM, .~. + looks:gender)
personality_gender<-update(looks_gender, .~. + personality:gender)
looks_personality<-update(personality_gender, .~. + looks:personality)
speedDateModel<-update(looks_personality, .~. + looks:personality:gender)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender, personality_ gender, looks_personality, speedDateModel)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
aov(baseline, looksM, personalityM, genderM, looks_gender, personality_ gender, looks_personality, speedDateModel)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender, personality_ gender, looks_personality, speedDateModel)
?anova
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender,)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender, personality_ gender, looks_personality)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender, personality_ gender)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender, personality_gender)
#compare the different models that were created by adding one factor or interaction at a time (always keeping the previus model)
anova(baseline, looksM, personalityM, genderM, looks_gender, personality_gender, looks_personality, speedDateModel)
summary(speedDateModel)
# use ggplot to draw a graph for means of the main effect gender
boxplot(speedData$dateRating ~ speedData$gender)
hist(mean(speedData$dateRating) ~ gender)
model <- lme(conc_T_dry ~ sample + treatment_1 + (1|id), data = dat_reduced)
dat_reduced <- subset(dat, treatment_1 != "control")
model <- lme(conc_T_dry ~ sample + treatment_1 + (1|id), data = dat_reduced)
#ev. try lme instead of lmer
interaction_model <- <- lmer(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced)
#ev. try lme instead of lmer
interaction_model <- lmer(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced)
plot(inetraction_model)
plot(interaction_model)
scatter.smooth(fitted(model),resid(model)); abline(h=0, lty=2)  # residuals vs. fitted
plot(interaction_model)
scatter.smooth(fitted(interaction_model),resid(interaction_model)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(interaction_model), main="normal QQ-plot, residuals")
qqline(resid(interaction_model))  # qq of residuals
scatter.smooth(fitted(interaction_model), sqrt(abs(resid(interaction_model))))  # homogeneity of variance
interaction_model <- lme(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced)
?lme
interaction_model <- lme(conc_T_dry ~ sample + treatment_1 + sample*treatment_1, random =  ~ 1|id, data = dat_reduced)
plot(interaction_model)
scatter.smooth(fitted(interaction_model),resid(interaction_model)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(interaction_model), main="normal QQ-plot, residuals")
qqline(resid(interaction_model))  # qq of residuals
scatter.smooth(fitted(interaction_model), sqrt(abs(resid(interaction_model))))  # homogeneity of variance
#ev. try lme instead of lmer
interaction_model <- lmer(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced)
interaction_model <- lme(conc_T_dry ~ sample + treatment_1 + sample*treatment_1, random =  ~ 1|id, data = dat_reduced)
#ev. try lme instead of lmer
interaction_model <- glmer(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced)
#ev. try lme instead of lmer
interaction_model <- glmer(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced, family = "gaussian")
plot(interaction_model)
scatter.smooth(fitted(interaction_model),resid(interaction_model)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(interaction_model), main="normal QQ-plot, residuals")
qqline(resid(interaction_model))  # qq of residuals
scatter.smooth(fitted(interaction_model), sqrt(abs(resid(interaction_model))))  # homogeneity of variance
#ev. try lme instead of lmer
interaction_model <- glmer(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced, family = "binomial")
#ev. try lme instead of lmer
interaction_model <- glmer(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced, family = "poisson")
interaction_model <- lme(conc_T_dry ~ sample + treatment_1 + sample*treatment_1, random =  ~ 1|id, data = dat_reduced)
#ev. try lme instead of lmer
interaction_model <- glmer(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced, family = "poisson")
plot(interaction_model)
scatter.smooth(fitted(interaction_model),resid(interaction_model)); abline(h=0, lty=2)  # residuals vs. fitted
title("Tukey-Anscombe Plot")
qqnorm(resid(interaction_model), main="normal QQ-plot, residuals")
qqline(resid(interaction_model))  # qq of residuals
scatter.smooth(fitted(interaction_model), sqrt(abs(resid(interaction_model))))  # homogeneity of variance
summary(interaction_model)
anova(interaction_model)
shapiro.test(dat_reduced$conc_C_dry)
hist(dat_reduced$conc_C_dry)
plot(dat_reduced$conc_C_dry)
interaction_model <- glmer(conc_T_dry ~ sample + treatment_1 + sample*treatment_1 + (1|id), data = dat_reduced, family = "poisson")
warnings()
