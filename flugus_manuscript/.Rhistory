contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
cat(rbind_syntax, "\n)")
return(contrast_matrix)
}, error = function(e) {
# Print a user-friendly error message
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
}
copy_paste_contrast_matrix()
copy_paste_contrast_matrix()
copy_paste_contrast_matrix <- function() {
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
if (!requireNamespace("crayon", quietly = TRUE)) {
install.packages("crayon")
}
library(crayon)
library(clipr)
tryCatch({
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
cat(rbind_syntax, "\n")
return(contrast_matrix)
}, error = function(e) {
# Print a user-friendly error message
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
}
copy_paste_contrast_matrix()
copy_paste_contrast_matrix()
copy_paste_contrast_matrix()
copy_paste_contrast_matrix()
rm(list=ls())
copy_paste_contrast_matrix <- function() {
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
if (!requireNamespace("crayon", quietly = TRUE)) {
install.packages("crayon")
}
library(crayon)
library(clipr)
tryCatch({
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
# output
cat(rbind_syntax, "\n")
return(contrast_matrix)
}, error = function(e) {
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
}
copy_paste_contrast_matrix()
copy_paste_contrast_matrix <- function() {
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
if (!requireNamespace("crayon", quietly = TRUE)) {
install.packages("crayon")
}
library(crayon)
library(clipr)
tryCatch({
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
# output
cat(rbind_syntax, "\n")
return(contrast_matrix)
contrast_matrix <<- contrast_matrix
}, error = function(e) {
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
}
copy_paste_contrast_matrix()
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
# output
cat(rbind_syntax, "\n")
return(contrast_matrix)
contrast_matrix <<- contrast_matrix
rm(list=ls())
copy_paste_contrast_matrix <- function() {
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
if (!requireNamespace("crayon", quietly = TRUE)) {
install.packages("crayon")
}
library(crayon)
library(clipr)
tryCatch({
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
# output
cat(rbind_syntax, "\n")
return(contrast_matrix)
assign("contrast_matrix", contrast_matrix, envir = .GlobalEnv)
}, error = function(e) {
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
}
copy_paste_contrast_matrix()
copy_paste_contrast_matrix <- function() {
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
if (!requireNamespace("crayon", quietly = TRUE)) {
install.packages("crayon")
}
library(crayon)
library(clipr)
tryCatch({
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
# output
cat(rbind_syntax, "\n")
return(contrast_matrix)
}, error = function(e) {
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
if (!is.null(contrast_matrix)) {
assign("contrast_matrix", contrast_matrix, envir = .GlobalEnv)
}
}
copy_paste_contrast_matrix()
contrast_matrix
copy_paste_contrast_matrix <- function() {
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
if (!requireNamespace("crayon", quietly = TRUE)) {
install.packages("crayon")
}
library(crayon)
library(clipr)
tryCatch({
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
# output
cat(rbind_syntax, "\n")
return(contrast_matrix)
}, error = function(e) {
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
if (!is.null(contrast_matrix)) {
assign("contrast_matrix", contrast_matrix, envir = .GlobalEnv)
}
}
copy_paste_contrast_matrix()
contrast_matrix
rm(list=ls())
copy_paste_contrast_matrix <- function() {
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
if (!requireNamespace("crayon", quietly = TRUE)) {
install.packages("crayon")
}
library(crayon)
library(clipr)
tryCatch({
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
# output
cat(rbind_syntax, "\n")
return(contrast_matrix)
}, error = function(e) {
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
if (!is.null(contrast_matrix)) {
assign("contrast_matrix", contrast_matrix, envir = .GlobalEnv)
}
}
copy_paste_contrast_matrix()
contrast_matrix
copy_paste_contrast_matrix()
rm(list=ls())
copy_paste_contrast_matrix <- function() {
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
if (!requireNamespace("crayon", quietly = TRUE)) {
install.packages("crayon")
}
library(crayon)
library(clipr)
tryCatch({
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
# output
cat(rbind_syntax, "\n")
return(contrast_matrix)
}, error = function(e) {
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
if (!is.null(contrast_matrix)) {
assign("contrast_matrix", contrast_matrix, envir = .GlobalEnv)
}
}
copy_paste_contrast_matrix()
contrast_matrix
copy_paste_contrast_matrix <- function() {
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
if (!requireNamespace("crayon", quietly = TRUE)) {
install.packages("crayon")
}
library(crayon)
library(clipr)
tryCatch({
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
# output
cat(rbind_syntax, "\n")
return(contrast_matrix)
if (!is.null(contrast_matrix)) {
assign("contrast_matrix", contrast_matrix, envir = .GlobalEnv)
}
}, error = function(e) {
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
}
copy_paste_contrast_matrix()
copy_paste_contrast_matrix()
copy_paste_contrast_matrix <- function() {
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
if (!requireNamespace("crayon", quietly = TRUE)) {
install.packages("crayon")
}
library(crayon)
library(clipr)
tryCatch({
contrast_matrix <- read_clip_tbl(header = FALSE, row.names = NULL)
if (ncol(contrast_matrix) < 2) {
stop("The clipboard data does not have enough columns.")
}
row_names <- contrast_matrix[, 1] # Extract first column as row names
contrast_matrix <- as.matrix(sapply(contrast_matrix[, -1], as.numeric)) # Convert rest to a numeric matrix
row.names(contrast_matrix) <- row_names # reassign row names and reset col names
colnames(contrast_matrix) <- paste0("[,", seq_len(ncol(contrast_matrix)), "]")
# Generate rbind syntax
row_names_rbind_syntax <- rownames(contrast_matrix)
formatted_rows <- vector("character", nrow(contrast_matrix))
for (i in seq_len(nrow(contrast_matrix))) {
formatted_rows[i] <- paste0("\"", row_names_rbind_syntax[i], "\"=c(", paste(contrast_matrix[i, ], collapse = ","), ")")
}
formatted_matrix <- paste(formatted_rows, collapse = ",\n")
rbind_syntax <- paste("contrast_matrix <- rbind(\n", formatted_matrix, "\n)", sep = "")
# output
if (!is.null(contrast_matrix)) {
assign("contrast_matrix", contrast_matrix, envir = .GlobalEnv)
}
cat(rbind_syntax, "\n")
return(contrast_matrix)
}, error = function(e) {
cat(red("Error:\n"))
cat("Unable to create the contrast matrix. Please ensure the clipboard data is in the correct format.\n")
cat("Before running the function, make sure to: \n Highlight & copy your contrast matrix from Excel to the clipboard including row names but no column names.\n")
cat("Details: ", e$message, "\n")
return(NULL)
})
}
copy_paste_contrast_matrix()
contrast_matrix
rm(list=ls())
source("/Users/gismo/Documents/GitHub/vital_rscripts_git/copy_paste_contrast_matrix.R")
posthocs$test$coefficients["DeltaControl"]
rm(list=ls())
# load required libraries and functions:
{
library(dplyr) #contains pipe operator
library(ggplot2)
library(broom) #contains tidy()
library(viridis)
library(lme4)
library(car) # Anova()
library(multcomp) # contains cld
library(emmeans) # contains emmeans()
library(coxme)
library(survival)
library(survminer) # used in the analysis of the survival curves incl ggsurvplot
library(scales)
library(clipr)
}
source("/Users/gismo/Documents/GitHub/vital_rscripts_git/copy_paste_contrast_matrix.R")
# working directory
directory <- "/Users/gismo/Documents/GitHub/vital_rscripts_git/flugus_manuscript"
setwd(directory)
# load data
exp1_data <- read.csv('exp1_flupy_susceptibility_test.csv') #Experiment 1: flupy only survival data
exp1_data$concentration <- factor(exp1_data$concentration)
flugus_data <- read.csv('exp2_flugus_interaction_survival.csv') #Experiment 2: flupy fungus co-exposure survival data
flugus_data$fungus <- factor(flugus_data$fungus, levels=c("S","M"))
supl_data <- read.table("supplexp_food_uptake.txt", header = TRUE) # Supplementary Experiment: food uptake data
#### 2. FPF susceptibility test ####
#### 2.1 Stats ####
null_model <- coxme ( Surv (time = survival, event = censor) ~ 1                 + ( 1 | petri_dish), data = exp1_data)
full_model <- coxme ( Surv (time = survival, event = censor) ~ 1 + concentration + ( 1 | petri_dish), data = exp1_data)
anova(null_model   ,  full_model )
summary(full_model)
summary(glht( full_model, linfct = mcp (concentration="Tukey")), test=adjusted("BH"))
letters <- cld(summary(glht( full_model, linfct = mcp (concentration="Tukey")), test=adjusted("BH")))
summary(full_model)
copy_paste_contrast_matrix()
posthocs_Tukey_1 <- summary(glht( full_model, linfct = mcp (concentration="Tukey")), test=adjusted("BH"))
posthocs_Tukey_1
posthocs_Tukey_2 <- summary(glht(full_model, linfct = contrast_matrix_Tukey),test=adjusted("BH"))
copy_paste_contrast_matrix()
summary(glht(full_model, linfct = contrast_matrix),test=adjusted("BH"))
copy_paste_contrast_matrix()
posthocs_Tukey_2 <- summary(glht(full_model,            linfct = contrast_matrix)      ,test=adjusted("BH"))
posthocs_Tukey_2
posthocs_Tukey_1
cld(posthocs_Tukey_2)
posthocs_Tukey_2
letters <- cld(posthocs_Tukey_1)
letters
letters <- cld(posthocs_Tukey_2)
