vertex.label.cex = 0.35,
main = "")
legend("topright",                          # Position of the legend
legend = c("Forager", "Nurse", "Treated"),       # The labels for the tasks
fill = c(color_palette, "red"),                 # Colors corresponding to each task
border = "black",                     # Border color for the legend boxes
#title = "Ant Task",                   # Title of the legend
cex = 0.8,                            # Text size
bty = "n")                            # No box around the legend
# # Create a graph from the edge list
# G <- graph_from_data_frame(edge_data, directed = FALSE)
# plot(G)
# # Plot the graph
# plot(
#   G,
#   layout = layout_with_fr(G),      # Use the Kamada-Kawai layout for better flow
#   vertex.size = 8,                 # Set vertex size
#   vertex.label.cex = 0.8,          # Adjust label size
#   vertex.label.color = "black",    # Label color
#   vertex.color = "lightblue",      # Vertex color
#   edge.color = "gray",             # Edge color
#   edge.width = 1                   # Edge thickness
# )
#### infected / non-infected transmission sequential ####
for (i in seq_len(nrow(ants))) { # i <- 14
ant <- ants[i, ]
#  # treated ants get an infection time just before the first interaction
# if (ant$infector == 666) {
#   ants$infection_time[i] <- min(trophy_data$start)-1
# } else {
# treated ants get an infection time just before the first interaction
if (ant$IsTreated == TRUE) {
ants$infection_time[i] <- min(trophy_data$start)-1
ants$infector[i] <- NA
} else {
# untreated ants: find first the row in edge_data where this ant was involved and identify the infector
transmission_info <- edge_data[edge_data$to == ant$tag | edge_data$from == ant$tag, ]
if (nrow(transmission_info) > 0) {
if (transmission_info$to[1] == ant$tag) {
infector <- transmission_info$from[1]
} else {
infector <- transmission_info$to[1]
}
# matching the interaction with the trophy dataset to extract transmission time
matching_interactions <- trophy_data[
(trophy_data$Tag1 == transmission_info$from[1] & trophy_data$Tag2 == transmission_info$to[1]) |
(trophy_data$Tag1 == transmission_info$to[1] & trophy_data$Tag2 == transmission_info$from[1]),]
earliest_interaction_time <- ifelse(nrow(matching_interactions) > 0, min(matching_interactions$start), NA)
# update ants dataframe
ants$infector[i] <- infector
ants$infection_time[i] <- earliest_interaction_time
} else {
# no infector found, set as NA
ants$infector[i] <- NA
ants$infection_time[i] <- NA
}
}
}
### generate contacts
contacts <- ants %>%
transmute(
infector = infector,
case_id = tag,
# location = sample(c("nest", "arena"), n(), TRUE),
infection_time = infection_time) %>%
drop_na(infector) # Does this drop the treated ants that have no infector?
linelist <- ants %>%
rename(case_id = tag)
epic <- suppressWarnings(make_epicontacts(
linelist = linelist,
contacts = contacts,
id = "case_id",
from = "infector",
to = "case_id",
directed = TRUE
))
sub <- epic %>% thin("linelist") # keep only contacts linked to the chains
net <- as.igraph(sub)
# plot
color_palette <- viridis(length(unique(sub[[1]]$AntTask1perc)),begin = 0.4, end = 0.6)
color_mapping <- setNames(color_palette, unique(sub[[1]]$AntTask1perc))
color_vector <- color_mapping[sub[[1]]$AntTask1perc]
color_vector[sub[[1]]$id %in% treated_ants] <- "red"
vertex_color <- color_palette[as.factor(sub[[1]]$AntTask1perc)]
plot(net,
vertex.size = 5,
vertex.label.cex = 0.35,
vertex.color = color_vector)
legend("topright",                          # Position of the legend
legend = c("Forager", "Nurse", "Treated"),       # The labels for the tasks
fill = c(color_palette, "red"),                 # Colors corresponding to each task
border = "black",                     # Border color for the legend boxes
#title = "Ant Task",                   # Title of the legend
cex = 0.8,                            # Text size
bty = "n")                            # No box around the legend
get_degree(sub, type = "both")
food_reach <- vcount(net)
prop_col_reached <- vcount(net)/col_size
foodchain_results_colony <-  rbind(foodchain_results_colony, data.frame(col_id,
treatment,
food_reach,
prop_col_reached, stringsAsFactors = F ))
### ### ### ### _________________________________________________________________________________________________________________________________________________
#### Individual chains: All ants that receive food from treated individuals run per treated individual. ####
### Should I include/exclude other treated ants from the chains?
RUN_INDIVIDUAL_CHAINS <- FALSE # just a little extra loop so that individual chains can be skipped during testing. TRUE most of the time - false if you want to skip
ants_ori <- ants #[!ants$tag == 666, ]
if (RUN_INDIVIDUAL_CHAINS) {
for (t_ant in treated_ants) { # t_ant <- treated_ants[1]
cat("\r", green(col_id, " ant: "), t_ant, "    ")
ants_single_chains <- ants_ori
ants_single_chains$infector <- ""
ants_single_chains$infection_time <- NA
# Initialize an empty graph (undirected), add the experimentor as the first node
GS <- make_empty_graph(directed = FALSE)
GS <- add_vertices(GS, 1, name = as.character(t_ant))
# tracking of ants that have already received food (starting with the key ant)
received_food <- t_ant
# Build the graph iteratively (bidirectional interactions) - interaction by interaction we "inform/infect" ants based on the initially treated ones.
for (i in 1:nrow(trophy_data)) {
# Get the interacting ants (mutual sharing)
ant1 <- trophy_data$Tag1[i]
ant2 <- trophy_data$Tag2[i]
# Only process interactions involving ants that have already received food
if (ant1 %in% received_food || ant2 %in% received_food) {
# Add both ants to the graph if not already present
if (!(ant1 %in% V(GS)$name)) {  # Check if ant1 already exists in the graph
GS <- add_vertices(GS, 1, name = as.character(ant1))
received_food <- c(received_food, ant1)
}
if (!(ant2 %in% V(GS)$name)) {  # Check if ant2 already exists in the graph
GS <- add_vertices(GS, 1, name = as.character(ant2))
received_food <- c(received_food, ant2)
}
# Add an undirected edge between the two ants (food sharing)
GS <- add_edges(GS, c(as.character(ant1), as.character(ant2)))
}
}
# get edge data for single chain
edge_data_single_chain <- igraph::as_data_frame(GS, what = "edges")
if (nrow(edge_data_single_chain) == 0) {
# if for some reason a treated ant is not interacting with other ants, manually assign default values (degree = 0, etc.)
node_degree <- 0
food_reach_single <- 1
prop_col_reached_single <- 1 / col_size  # assuming it's a proportion of the colony size
} else {
### based on the edge_data identify initial infectors and create transmission chains
for (i in seq_len(nrow(ants_single_chains))) { # i <- 1
ant <- ants_single_chains[i, ]
# treated ants get an infection time just before the first interaction
if (ant$tag == t_ant) {
ants_single_chains$infection_time[i] <- min(trophy_data$start)-1
ants_single_chains$infector[i] <- NA # put this to gismo
} else {
# untreated ants: find first the row in edge_data where this ant was involved and identify the infector
transmission_info <- edge_data_single_chain[edge_data_single_chain$to == ant$tag | edge_data_single_chain$from == ant$tag, ]
if (nrow(transmission_info) > 0) {
if (transmission_info$to[1] == ant$tag) {
infector <- transmission_info$from[1]
} else {
infector <- transmission_info$to[1]
}
# matching the interaction with the trophy dataset to extract transmission time
matching_interactions <- trophy_data[
(trophy_data$Tag1 == transmission_info$from[1] & trophy_data$Tag2 == transmission_info$to[1]) |
(trophy_data$Tag1 == transmission_info$to[1] & trophy_data$Tag2 == transmission_info$from[1]),]
earliest_interaction_time <- ifelse(nrow(matching_interactions) > 0, min(matching_interactions$start), NA)
# update ants dataframe
ants_single_chains$infector[i] <- infector
ants_single_chains$infection_time[i] <- earliest_interaction_time
} else {
# no infector found, set as NA
ants_single_chains$infector[i] <- NA
ants_single_chains$infection_time[i] <- NA
}
}
}
## generate contacts
contacts_single <- ants_single_chains %>%
transmute(
infector = infector,
case_id = tag
) %>%
drop_na(infector)
linelist_single <- ants_single_chains %>% rename(case_id = tag)
epic_single <- suppressWarnings(make_epicontacts(
linelist = linelist_single,
contacts = contacts_single,
id = "case_id",
from = "infector",
to = "case_id",
directed = TRUE))
sub_single <- epic_single %>% thin("linelist") # keep only contacts linked to the chains
net_single <- as.igraph(sub_single)
color_palette <- viridis(length(unique(sub_single[[1]]$AntTask1perc)),begin = 0.4, end = 0.6)
color_mapping <- setNames(color_palette, unique(sub_single[[1]]$AntTask1perc))
color_vector <- color_mapping[sub_single[[1]]$AntTask1perc]
color_vector[sub_single[[1]]$id == t_ant] <- "red"
# Map values to the color palette
plot(net_single, main = paste0(col_id, " ant: ", t_ant) ,
vertex.size = 6,
vertex.color = color_vector,
# vertex.label = NA,
vertex.label.cex = 0.35)
food_reach_single <- vcount(net_single)
prop_col_reached_single <- vcount(net_single)/col_size
degree <- get_degree(sub_single, type = "both")
node_degree <- unname(degree[as.character(t_ant)])
}
tag <- t_ant
foodchain_results_individuals <-  rbind(foodchain_results_individuals, data.frame(col_id,
treatment,
tag,
node_degree,
food_reach_single,
prop_col_reached_single, stringsAsFactors = F ))
}
}
}
rm(list = ls())
rm(list = setdiff(ls(), "first_time_use_working_directory"))
# load required libraries and functions:
pacman::p_load(dplyr, ggplot2, broom, viridis, lme4, car, multcomp, multcompView, stringr,
emmeans, coxme, survival, survminer, scales, clipr, gridExtra, grid)
# Set working directory
if (!exists("first_time_use_working_directory") || first_time_use_working_directory == "") { # direct it to where you have config_user_and_hd.R (typically the script folder or github folder)
standard <- "/Users/gismo/Documents/GitHub/vital_rscripts_git" # if you are always working from the same directory just put its name here and it will save you some clicking.
selected_dir <- if  (dir.exists(standard)) {standard} else {tcltk::tk_choose.dir(default = "~/", caption = "Select Working Directory")}
if (is.null(selected_dir) || selected_dir == "") {
cat("No directory selected. Exiting.\n")
return()}
setwd(selected_dir)
first_time_use_working_directory <<- getwd()
cat(crayon::blue(getwd()))
} else { setwd(first_time_use_working_directory)
cat(crayon::blue(getwd())) }
# source("config_user_and_hd.R") # contains getUserOptions() that defines usr and hd and some functions
directory <- paste(first_time_use_working_directory, "flugus_manuscript", sep = "/")
setwd(directory)
# load data sets
exp1_data <- read.csv('exp1_flupy_susceptibility_test.csv') #Experiment 1: flupy only survival data
exp1_data$concentration <- factor(exp1_data$concentration)
flugus_data <- read.csv('exp2_flugus_interaction_survival.csv') #Experiment 2: flupy fungus co-exposure survival data
flugus_data$fungus <- factor(flugus_data$fungus, levels=c("S","M"))
supl_data <- read.table("supplexp_food_uptake.txt", header = TRUE) # Supplementary Experiment: food uptake data
#### 2. FPF susceptibility test ####
#### 2.1 Stats ####
null_model <- coxme ( Surv (time = survival, event = censor) ~ 1                 + ( 1 | petri_dish), data = exp1_data)
full_model <- coxme ( Surv (time = survival, event = censor) ~ 1 + concentration + ( 1 | petri_dish), data = exp1_data)
anova(null_model   ,  full_model )
summary(full_model)
posthocs_Tukey <- summary(glht(full_model, linfct = mcp (concentration="Tukey")), test=adjusted("BH"))
letters <- cld(posthocs_Tukey)
y_coordinates <- exp1_data %>%
group_by(concentration) %>%
summarize(prop_surviving = sum(censor==0) / n()) %>% as.data.frame()
plot_data <- exp1_data %>% mutate(survival = ifelse(survival == 20 & censor == 0, 20.5, survival))
legend       <- c('    0', ' 0.5','    1','    5','  10','  50','100','500')
dash             <- rep("-", 8)
cld_labels   <- c('a','ab','ab','a','ab','ab','b','c')
treatment_labels <- c('0','0.5','1','5','10','50','100*','500*')
line_types       <- c("solid", "dashed", "dotted", "dotdash", "longdash", "twodash", "solid", "twodash")
{surv_plot <- survfit(Surv(time = survival, event = censor) ~ 1 + concentration, data = plot_data)
surv_plot <- ggsurvplot(surv_plot, data = exp1_data,
censor = FALSE,
legend.title = 'Concentration [ppm]',
legend.labs = legend,
legend = c(0.15, 0.25),
xlab = 'Time (days)',
ylab = 'Proportion Surviving',
# break.time.by = 2,
xlim = c(0, 22.7),
ylim = c(0, 1),
ggtheme = theme_bw(),
palette = viridis(8, begin = 0, end = 0.9, option = 5),
conf.int = TRUE,
conf.int.alpha = 0.2,
linetype = line_types,
size = 0.8,
alpha = 0.8)
surv_plot$plot <- surv_plot$plot +
theme(panel.grid = element_blank()) +
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.ticks = element_line(linewidth = 0.8),
strip.text = element_text(size = 10),
legend.key.width = unit(2, "line"),
legend.position = "none") +
scale_x_continuous(breaks = seq(0, 20, by = 2)) +
scale_y_continuous(
breaks = seq(0.25, 1, by = 0.15),
limits = c(0.16, 1)) +
geom_text(data = y_coordinates,
aes(x = 22, y = prop_surviving, label = dash),
size = 3.5, hjust = 0, vjust = 0.5, inherit.aes = FALSE) +
geom_text(data = y_coordinates,
aes(x = 22.5 , y = prop_surviving, label = cld_labels),
size = 3.5, hjust = 0, vjust = 0.5, inherit.aes = FALSE, fontface = "bold") +
geom_text(data = y_coordinates[1:6, ],
aes(x = 21, y = prop_surviving, label = treatment_labels[1:6]),
size = 3.5, hjust = 0, vjust = 0.5, inherit.aes = FALSE) +
geom_text(data = y_coordinates[7:8, ],
aes(x = 21, y = prop_surviving, label = treatment_labels[7:8]),
size = 3.5, hjust = 0, vjust = 0.5, inherit.aes = FALSE,
fontface = "bold") +
# geom_text(data = y_coordinates[1:6, ],
#           aes(x = 21.5, y = prop_surviving, label = significance[1:6]),
#           size = 3.5, hjust = 0, vjust = 0.5, inherit.aes = FALSE) +
# geom_text(data = y_coordinates[7:8, ],
#           aes(x = 21.5, y = prop_surviving, label = significance[7:8]),
#           size = 3.5, hjust = 0, vjust = 0.5, inherit.aes = FALSE,
#           fontface = "bold") +
annotate("text", x = 20.75, y = 0.97, label = "c [ppm]", size = 3.5, hjust = 0, fontface = "bold")
surv_plot
}
### model
flugus_data$concentration <- as.factor(flugus_data$concentration)
flugus_data$interac <- interaction(flugus_data$fungus,flugus_data$concentration)
null_model            <- coxme ( Surv (time = survival, event = censor) ~ 1                              + (1 | petri_dish) + (1 | colony) + (1 | block), data = flugus_data)
concentration_model   <- coxme ( Surv (time = survival, event = censor) ~ 1 + concentration              + (1 | petri_dish) + (1 | colony) + (1 | block), data = flugus_data)
additive_model        <- coxme ( Surv (time = survival, event = censor) ~ 1 + concentration + fungus     + (1 | petri_dish) + (1 | colony) + (1 | block), data = flugus_data)
interaction_model     <- coxme ( Surv (time = survival, event = censor) ~ 1 + concentration * fungus     + (1 | petri_dish) + (1 | colony) + (1 | block), data = flugus_data)
interaction_model_bis <- coxme ( Surv (time = survival, event = censor) ~ 1 + interac                    + (1 | petri_dish) + (1 | colony) + (1 | block), data = flugus_data)
anova(null_model, concentration_model, additive_model, interaction_model)
anova(additive_model, interaction_model)
Anova(interaction_model)
summary(interaction_model)
### full contrasts for pairwise comparisons:
contrast_matrix_Tukey <-  rbind(
"1 minus 2"=c(-1,0,0,0,0)
,"1 minus 3"=c(0,-1,0,0,0)
,"1 minus 4"=c(0,0,-1,0,0)
,"1 minus 5"=c(-1,0,-1,-1,0)
,"1 minus 6"=c(0,-1,-1,0,-1)
,"2 minus 3"=c(1,-1,0,0,0)
,"2 minus 4"=c(1,0,-1,0,0)
,"2 minus 5"=c(0,0,-1,-1,0)
,"2 minus 6"=c(1,-1,-1,0,-1)
,"3 minus 4"=c(0,1,-1,0,0)
,"3 minus 5"=c(-1,1,-1,-1,0)
,"3 minus 6"=c(0,0,-1,0,-1)
,"4 minus 5"=c(-1,0,0,-1,0)
,"4 minus 6"=c(0,-1,0,0,-1)
,"5 minus 6"=c(1,-1,0,1,-1)
)
posthocs_Tukey_1 <- summary(glht(interaction_model,linfct=contrast_matrix_Tukey),test=adjusted("BH"))
posthocs_Tukey_1
posthocs_Tukey_2 <- summary(glht(interaction_model_bis,linfct=mcp(interac="Tukey")),test=adjusted("BH"))
posthocs_Tukey_2
cld(posthocs_Tukey_2)
### fungus hazard contrasting
contrast_matrix <- rbind(
"Delta50"=c(0,0,1,0,1),
"Delta5"=c(0,0,1,1,0),
"DeltaControl"=c(0,0,1,0,0),
"Delta50 minus Delta5"=c(0,0,0,-1,1),
"Delta50 minus DeltaControl"=c(0,0,0,0,1),
"Delta5 minus DeltaControl"=c(0,0,0,1,0),
"sham-50 minus sham-0"=c(0, 1, 0, 0, 0),
"sham-50 minussham-5"=c( -1, 1, 0, 0, 0),
"sham5 minus sham0"= c(1, 0, 0, 0,0)
)
posthocs <- summary(glht(interaction_model,linfct=contrast_matrix),test=adjusted("BH"))
HR_control <- exp(posthocs$test$coefficients["DeltaControl"]) #increase in mortality rate caused by the fungus in the no-FPF group
HR_control_lo <- exp(posthocs$test$coefficients["DeltaControl"] - posthocs$test$sigma["DeltaControl"])
HR_control_hi <- exp(posthocs$test$coefficients["DeltaControl"] + posthocs$test$sigma["DeltaControl"])
HR_5 <- exp(posthocs$test$coefficients["Delta5"]) #increase in mortality rate caused by the fungus in the FPF 5 group
HR_5_lo <- exp(posthocs$test$coefficients["Delta5"] - posthocs$test$sigma["Delta5"])
HR_5_hi <- exp(posthocs$test$coefficients["Delta5"] + posthocs$test$sigma["Delta5"])
HR_50 <- exp(posthocs$test$coefficients["Delta50"]) #increase in mortality rate caused by the fungus in the FPF 50 group
HR_50_lo <- exp(posthocs$test$coefficients["Delta50"] - posthocs$test$sigma["Delta50"])
HR_50_hi <- exp(posthocs$test$coefficients["Delta50"] + posthocs$test$sigma["Delta50"])
hr_data <- data.frame(
Treatment = c("0 ppm", "5 ppm", "50 ppm"),
HR = c(HR_control, HR_5, HR_50),
HR_lo = c(HR_control_lo, HR_5_lo, HR_50_lo),
HR_hi = c(HR_control_hi, HR_5_hi, HR_50_hi))
### Plot A - Survival plot for the FPF Fungus interaction test
surviplot <- survfit(Surv (time = survival, event = censor) ~ 1 + concentration + fungus, data=flugus_data)
# aggregate(censor ~ fungus + concentration, FUN=mean,data=flugus_data)
chosen_colors <- viridis(2, option = 2, begin = 0.2, end = 0.85)
# show_col(chosen_colors, labels = TRUE, borders = NULL)
color_vector <- rep(chosen_colors, 3)
y_offset <- 0.05
line_types <- rep(c("dotdash", "longdash", "solid"), each = 2)
y_coordinates <- flugus_data %>% group_by(concentration, fungus) %>%
summarize(prop_surviving = sum(censor==0) / n(),
mean_censor = mean(censor))  %>%
arrange(desc(prop_surviving)) %>% as.data.frame()
labeling <- c("  5 -","50 -","  0 -","  0 -","  5 -","50 -")
labeling_cld <- c("  a","  a","  a","  b"," bc","  c")
# Get endpoints of lines.
strata_names <- rep(names(surviplot$strata), surviplot$strata)
endpoints_df <- data.frame(
time = surviplot$time,
surv = surviplot$surv,
strata = strata_names)
shapes <- c("0" = 21, "5" = 22, "50" = 24)
y_legend_values <- c("0" = 0.33, "5" = 0.30, "50" = 0.271)
endpoints <- endpoints_df %>%
group_by(strata) %>%
slice_tail(n = 1) %>%
mutate(
concentration = str_extract(strata, "(?<=concentration=)\\d+"),
shape = as.numeric(shapes[concentration]),
y_legend = y_legend_values[concentration]  # Map concentration directly to y_legend
)
surv_plot <- ggsurvplot(surviplot, data = flugus_data,
pval = FALSE,
linetype = line_types,
lwd = 0.8,
xlab = 'Time (days)', ylab = 'Proportion Surviving',
palette = color_vector,
ggtheme = theme_bw(),
xlim = c(0, 15),
censor = FALSE,
conf.int = TRUE,
conf.int.alpha = 0.25,
legend = c(0.4, 0.25),
legend.title = "Treatments")
surv_plot$plot <- surv_plot$plot +
scale_y_continuous(limits = c(0.2, 1), breaks = seq(0.2, 1, by = 0.2)) +
theme(panel.grid = element_blank(), legend.position = "none") +
theme(plot.margin = margin(20, 10, 10, 10),
axis.title = element_text(size = 14),
axis.text = element_text(size = 14),
axis.ticks = element_line(linewidth = 1),
strip.text = element_text(size = 14)) +
# geom_segment(aes(x = 14.8, y = 0.78, xend = 14.8, yend = 0.65))+
# geom_segment(aes(x = 14.8, y = 0.52, xend = 14.8, yend = 0.325)) +
geom_segment(aes(x = 0.4, y = 0.33-y_offset, xend = 1, yend = 0.33-y_offset), color = color_vector[1], linetype = line_types[1]) +
geom_segment(aes(x = 0.4, y = 0.30-y_offset, xend = 1, yend = 0.30-y_offset), color = color_vector[3], linetype = line_types[3]) +
geom_segment(aes(x = 0.4, y = 0.271-y_offset, xend = 1, yend = 0.271-y_offset), color = color_vector[5], linetype = line_types[5]) +
geom_segment(aes(x = 1.5, y = 0.33-y_offset, xend = 2.1, yend = 0.33-y_offset), color = color_vector[2], linetype = line_types[2]) +
geom_segment(aes(x = 1.5, y = 0.30-y_offset, xend = 2.1, yend = 0.30-y_offset), color = color_vector[4], linetype = line_types[4]) +
geom_segment(aes(x = 1.5, y = 0.271-y_offset, xend = 2.1, yend = 0.271-y_offset), color = color_vector[6], linetype = line_types[6]) +
annotate("text", x = 0.4, y = 0.36-y_offset, label = "sham"   , color = "black", size = 3, fontface = "bold", hjust = 0) +
annotate("text", x = 1.5, y = 0.36-y_offset, label = "fungus" , color = "black", size = 3, fontface = "bold", hjust = 0) +
annotate("text", x = 2.7, y = 0.36-y_offset, label = "c [ppm]", color = "black", size = 3, fontface = "bold", hjust = 0) +
annotate("text", x = 2.7, y = 0.33-y_offset, label = "0 ppm"  , color = "black", size = 3, fontface = "plain", hjust = 0) +
annotate("text", x = 2.7, y = 0.30-y_offset, label = "5 ppm"  , color = "black", size = 3, fontface = "plain", hjust = 0) +
annotate("text", x = 2.7, y = 0.27-y_offset, label = "50 ppm" , color = "black", size = 3, fontface = "plain", hjust = 0) +
# annotate("text", x=15.5, y=0.71, label="n.s       ", color = "black", size = 3, fontface = "bold") +
# annotate("text", x=15.5, y=0.42, label=" p = 0.01", color = "black", size = 3, fontface = "bold") +
geom_rect(aes(xmin = 0.2, xmax = 4, ymin = 0.2, ymax = 0.38 - y_offset),
fill = NA, color = "black", lwd = 0.05) +
scale_x_continuous(breaks = seq(0, 14, by = 2)) +
geom_segment(aes(x = 0.2, y = 0.2925, xend = 4, yend = 0.2925), color = "black", linewidth = 0.05) +
geom_segment(aes(x = 2.5, y = 0.2, xend = 2.5, yend = 0.33), color = "black", linewidth = 0.05) +
# shapes in legend
geom_point(data = endpoints[c(1,3,5),],
aes(x = 1.1, y = y_legend-y_offset, shape = shape),
size = 1.5, stroke = 0.8, color = color_vector[c(1,3,5)], fill = NA)+
geom_point(data = endpoints[c(1,3,5),],
aes(x = 2.2, y = y_legend-y_offset, shape = shape),
size = 1.5, stroke = 0.8, color = color_vector[c(2,4,6)], fill = color_vector[c(2,4,6)])+
# cld letters
geom_text(data = y_coordinates,
aes(x = 15, y = prop_surviving - 0.000, label = labeling_cld),
size = 4, hjust = 0, vjust = 0.5, inherit.aes = FALSE, fontface = "bold") +
# concentration labeling
geom_text(data = y_coordinates,
aes(x = 14.5, y = prop_surviving, label = labeling),
size = 4, hjust = 0, vjust = 0.5, inherit.aes = FALSE) +
annotate("text", x = 14.2, y = 0.85, label = "c [ppm]", size = 4, hjust = 0, fontface = "bold") +
# shapes at end of curves
geom_point(data = endpoints[c(2,4,6), ],  # First 3: unfilled
aes(x = time + 0.1, y = surv, shape = shape),
size = 2, stroke = 1, color = rev(color_vector)[c(2,4,6)], fill = NA) +
geom_point(data = endpoints[c(1,3,5), ],  # Last 3: filled
aes(x = time + 0.1, y = surv, shape = shape),
size = 2, stroke = 1, color = rev(color_vector)[c(1,3,5)], fill = color_vector[c(2,4,6)]) +
scale_shape_identity()
print(surv_plot)
surv_ggplot <- surv_plot$plot
hazard_plot <- ggplot(hr_data, aes(x = Treatment, y = HR)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black", width = 0.8) +
geom_errorbar(aes(ymin = HR_lo, ymax = HR_hi), width = 0.1, lwd = 1.2) + # Error bars for confidence intervals
labs(y = "Fungus Hazard Ratio (HR)",
x = "Flupyradifurone concentration") +
theme_bw() +
theme(plot.margin = margin(20, 10, 10, 10),
panel.grid = element_blank(), legend.position = "none",
axis.title = element_text(size = 14),
axis.text = element_text(size = 14),
axis.ticks = element_line(linewidth = 1),
strip.text = element_text(size = 14)) +
annotate("text", x = 0.96, y = 5.35, label = "a", color = "black", size = 6, fontface = "bold", hjust = 0) +
annotate("text", x = 1.96, y = 5.35, label = "b", color = "black", size = 6, fontface = "bold", hjust = 0) +
annotate("text", x = 2.96, y = 5.35, label = "b", color = "black", size = 6, fontface = "bold", hjust = 0) +
coord_cartesian(ylim=c(1,5.5))  # Setting y-axis limit to start from 1
print(hazard_plot)
hazard_plot <- ggplot(hr_data, aes(x = Treatment, y = HR)) +
geom_bar(stat = "identity", fill = "white", color = "black", width = 0.8) +  # or use skyblue
geom_errorbar(aes(ymin = HR_lo, ymax = HR_hi), width = 0.1, lwd = 1.2) + # Error bars for confidence intervals
labs(y = "Fungus Hazard Ratio (HR)",
x = "Flupyradifurone concentration") +
theme_bw() +
theme(plot.margin = margin(20, 10, 10, 10),
panel.grid = element_blank(), legend.position = "none",
axis.title = element_text(size = 14),
axis.text = element_text(size = 14),
axis.ticks = element_line(linewidth = 1),
strip.text = element_text(size = 14)) +
annotate("text", x = 0.96, y = 5.35, label = "a", color = "black", size = 6, fontface = "bold", hjust = 0) +
annotate("text", x = 1.96, y = 5.35, label = "b", color = "black", size = 6, fontface = "bold", hjust = 0) +
annotate("text", x = 2.96, y = 5.35, label = "b", color = "black", size = 6, fontface = "bold", hjust = 0) +
coord_cartesian(ylim=c(1,5.5))  # Setting y-axis limit to start from 1
print(hazard_plot)
