list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = FALSE)
}))
file_list
# Check for plate numbers from 01 to 69
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
plate_numbers
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}
for (plate_number in 1:69) {
plate_number <- 1
file_name <- file.path(base_path, folder, paste0("DS_flugus_cfg_plate", plate_number, " - Text Report Data.txt"))
file_name
base_path
base_path
folder
paste0("/DS_flugus_cfg_plate", plate_number, " - Text Report Data.txt")
plate_number <- 1
plate_number
paste0("/DS_flugus_cfg_plate", plate_number, " - Text Report Data.txt")
plate_str <- sprintf("%02d", plate_number)  <- sprintf("%02d", plate_number)
plate_str <- sprintf("%02d", plate_number)
file_name <- file.path(base_path, folder, paste0("/DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt"))
file_name
folder
base_path
base_path <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR"
folders <- c("M1", "M2")
data_list <- list()
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = FALSE)
}))
# Check for plate numbers from 01 to 69
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}
plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
file_name <- file.path(base_path, folder, paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt"))
file_name
data <- read.table(file_name, header = TRUE, sep = "\t")  # Adjust the sep parameter if necessary
data
data <- data %>% # add variables
mutate(plate = plate_str,
machine = folder)
data
# Remove the variable X and rename others
data <- data %>%
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data <- read.table(file_name, header = TRUE, sep = "\t")  # Adjust the sep parameter if necessary
# Remove the variable X and rename others
data <- data %>%
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data
getwd()
base_path
base_path
rm(list = ls())
# Merging qPCR output tables:
library(dplyr)
base_path <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR"
folders <- c("M1", "M2")
data_list <- list()
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = FALSE)
}))
# check if plate numbers from 01 to 69 exist
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}
for (plate_number in 1:69) { # plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
file_name <- file.path(base_path, folder, paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt"))
data <- read.table(file_name, header = TRUE, sep = "\t")
data <- data %>% # remove the variable X and rename other variables and create plate and machine
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data_list[[length(data_list) + 1]] <- data # add each table to the list of tables
}
combined_data <- bind_rows(data_list) # merge all lists into a single table
output_file <- file.path(base_path, "/CFG_all_qPCR_data_raw.txt")
write.table(combined_data, file = output_file, sep = "\t", row.names = FALSE, quote = FALSE)
base_path
file_list
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = TRUE)
}))
file_list
# check if plate numbers from 01 to 69 exist
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = TRUE)
}))
file_list
# check if plate numbers from 01 to 69 exist
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}
plate_numbers
test_file <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR/M1/DS_flugus_cfg_plate01 - Text Report Data.txt"
sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", test_file)
plate_numbers <- sub(".*/DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}if (!all(sort(plate_numbers, na.last = TRUE) == 1:69)) {
if (!all(sort(plate_numbers, na.last = TRUE) == 1:69)) {
stop("Missing plate numbers in the folders.")
} else {
# Print message in green
cat("\033[32mAll good, go ahead\033[39m\n")
}
plate_number <- 01
file_list
plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
plate_str
file_name <- file_list[grepl(paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt$"), file_list)]
file_name
data <- read.table(file_name, header = TRUE, sep = "\t")
data <- data %>% # remove the variable X and rename other variables and create plate and machine
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
file_name
folder <- sub(".*/(M1|M2)/.*", "\\1", file_name)
folder
for (plate_number in 1:69) { # plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
file_name <- file_list[grepl(paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt$"), file_list)]
folder <- sub(".*/(M1|M2)/.*", "\\1", file_name)
data <- read.table(file_name, header = TRUE, sep = "\t")
data <- data %>% # remove the variable X and rename other variables and create plate and machine
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data_list[[length(data_list) + 1]] <- data # add each table to the list of tables
}
rm(list = ls())
# Merging qPCR output tables:
library(dplyr)
base_path <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR"
folders <- c("M1", "M2")
data_list <- list()
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = TRUE)
}))
plate_numbers <- sub(".*/DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers, na.last = TRUE) == 1:69)) {
stop("Missing plate numbers in the folders.")
} else {
# Print message in green
cat("\033[32mAll good, go ahead\033[39m\n")
}
for (plate_number in 1:69) { # plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
file_name <- file_list[grepl(paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt$"), file_list)]
folder <- sub(".*/(M1|M2)/.*", "\\1", file_name)
data <- read.table(file_name, header = TRUE, sep = "\t")
data <- data %>% # remove the variable X and rename other variables and create plate and machine
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data_list[[length(data_list) + 1]] <- data # add each table to the list of tables
}
combined_data <- bind_rows(data_list) # merge all lists into a single table
rm(list = ls())
# Merging qPCR output tables:
library(dplyr)
base_path <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR"
folders <- c("M1", "M2")
data_list <- list()
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = TRUE)
}))
plate_numbers <- sub(".*/DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers, na.last = TRUE) == 1:69)) {
stop("Missing plate numbers in the folders.")
} else {
# Print message in green
cat("\033[32mAll good, go ahead\033[39m\n")
}
for (plate_number in 1:69) { # plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
file_name <- file_list[grepl(paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt$"), file_list)]
folder <- sub(".*/(M1|M2)/.*", "\\1", file_name)
data <- read.table(file_name, header = TRUE, sep = "\t")
data <- data %>% # remove the variable X and rename other variables and create plate and machine
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data_list[[length(data_list) + 1]] <- data # add each table to the list of tables
}
data_list
combined_data <- bind_rows(data_list) # merge all lists into a single table
convert_ct_dR_to_char <- function(df) {
df$ct_dR <- as.character(df$ct_dR)  # Convert everything to character
df$ct_dR[df$ct_dR == "No Ct"] <- "No Ct"  # Ensure "No Ct" stays as is
return(df)
}
# Apply the function to each data frame in the list
data_list <- lapply(data_list, convert_ct_dR_to_char)
combined_data <- bind_rows(data_list) # merge all lists into a single table
output_file <- file.path(base_path, "/CFG_all_qPCR_data_raw.txt")
write.table(combined_data, file = output_file, sep = "\t", row.names = FALSE, quote = FALSE)
# Set working directory
if (!exists("first_time_use_working_directory") || first_time_use_working_directory == "") { # direct it to where you have config_user_and_hd.R (typically the script folder or github folder)
standard <- "/Users/gismo/Documents/GitHub/vital_rscripts_git/CFG" # if you are always working from the same directory just put its name here and it will save you some clicking.
selected_dir <- if  (dir.exists(standard)) {standard} else {tcltk::tk_choose.dir(default = "~/", caption = "Select Working Directory")}
if (is.null(selected_dir) || selected_dir == "") {
cat("No directory selected. Exiting.\n")
return()}
setwd(selected_dir)
first_time_use_working_directory <<- getwd()
cat(crayon::blue(getwd()))
} else { setwd(first_time_use_working_directory)
cat(crayon::blue(getwd())) }
list.files()
# load required libraries and functions:
pacman::p_load(dplyr, ggplot2, readr)
cfg_frozen_ants <- read_csv("cfg_frozen_ants.csv")
cfg_qpcr_all    <- read_csv("CFG_qPCR_all.csv")
cfg_frozen_ants
cfg_qpcr_all
cfg_frozen_ants <- as.data.frame(read_csv("cfg_frozen_ants.csv"))
cfg_frozen_ants
cfg_qpcr_all    <- read_csv("CFG_qPCR_all.csv") %>% as.data.frame()
cfg_qpcr_all
names(cfg_qpcr_all)
names(cfg_frozen_ants)
cfg_frozen_ants
View(cfg_frozen_ants)
cfg_merged <- cfg_frozen_ants %>%
left_join(cfg_qpcr_all, by = c("ID" = "sample_id"))
cfg_merged
View(cfg_merged)
names(cfg_frozen_ants)
cfg_merged <- cfg_frozen_ants %>%
left_join(cfg_qpcr_all, by = c("ID" = "sample_id")) %>%
select(-Comment, -`...9`)
cfg_merged
cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`)))
cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`)))
analysed <- cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`))) %>% as.data.frame()
analysed
colonies_analysed <- cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`))) %>%
filter(n_qpcr_samples > 0, Colony != "c09") %>%
pull(Colony)
colonies_analysed
cfg_subset <- cfg_merged %>%
filter(Colony %in% colonies_analysed)
cfg_subset
cfg_colony_metadata    <- read_csv("CFG_colony_metadata.csv") %>% as.data.frame()
colonies_analysed
cfg_colony_metadata
names(cfg_subset)
cfg_subset <- cfg_merged %>%
filter(Colony %in% colonies_analysed)%>%
rename(colony_id = ID)
names(cfg_subset)
cfg_colony_metadata
cfg_colony_metadata_sub %>%
select(colony_id, treatment)
cfg_colony_metadata_sub <- cfg_colony_metadata %>%
select(colony_id, treatment)
cfg_colony_metadata_sub
cfg <- cfg_subset %>%
left_join(cfg_qpcr_all, by = colony_id)
cfg <- cfg_subset %>%
left_join(cfg_qpcr_all, by = "colony_id")
cfg <- cfg_subset %>%
left_join(cfg_colony_metadata_sub, by = "colony_id")
rm(list = setdiff(ls(), "first_time_use_working_directory"))
# CFG first look into qPCR data
# load required libraries and functions:
pacman::p_load(dplyr, ggplot2, readr)
# Set working directory
if (!exists("first_time_use_working_directory") || first_time_use_working_directory == "") { # direct it to where you have config_user_and_hd.R (typically the script folder or github folder)
standard <- "/Users/gismo/Documents/GitHub/vital_rscripts_git/CFG" # if you are always working from the same directory just put its name here and it will save you some clicking.
selected_dir <- if  (dir.exists(standard)) {standard} else {tcltk::tk_choose.dir(default = "~/", caption = "Select Working Directory")}
if (is.null(selected_dir) || selected_dir == "") {
cat("No directory selected. Exiting.\n")
return()}
setwd(selected_dir)
first_time_use_working_directory <<- getwd()
cat(crayon::blue(getwd()))
} else { setwd(first_time_use_working_directory)
cat(crayon::blue(getwd())) }
list.files()
### get all relevant data into one frame... improvised as currently everything is all over the place: treatment, colonies analysed, spore load, identity
cfg_frozen_ants <- as.data.frame(read_csv("cfg_frozen_ants.csv"))
cfg_qpcr_all    <- read_csv("CFG_qPCR_all.csv") %>% as.data.frame()
cfg_colony_metadata    <- read_csv("CFG_colony_metadata.csv") %>% as.data.frame()
names(cfg_qpcr_all)
names(cfg_frozen_ants)
cfg_merged <- cfg_frozen_ants %>%
left_join(cfg_qpcr_all, by = c("ID" = "sample_id")) %>%
select(-Comment, -`...9`) %>% as.data.frame()
analysed <- cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`))) %>% as.data.frame()
colonies_analysed <- cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`))) %>%
filter(n_qpcr_samples > 0, Colony != "c09") %>%
pull(Colony)
cfg_subset <- cfg_merged %>%
filter(Colony %in% colonies_analysed)%>%
rename(colony_id = ID) %>% as.data.frame()
cfg_colony_metadata_sub <- cfg_colony_metadata %>%
select(colony_id, treatment)%>% as.data.frame()
cfg <- cfg_subset %>%
left_join(cfg_colony_metadata_sub, by = "colony_id") %>% as.data.frame()
cfg_colony_metadata
cfg_subset
str(cfg_colony_metadata_sub$colony_id)
str(cfg_subset$colony_id)
rm(list = setdiff(ls(), "first_time_use_working_directory"))
# CFG first look into qPCR data
# load required libraries and functions:
pacman::p_load(dplyr, ggplot2, readr)
# Set working directory
if (!exists("first_time_use_working_directory") || first_time_use_working_directory == "") { # direct it to where you have config_user_and_hd.R (typically the script folder or github folder)
standard <- "/Users/gismo/Documents/GitHub/vital_rscripts_git/CFG" # if you are always working from the same directory just put its name here and it will save you some clicking.
selected_dir <- if  (dir.exists(standard)) {standard} else {tcltk::tk_choose.dir(default = "~/", caption = "Select Working Directory")}
if (is.null(selected_dir) || selected_dir == "") {
cat("No directory selected. Exiting.\n")
return()}
setwd(selected_dir)
first_time_use_working_directory <<- getwd()
cat(crayon::blue(getwd()))
} else { setwd(first_time_use_working_directory)
cat(crayon::blue(getwd())) }
list.files()
### get all relevant data into one frame... improvised as currently everything is all over the place: treatment, colonies analysed, spore load, identity
cfg_frozen_ants <- as.data.frame(read_csv("cfg_frozen_ants.csv"))
cfg_qpcr_all    <- read_csv("CFG_qPCR_all.csv") %>% as.data.frame()
cfg_colony_metadata    <- read_csv("CFG_colony_metadata.csv") %>% as.data.frame()
names(cfg_qpcr_all)
names(cfg_frozen_ants)
cfg_merged <- cfg_frozen_ants %>%
left_join(cfg_qpcr_all, by = c("ID" = "sample_id")) %>%
select(-Comment, -`...9`) %>% as.data.frame()
analysed <- cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`))) %>% as.data.frame()
colonies_analysed <- cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`))) %>%
filter(n_qpcr_samples > 0, Colony != "c09") %>%
pull(Colony)
cfg_subset <- cfg_merged %>%
filter(Colony %in% colonies_analysed)%>%
rename(colony_id = Colony) %>% as.data.frame()
cfg_colony_metadata_sub <- cfg_colony_metadata %>%
select(colony_id, treatment)%>% as.data.frame()
cfg <- cfg_subset %>%
left_join(cfg_colony_metadata_sub, by = "colony_id") %>% as.data.frame()
str(cfg_subset$colony_id)
str(cfg_colony_metadata_sub$colony_id)
nrow(cfg)
names(cfg)
cfg <- cfg_subset %>%
left_join(cfg_colony_metadata_sub, by = "colony_id") %>%
rename(spore_concentration = spore_concentration[ng/ul])%>% as.data.frame()
cfg <- cfg_subset %>%
left_join(cfg_colony_metadata_sub, by = "colony_id") %>%
rename(spore_concentration = `spore_concentration[ng/ul]`)%>% as.data.frame()
# Plot
ggplot(cfg, aes(x = treatment, y = spore_concentration)) +
stat_summary(fun = mean, geom = "bar", fill = "steelblue", color = "black", width = 0.6) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
ggplot(cfg, aes(x = treatment, y = spore_concentration)) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", color = "black") +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
ggplot(cfg, aes(x = treatment, y = spore_concentration)) +
geom_violin(trim = FALSE, fill = "lightblue", color = "black", alpha = 0.7) +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
ggplot(cfg, aes(x = treatment, y = log10(spore_concentration)) +
ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", color = "black") +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_violin(trim = FALSE, fill = "lightblue", color = "black", alpha = 0.7) +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
# load required libraries and functions:
pacman::p_load(dplyr, ggplot2, readr, lme4, lmerTest)
summary(model)
model <- lmer(spore_concentration ~ treatment + (1 | colony_id), data = cfg)
summary(model)
model <- lmer(log10(spore_concentration) ~ treatment + (1 | colony_id), data = cfg)
summary(model)
anova(model)
