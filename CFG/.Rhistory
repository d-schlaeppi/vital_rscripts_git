labs(title = "Mean ± SE") +
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# p4: barplot with SD and raw data
p4 <- ggplot(summary_data, aes(x = food_source, y = mean_duration, fill = food_source)) +
geom_col(width = 0.6, alpha = 0.8) +
geom_errorbar(aes(ymin = mean_duration - sd_duration, ymax = mean_duration + sd_duration),
width = 0.2, color = "black") +
geom_jitter(data = dat_duration,
aes(x = food_source, y = feeding_duration_seconds_capped),
width = 0.15, color = "black", alpha = 0.1, inherit.aes = FALSE) +
labs(title = "Mean ± SD + Raw Data") +
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Combine all four
(p1 | p2) / (p3 | p4) +
plot_annotation(title = "Feeding Duration by Food Source (Different Visualizations)")
}
#________________________________________________________________________________________________________________________________________________
#### 2.1  Plotting feeding duration: 4 times the same but with different representations
if(TRUE){
# p1: boxplot
p1 <- ggplot(dat_duration, aes(x = food_source, y = feeding_duration_seconds_capped, fill = food_source)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.35, color = "black", alpha = 0.1) +
labs(title = "Boxplot") +
scale_fill_manual(values = c("virus" = "#D04C5B", "control" = "#A1D99B")) +
geom_segment(aes(x = 1, xend = 2, y = 1.05 * max(feeding_duration_seconds_capped, na.rm = TRUE),
yend = 1.05 * max(feeding_duration_seconds_capped, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 1.1 * max(dat_duration$feeding_duration_seconds_capped, na.rm = TRUE),
label = "*** (glmer nbinom2)", color = "black", size = 3)+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# p2: violin plot
p2 <- ggplot(dat_duration, aes(x = food_source, y = feeding_duration_seconds_capped, fill = food_source)) +
geom_violin(trim = FALSE, alpha = 0.8) +
geom_jitter(width = 0.35, color = "black", alpha = 0.1) +
labs(title = "Violin Plot") +
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Summary for barplots
summary_data <- dat_duration %>%
group_by(food_source) %>%
summarize(
mean_duration = mean(feeding_duration_seconds_capped, na.rm = TRUE),
se_duration = sd(feeding_duration_seconds_capped, na.rm = TRUE) / sqrt(n()),
sd_duration = sd(feeding_duration_seconds_capped, na.rm = TRUE)
)
# p3: barplot with SE
p3 <- ggplot(summary_data, aes(x = food_source, y = mean_duration, fill = food_source)) +
geom_col(width = 0.6, alpha = 0.8) +
geom_errorbar(aes(ymin = mean_duration - se_duration, ymax = mean_duration + se_duration),
width = 0.2, color = "black") +
labs(title = "Mean ± SE") +
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# p4: barplot with SD and raw data
p4 <- ggplot(summary_data, aes(x = food_source, y = mean_duration, fill = food_source)) +
geom_col(width = 0.6, alpha = 0.8) +
geom_errorbar(aes(ymin = mean_duration - sd_duration, ymax = mean_duration + sd_duration),
width = 0.2, color = "black") +
geom_jitter(data = dat_duration,
aes(x = food_source, y = feeding_duration_seconds_capped),
width = 0.15, color = "black", alpha = 0.1, inherit.aes = FALSE) +
labs(title = "Mean ± SD + Raw Data") +
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Combine all four
(p1 | p2) / (p3 | p4) +
plot_annotation(title = "Feeding Duration by Food Source (Different Visualizations)")
}
#________________________________________________________________________________________________________________________________________________
#### 2.1  Plotting feeding duration: 4 times the same but with different representations
if(TRUE){
# p1: boxplot
p1 <- ggplot(dat_duration, aes(x = food_source, y = feeding_duration_seconds_capped, fill = food_source)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.35, color = "black", alpha = 0.1) +
labs(title = "Boxplot") +
scale_fill_manual(values = c("virus" = "#D04C5B", "control" = "#A1D99B")) +
geom_segment(aes(x = 1, xend = 2, y = 1.05 * max(feeding_duration_seconds_capped, na.rm = TRUE),
yend = 1.05 * max(feeding_duration_seconds_capped, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 1.1 * max(dat_duration$feeding_duration_seconds_capped, na.rm = TRUE),
label = "*** (glmer nbinom2)", color = "black", size = 3) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# p2: violin plot
p2 <- ggplot(dat_duration, aes(x = food_source, y = feeding_duration_seconds_capped, fill = food_source)) +
geom_violin(trim = FALSE, alpha = 0.8) +
geom_jitter(width = 0.35, color = "black", alpha = 0.1) +
labs(title = "Violin Plot") +
scale_fill_manual(values = c("virus" = "#D04C5B", "control" = "#A1D99B")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Summary for barplots
summary_data <- dat_duration %>%
group_by(food_source) %>%
summarize(
mean_duration = mean(feeding_duration_seconds_capped, na.rm = TRUE),
se_duration = sd(feeding_duration_seconds_capped, na.rm = TRUE) / sqrt(n()),
sd_duration = sd(feeding_duration_seconds_capped, na.rm = TRUE)
)
# p3: barplot with SE
p3 <- ggplot(summary_data, aes(x = food_source, y = mean_duration, fill = food_source)) +
geom_col(width = 0.6, alpha = 0.8) +
geom_errorbar(aes(ymin = mean_duration - se_duration, ymax = mean_duration + se_duration),
width = 0.2, color = "black") +
labs(title = "Mean ± SE") +
scale_fill_manual(values = c("virus" = "#D04C5B", "control" = "#A1D99B")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# p4: barplot with SD and raw data
p4 <- ggplot(summary_data, aes(x = food_source, y = mean_duration, fill = food_source)) +
geom_col(width = 0.6, alpha = 0.8) +
geom_errorbar(aes(ymin = mean_duration - sd_duration, ymax = mean_duration + sd_duration),
width = 0.2, color = "black") +
geom_jitter(data = dat_duration,
aes(x = food_source, y = feeding_duration_seconds_capped),
width = 0.15, color = "black", alpha = 0.1, inherit.aes = FALSE) +
labs(title = "Mean ± SD + Raw Data") +
scale_fill_manual(values = c("virus" = "#D04C5B", "control" = "#A1D99B")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Combine all four
(p1 | p2) / (p3 | p4) +
plot_annotation(title = "Feeding Duration by Food Source (Different Visualizations)")
}
plot(feeding_duration_seconds_capped ~ feeding_start_seconds, data = dat_duration,
main = "Feeding Duration vs Feeding Start Time",
xlab = "Feeding Start Time (seconds)",
ylab = "Feeding Duration (seconds)",
pch = 16,
col = rgb(t(col2rgb(c("virus" = "#D04C5B", "control" = "#A1D99B")[as.factor(dat_duration$food_source)]))/255, alpha = 0.5),
cex = 0.8)
abline(lm(feeding_duration_seconds_capped ~ feeding_start_seconds, data = dat_duration), col = "red", lwd = 2)
abline(lm(feeding_duration_seconds_capped ~ feeding_start_seconds, data = dat_duration[dat_duration$food_source == "control", ]), col = "#A1D99B", lwd = 2)  # updated control color
abline(lm(feeding_duration_seconds_capped ~ feeding_start_seconds, data = dat_duration[dat_duration$food_source == "virus", ]), col = "#D04C5B", lwd = 2)  # updated virus color
dat_summary <- dat_duration %>%
group_by(food_source, colony_id) %>%
summarise(
num_feeding_events = n(),
total_feeding_duration = sum(feeding_duration_seconds, na.rm = TRUE)
) %>% as.data.frame()
dat_summary
# number of feeding events per colony per food source
mod <- lmer(num_feeding_events ~ food_source + (1|colony_id) , data = dat_summary)
summary(mod)
Anova(mod)
compareqqnorm(mod); par(mfrow = c(1,1))
aov_residuals <- residuals(object = mod)
shapiro.test(x = aov_residuals) #not significant --> good
test_norm(mod)
ggplot(dat_summary, aes(x = food_source, y = num_feeding_events, fill = food_source)) +
geom_boxplot() +
geom_jitter(width = 0.2, color = "black", alpha = 0.2) +
labs(title = "Number of Feeding Events",
x = "Food Source",
y = "Number of Feeding Events") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_fill_manual(values = c("virus" = "#FBB4AE", "control" = "#CCEBC5")) +
geom_segment(aes(x = 1, xend = 2, y = 1.05 * max(num_feeding_events, na.rm = TRUE),
yend = 1.05 * max(num_feeding_events, na.rm = TRUE)),
color = "black", size = 0.25) +
annotate("text", x = 1.5, y = 1.1 * max(dat_summary$num_feeding_events, na.rm = TRUE),
label = "p = 0.054 (lmer)", color = "black", size = 3)
dat_summary
dat_summar_plot <- dat_summary %>%
group_by(food_source) %>%
summarise(
mean_nr_feeding_events = mean(num_feeding_events, na.rm = TRUE),
sd_nr_feeding_events = sd(num_feeding_events, na.rm = TRUE),
se_nr_feeding_events = sd(num_feeding_events, na.rm = TRUE) / sqrt(n()),
mean_tot_feeding_duration = mean(total_feeding_duration, na.rm = TRUE),
sd_tot_feeding_duration = sd(total_feeding_duration, na.rm = TRUE),
se_tot_feeding_duration = sd(total_feeding_duration, na.rm = TRUE) / sqrt(n())
) %>% as.data.frame()
dat_summar_plot
rm(list = setdiff(ls(), "first_time_use_working_directory"))
# CFG first look into qPCR data
# load required libraries and functions:
pacman::p_load(dplyr, ggplot2, readr, lme4, lmerTest)
# Set working directory
if (!exists("first_time_use_working_directory") || first_time_use_working_directory == "") { # direct it to where you have config_user_and_hd.R (typically the script folder or github folder)
standard <- "/Users/gismo/Documents/GitHub/vital_rscripts_git/CFG" # if you are always working from the same directory just put its name here and it will save you some clicking.
selected_dir <- if  (dir.exists(standard)) {standard} else {tcltk::tk_choose.dir(default = "~/", caption = "Select Working Directory")}
if (is.null(selected_dir) || selected_dir == "") {
cat("No directory selected. Exiting.\n")
return()}
setwd(selected_dir)
first_time_use_working_directory <<- getwd()
cat(crayon::blue(getwd()))
} else { setwd(first_time_use_working_directory)
cat(crayon::blue(getwd())) }
list.files()
### get all relevant data into one frame... improvised as currently everything is all over the place: treatment, colonies analysed, spore load, identity
cfg_frozen_ants <- as.data.frame(read_csv("cfg_frozen_ants.csv"))
rm(list = ls())
# CFG first look into qPCR data
# load required libraries and functions:
pacman::p_load(dplyr, ggplot2, readr, lme4, lmerTest)
# Set working directory
if (!exists("first_time_use_working_directory") || first_time_use_working_directory == "") { # direct it to where you have config_user_and_hd.R (typically the script folder or github folder)
standard <- "/Users/gismo/Documents/GitHub/vital_rscripts_git/CFG" # if you are always working from the same directory just put its name here and it will save you some clicking.
selected_dir <- if  (dir.exists(standard)) {standard} else {tcltk::tk_choose.dir(default = "~/", caption = "Select Working Directory")}
if (is.null(selected_dir) || selected_dir == "") {
cat("No directory selected. Exiting.\n")
return()}
setwd(selected_dir)
first_time_use_working_directory <<- getwd()
cat(crayon::blue(getwd()))
} else { setwd(first_time_use_working_directory)
cat(crayon::blue(getwd())) }
rm(list = ls())
# load required libraries and functions:
pacman::p_load(dplyr, ggplot2, readr, lme4, lmerTest)
# Set working directory
if (!exists("first_time_use_working_directory") || first_time_use_working_directory == "") { # direct it to where you have config_user_and_hd.R (typically the script folder or github folder)
#standard <- "/Users/gismo/Documents/GitHub/vital_rscripts_git/CFG" # if you are always working from the same directory just put its name here and it will save you some clicking.
standard <- "/media/ael/gismo_hd2/vital/vital_rscripts_git/CFG" # if you are always working from the same directory just put its name here and it will save you some clicking.
selected_dir <- if  (dir.exists(standard)) {standard} else {tcltk::tk_choose.dir(default = "~/", caption = "Select Working Directory")}
if (is.null(selected_dir) || selected_dir == "") {
cat("No directory selected. Exiting.\n")
return()}
setwd(selected_dir)
first_time_use_working_directory <<- getwd()
cat(crayon::blue(getwd()))
} else { setwd(first_time_use_working_directory)
cat(crayon::blue(getwd())) }
list.files()
### get all relevant data into one frame... improvised as currently everything is all over the place: treatment, colonies analysed, spore load, identity
cfg_frozen_ants <- as.data.frame(read_csv("cfg_frozen_ants.csv"))
cfg_qpcr_all    <- read_csv("CFG_qPCR_all.csv") %>% as.data.frame()
cfg_colony_metadata    <- read_csv("CFG_colony_metadata.csv") %>% as.data.frame()
names(cfg_qpcr_all)
names(cfg_frozen_ants)
cfg_merged <- cfg_frozen_ants %>%
left_join(cfg_qpcr_all, by = c("ID" = "sample_id")) %>%
select(-Comment, -`...9`) %>% as.data.frame()
analysed <- cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`))) %>% as.data.frame()
colonies_analysed <- cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`))) %>%
filter(n_qpcr_samples > 0, Colony != "c09") %>%
pull(Colony)
cfg_subset <- cfg_merged %>%
filter(Colony %in% colonies_analysed)%>%
rename(colony_id = Colony) %>% as.data.frame()
cfg_colony_metadata_sub <- cfg_colony_metadata %>%
select(colony_id, treatment)%>% as.data.frame()
cfg <- cfg_subset %>%
left_join(cfg_colony_metadata_sub, by = "colony_id") %>%
rename(spore_concentration = `spore_concentration[ng/ul]`)%>% as.data.frame()
# Plots
ggplot(cfg, aes(x = treatment, y = spore_concentration)) +
stat_summary(fun = mean, geom = "bar", fill = "steelblue", color = "black", width = 0.6) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", color = "black") +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_violin(trim = FALSE, fill = "lightblue", color = "black", alpha = 0.7) +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
### get all relevant data into one frame... improvised as currently everything is all over the place: treatment, colonies analysed, spore load, identity
cfg_frozen_ants <- as.data.frame(read_csv("cfg_frozen_ants.csv"))
cfg_qpcr_all    <- read_csv("CFG_qPCR_all.csv") %>% as.data.frame()
cfg_colony_metadata    <- read_csv("CFG_colony_metadata.csv") %>% as.data.frame()
names(cfg_qpcr_all)
names(cfg_frozen_ants)
cfg_merged <- cfg_frozen_ants %>%
left_join(cfg_qpcr_all, by = c("ID" = "sample_id")) %>%
select(-Comment, -`...9`) %>% as.data.frame()
rm(list = ls())
# load required libraries and functions:
pacman::p_load(dplyr, ggplot2, readr, lme4, lmerTest)
# Set working directory
if (!exists("first_time_use_working_directory") || first_time_use_working_directory == "") { # direct it to where you have config_user_and_hd.R (typically the script folder or github folder)
#standard <- "/Users/gismo/Documents/GitHub/vital_rscripts_git/CFG" # if you are always working from the same directory just put its name here and it will save you some clicking.
standard <- "/media/ael/gismo_hd2/vital/vital_rscripts_git/CFG" # if you are always working from the same directory just put its name here and it will save you some clicking.
selected_dir <- if  (dir.exists(standard)) {standard} else {tcltk::tk_choose.dir(default = "~/", caption = "Select Working Directory")}
if (is.null(selected_dir) || selected_dir == "") {
cat("No directory selected. Exiting.\n")
return()}
setwd(selected_dir)
first_time_use_working_directory <<- getwd()
cat(crayon::blue(getwd()))
} else { setwd(first_time_use_working_directory)
cat(crayon::blue(getwd())) }
list.files()
### get all relevant data into one frame... improvised as currently everything is all over the place: treatment, colonies analysed, spore load, identity
cfg_frozen_ants <- as.data.frame(read_csv("cfg_frozen_ants.csv"))
cfg_frozen_ants
cfg_qpcr_all    <- read_csv("CFG_qPCR_all.csv") %>% as.data.frame()
cfg_qpcr_all
cfg_colony_metadata    <- read_csv("CFG_colony_metadata.csv") %>% as.data.frame()
cfg_colony_metadata
names(cfg_qpcr_all)
names(cfg_frozen_ants)
cfg_merged <- cfg_frozen_ants %>%
left_join(cfg_qpcr_all, by = c("ID" = "sample_id")) %>%
select(-Comment, -`...9`) %>% as.data.frame()
cfg_merged <- cfg_frozen_ants %>%
left_join(cfg_qpcr_all, by = c("ID" = "sample_id")) %>%
select(-"Comment", -"...9") %>% as.data.frame()
cfg_merged <- cfg_frozen_ants %>%
left_join(cfg_qpcr_all, by = c("ID" = "sample_id")) %>%
dplyr::select(-Comment, -`...9`) %>% as.data.frame()
analysed <- cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`))) %>% as.data.frame()
colonies_analysed <- cfg_merged %>%
group_by(Colony) %>%
summarize(n_qpcr_samples = sum(!is.na(`spore_concentration[ng/ul]`))) %>%
filter(n_qpcr_samples > 0, Colony != "c09") %>%
pull(Colony)
cfg_subset <- cfg_merged %>%
filter(Colony %in% colonies_analysed)%>%
rename(colony_id = Colony) %>% as.data.frame()
cfg_colony_metadata_sub <- cfg_colony_metadata %>%
select(colony_id, treatment)%>% as.data.frame()
cfg_colony_metadata_sub <- cfg_colony_metadata %>%
dplyr::select(colony_id, treatment)%>% as.data.frame()
cfg <- cfg_subset %>%
left_join(cfg_colony_metadata_sub, by = "colony_id") %>%
rename(spore_concentration = `spore_concentration[ng/ul]`)%>% as.data.frame()
# Plots
ggplot(cfg, aes(x = treatment, y = spore_concentration)) +
stat_summary(fun = mean, geom = "bar", fill = "steelblue", color = "black", width = 0.6) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", color = "black") +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
# Plots
ggplot(cfg, aes(x = treatment, y = spore_concentration)) +
stat_summary(fun = mean, geom = "bar", fill = "steelblue", color = "black", width = 0.6) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", color = "black") +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_violin(trim = FALSE, fill = "lightblue", color = "black", alpha = 0.7) +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
theme_minimal()
model <- lmer(log10(spore_concentration) ~ treatment + (1 | colony_id), data = cfg)
summary(model)
anova(model)
df <- read.delim("/media/ael/gismo_hd2/vital/fc2/vital_experiment/main_ex_
df <- read.delim("/media/ael/gismo_hd2/vital/fc2/vital_experiment/main_experiment/original_data/treated_worker_list.txt",
header = TRUE, stringsAsFactors = FALSE)
View(df)
dfII <- read.delim("/media/ael/gismo_hd2/vital/fc2/vital_experiment/main_experiment/original_data/treated_worker_list_old_2025-03-05.txt",
header = TRUE, stringsAsFactors = FALSE)
View(dfII)
# Panel 1: Bar plot with SE
p1 <- ggplot(cfg, aes(x = treatment, y = spore_concentration)) +
stat_summary(fun = mean, geom = "bar", fill = "steelblue", color = "black", width = 0.6) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Mean ± SE") +
theme_minimal()
# Panel 2: Boxplot with jitter (log10)
p2 <- ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", color = "black") +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("log₁₀ Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Boxplot (log-transformed)") +
theme_minimal()
# Panel 3: Violin plot with jitter (log10)
p3 <- ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_violin(trim = FALSE, fill = "lightblue", color = "black", alpha = 0.7) +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("log₁₀ Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Violin Plot (log-transformed)") +
theme_minimal()
# Combine them into a single row
(p1 | p2 | p3) +
plot_annotation(title = "Spore Concentration by Treatment (Multiple Visualizations)")
p1 <- ggplot(cfg, aes(x = treatment, y = spore_concentration)) +
stat_summary(fun = mean, geom = "bar", fill = "steelblue", color = "black", width = 0.6) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Mean ± SE") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p2 <- ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", color = "black") +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.3) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Boxplot (log-transformed)") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p3 <- ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_violin(trim = FALSE, fill = "lightblue", color = "black", alpha = 0.3) +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.6) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Violin Plot (log-transformed)") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
(p1 | p2 | p3) +
plot_annotation(title = "Spore Concentration by Treatment (Multiple Visualizations)")
# Plots
p1 <- ggplot(cfg, aes(x = treatment, y = spore_concentration)) +
stat_summary(fun = mean, geom = "bar", fill = "steelblue", color = "black", width = 0.6) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Mean ± SE") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p2 <- ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", color = "black") +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.1) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Boxplot (log-transformed)") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p3 <- ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_violin(trim = FALSE, fill = "lightblue", color = "black", alpha = 0.7) +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.2) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Violin Plot (log-transformed)") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
(p1 | p2 | p3) +
plot_annotation(title = "Spore Concentration by Treatment (Multiple Visualizations)")
# Plots
p1 <- ggplot(cfg, aes(x = treatment, y = spore_concentration)) +
stat_summary(fun = mean, geom = "bar", fill = "steelblue", color = "black", width = 0.6) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Mean ± SE") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p2 <- ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", color = "black") +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.1) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Boxplot (log-transformed)") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p3 <- ggplot(cfg, aes(x = treatment, y = log10(spore_concentration))) +
geom_violin(trim = FALSE, fill = "lightblue", color = "black", alpha = 0.7) +
geom_jitter(width = 0.15, size = 1.5, alpha = 0.1) +
ylab("Spore concentration [ng/µl]") +
xlab("Treatment") +
ggtitle("Violin Plot (log-transformed)") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
(p1 | p2 | p3) +
plot_annotation(title = "Spore Concentration by Treatment (Multiple Visualizations)")
