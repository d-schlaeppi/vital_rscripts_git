mod <- lmer(event_duration ~ t_fungus * t_flupy + (1|replicate), data=self_groom[which(self_groom$ant_status=="NESTMATE"),])
hist(residuals(mod))
qqnorm(residuals(mod))
qqline(residuals(mod))
mod <- lmer(log(event_duration) ~ t_fungus * t_flupy + (1|replicate), data=self_groom[which(self_groom$ant_status=="NESTMATE"),])
mod <- lmer(log(event_duration+1) ~ t_fungus * t_flupy + (1|replicate), data=self_groom[which(self_groom$ant_status=="NESTMATE"),])
hist(residuals(mod))
qqnorm(residuals(mod))
qqline(residuals(mod))
mod <- lmer(log10(event_duration+1) ~ t_fungus * t_flupy + (1|replicate), data=self_groom[which(self_groom$ant_status=="NESTMATE"),])
hist(residuals(mod))
qqnorm(residuals(mod))
qqline(residuals(mod))
mod <- lmer(sqrt(event_duration+1) ~ t_fungus * t_flupy + (1|replicate), data=self_groom[which(self_groom$ant_status=="NESTMATE"),])
hist(residuals(mod))
qqnorm(residuals(mod))
qqline(residuals(mod))
hist(residuals(mod))
mod <- lmer(1/(event_duration+1) ~ t_fungus * t_flupy + (1|replicate), data=self_groom[which(self_groom$ant_status=="NESTMATE"),])
hist(residuals(mod))
qqnorm(residuals(mod))
qqline(residuals(mod))
self_groom$event_duration
hist(self_groom$event_duration)
# Nestmates
self_grooming_duration_nestmate <- glmer(round(event_duration) ~ t_fungus * t_flupy + (1|replicate), family = "poisson", data=self_groom[which(self_groom$ant_status=="NESTMATE"),])
Anova(self_grooming_duration_nestmate)
test_norm(residuals(self_grooming_duration_nestmate))
Anova(self_grooming_duration_nestmate, type="III")
qqnorm(residuals(self_grooming_duration_nestmate))
qqline(residuals(self_grooming_duration_nestmate))
hist(residuals(self_grooming_duration_nestmate))
cld(lsmeans(self_grooming_duration_nestmate, pairwise~t_fungus*t_flupy, adjust="tukey"))
grid.arrange(a,b,c, layout_matrix=hlay)
zero_poisson_model <- glmmTMB(round(event_duration) ~ t_fungus * t_flupy + (1|replicate), ziformula=~1, family = poisson, data = self_groom)
summary(zero_poisson_model)
Anova(zero_poisson_model)
test_norm(residuals(zero_poisson_model)) # residuals not normally distributed but skewness and kurtosis are within acceptable range... might need some modifications
Anova(zero_poisson_model, type="III")
qqnorm(residuals(zero_poisson_model))
qqline(residuals(zero_poisson_model))
hist(residuals(zero_poisson_model))
cld(lsmeans(zero_poisson_model, pairwise~t_fungus*t_flupy, adjust="tukey"))
allo <- subset(behaviour_table, ant_status == "NESTMATE" &
(behaviour == "grooming_other_nestmates" | behaviour == "grooming_focal_ant"))
allo$recording_duration <- allo$recording_duration / 60
allo$frequency <- allo$n / allo$recording_duration
mean_status_a <- aggregate( frequency ~ t_flupy + t_fungus + ant_status + behaviour, FUN=mean, data=allo)
error_status <- aggregate( frequency ~ t_flupy + t_fungus + ant_status + behaviour, FUN=standard_error, data=allo)
mean_status_a$se <- error_status$frequency
colnames(mean_status_a) <- c("Treatment_Flupy", "Treatment_Fungus", "ant_status", "Behaviour", "Mean", "standard_error")
mean_status_a$Behaviour <- factor(mean_status_a$Behaviour,
levels=c("grooming_focal_ant", "grooming_other_nestmates"))
a <- ggplot(mean_status_a, aes(fill = Treatment_Flupy, y = Mean, x = Treatment_Fungus)) +
geom_bar(position = "dodge", stat = "identity") +
geom_errorbar(aes(ymin = Mean - standard_error, ymax = Mean + standard_error),
width = 0.6, position = position_dodge(0.9), size = 1) +
facet_wrap(~ Behaviour, labeller = labeller(Behaviour =
c("grooming_other_nestmates" = "Grooming other nestmates",
"grooming_focal_ant" = "Grooming focal ant"))) +
labs(x = "Fungus Treatment", y = "Mean number events",
title = "Allo-grooming performed by nestmates") +
theme_bw() +
guides(fill = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title.x = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.text = element_text(size = 15),
strip.text = element_text(size = 15),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)
)
mean_status_b <- aggregate( event_duration ~ t_flupy + t_fungus + ant_status + behaviour, FUN=mean, data=allo)
error_status <- aggregate( event_duration ~ t_flupy + t_fungus + ant_status + behaviour, FUN=standard_error, data=allo)
mean_status_b <- aggregate( event_duration ~ t_flupy + t_fungus + ant_status + behaviour, FUN=mean, data=allo)
error_status <- aggregate( event_duration ~ t_flupy + t_fungus + ant_status + behaviour, FUN=standard_error, data=allo)
mean_status_b$se <- error_status$event_duration
colnames(mean_status_b) <- c("Treatment_Flupy", "Treatment_Fungus", "ant_status", "Behaviour", "Mean", "standard_error")
mean_status_b$Behaviour <- factor(mean_status_b$Behaviour,
levels=c("grooming_focal_ant", "grooming_other_nestmates"))
b <- ggplot(mean_status_b, aes(fill = Treatment_Flupy, y = Mean, x = Treatment_Fungus)) +
geom_bar(position = "dodge", stat = "identity") +
geom_errorbar(aes(ymin = Mean - standard_error, ymax = Mean + standard_error),
width = 0.6, position = position_dodge(0.9), size = 1) +
facet_wrap(~ Behaviour, labeller = labeller(Behaviour =
c("grooming_other_nestmates" = "Grooming other nestmates",
"grooming_focal_ant" = "Grooming focal ant"))) +
labs(x = "Fungus Treatment", y = "Mean duration (s)",
title = "") +
theme_bw() +
guides(fill = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title.x = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.text = element_text(size = 15),
strip.text = element_text(size = 15),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)
)
# print(b)
hlay <- rbind(c(1,1,1),
c(1,1,1),
c(2,2,2),
c(2,2,2))
grid.arrange(a,b, layout_matrix=hlay)
### try out lukes box cox transformation:
library(MASS)
b<-boxcox(lm(self_groom$event_duration+1 ~ 1))
lambda <- b$x[which.max(b$y)]
self_groom$boxcox_duration<-((data_p$Proportion.Strength+1)^lambda-1)/lambda
b<-boxcox(lm(self_groom$event_duration+1 ~ 1))
lambda <- b$x[which.max(b$y)]
self_groom$boxcox_duration<-((self_groom$event_duration+1)^lambda-1)/lambda
self_grooming_duration_nestmate <- lmer(boxcox_duration ~ t_fungus * t_flupy + (1|replicate),  data=self_groom[which(self_groom$ant_status=="NESTMATE"),])
Anova(self_grooming_duration_nestmate) # Anova(self_grooming_duration_nestmate, type="III")
test_norm(residuals(self_grooming_duration_nestmate))
qqnorm(residuals(self_grooming_duration_nestmate))
qqline(residuals(self_grooming_duration_nestmate))
hist(residuals(self_grooming_duration_nestmate))
cld(lsmeans(self_grooming_duration_nestmate, pairwise~t_fungus*t_flupy, adjust="tukey"))
allo_grooming_Nb_focal <- glmer(n ~ t_fungus * t_flupy + (1|replicate), family="poisson", data=allo)
test_norm(residuals(self_grooming_Nb_focal))
Anova(self_grooming_Nb_focal, type="III")
qqnorm(residuals(self_grooming_Nb_focal))
qqline(residuals(self_grooming_Nb_focal))
hist(residuals(self_grooming_Nb_focal))
# posthoc and compact letter display
cld(lsmeans(self_grooming_Nb_focal, pairwise~t_fungus*t_flupy, adjust="tukey"))
grid.arrange(a,b, layout_matrix=hlay)
allo <- subset(behaviour_table, ant_status == "NESTMATE" &
(behaviour == "grooming_other_nestmates" | behaviour == "grooming_focal_ant"))
allo$recording_duration <- allo$recording_duration / 60
allo$frequency <- allo$n / allo$recording_duration
mean_status_a <- aggregate( frequency ~ t_flupy + t_fungus + ant_status + behaviour, FUN=mean, data=allo)
error_status <- aggregate( frequency ~ t_flupy + t_fungus + ant_status + behaviour, FUN=standard_error, data=allo)
mean_status_a$se <- error_status$frequency
colnames(mean_status_a) <- c("Treatment_Flupy", "Treatment_Fungus", "ant_status", "Behaviour", "Mean", "standard_error")
mean_status_a$Behaviour <- factor(mean_status_a$Behaviour,
levels=c("grooming_focal_ant", "grooming_other_nestmates"))
a <- ggplot(mean_status_a, aes(fill = Treatment_Flupy, y = Mean, x = Treatment_Fungus)) +
geom_bar(position = "dodge", stat = "identity") +
geom_errorbar(aes(ymin = Mean - standard_error, ymax = Mean + standard_error),
width = 0.6, position = position_dodge(0.9), size = 1) +
facet_wrap(~ Behaviour, labeller = labeller(Behaviour =
c("grooming_other_nestmates" = "Grooming other nestmates",
"grooming_focal_ant" = "Grooming focal ant"))) +
labs(x = "Fungus Treatment", y = "Mean number events",
title = "Allo-grooming performed by nestmates") +
theme_bw() +
guides(fill = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title.x = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.text = element_text(size = 15),
strip.text = element_text(size = 15),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)
)
mean_status_b <- aggregate( event_duration ~ t_flupy + t_fungus + ant_status + behaviour, FUN=mean, data=allo)
error_status <- aggregate( event_duration ~ t_flupy + t_fungus + ant_status + behaviour, FUN=standard_error, data=allo)
mean_status_b$se <- error_status$event_duration
colnames(mean_status_b) <- c("Treatment_Flupy", "Treatment_Fungus", "ant_status", "Behaviour", "Mean", "standard_error")
mean_status_b$Behaviour <- factor(mean_status_b$Behaviour,
levels=c("grooming_focal_ant", "grooming_other_nestmates"))
b <- ggplot(mean_status_b, aes(fill = Treatment_Flupy, y = Mean, x = Treatment_Fungus)) +
geom_bar(position = "dodge", stat = "identity") +
geom_errorbar(aes(ymin = Mean - standard_error, ymax = Mean + standard_error),
width = 0.6, position = position_dodge(0.9), size = 1) +
facet_wrap(~ Behaviour, labeller = labeller(Behaviour =
c("grooming_other_nestmates" = "Grooming other nestmates",
"grooming_focal_ant" = "Grooming focal ant"))) +
labs(x = "Fungus Treatment", y = "Mean duration (s)",
title = "") +
theme_bw() +
guides(fill = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title.x = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.text = element_text(size = 15),
strip.text = element_text(size = 15),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)
)
# print(b)
hlay <- rbind(c(1,1,1),
c(1,1,1),
c(2,2,2),
c(2,2,2))
grid.arrange(a,b, layout_matrix=hlay)
# posthoc and compact letter display
cld(lsmeans(self_grooming_Nb_focal, pairwise~t_fungus*t_flupy, adjust="tukey"))
head(allo)
allo_grooming_Nb_focal <- glmer(n ~ t_fungus * t_flupy + (1|replicate), family="poisson", data=allo[which(allo$behaviour=="grooming_focal_ant"),])
test_norm(residuals(self_grooming_Nb_focal))
Anova(self_grooming_Nb_focal, type="III")
qqnorm(residuals(self_grooming_Nb_focal))
qqline(residuals(self_grooming_Nb_focal))
hist(residuals(self_grooming_Nb_focal))
# posthoc and compact letter display
cld(lsmeans(self_grooming_Nb_focal, pairwise~t_fungus*t_flupy, adjust="tukey"))
allo_grooming_Nb_focal <- glmer(n ~ t_fungus * t_flupy + (1|replicate), family="poisson", data=allo[which(allo$behaviour=="grooming_focal_ant"),])
test_norm(residuals(allo_grooming_Nb_focal))
Anova(allo_grooming_Nb_focal, type="III")
qqnorm(residuals(allo_grooming_Nb_focal))
qqline(residuals(allo_grooming_Nb_focal))
hist(residuals(allo_grooming_Nb_focal))
# posthoc and compact letter display
cld(lsmeans(allo_grooming_Nb_focal, pairwise~t_fungus*t_flupy, adjust="tukey"))
allo$behaviour
allo$n
head(allo)
hist(allo$n)
zero_poisson_model <- glmmTMB(n ~ t_fungus * t_flupy + (1|replicate), ziformula=~1, family = poisson, data = allo[which(allo$behaviour=="grooming_focal_ant"),])
summary(zero_poisson_model)
test_norm(residuals(zero_poisson_model)) # residuals not normally distributed & skewness and kurtosis are not within acceptable range
Anova(zero_poisson_model, type="III")
qqnorm(residuals(zero_poisson_model))
qqline(residuals(zero_poisson_model))
hist(residuals(zero_poisson_model))
cld(lsmeans(zero_poisson_model, pairwise~t_fungus*t_flupy, adjust="tukey"))
head(allo)
poison <- subset(behaviour_table, behaviour=="poison_spraying")
poison$recording_duration <- poison$recording_duration / 60
poison$frequency <- poison$n / poison$recording_duration
mean_status_p <- aggregate( frequency ~ t_flupy + t_fungus + ant_status, FUN=mean, data=poison)
error_status <- aggregate( frequency ~ t_flupy + t_fungus + ant_status, FUN=standard_error, data=poison)
mean_status_p$se <- error_status$frequency
colnames(mean_status_p) <- c("Treatment_Fungus", "Treatment_Flupy", "ant_status", "Mean", "Standard_error")
p <- ggplot(mean_status_p, aes(fill = Treatment_Fungus, y = Mean, x = Treatment_Flupy)) +
geom_bar(position = "dodge", stat = "identity", width = 0.7) +
geom_errorbar(aes(ymin = Mean - Standard_error, ymax = Mean + Standard_error),
position = position_dodge(0.9), width = 0.2, size = 0.7) +
facet_wrap(~ ant_status) +
labs(x = "Fungus Treatment", y = "Mean number poison spraying",
title = "Mean number of poison spraying events per ant per minute") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title = element_text(size = 15),
legend.title = element_blank(),
legend.text = element_text(size = 12),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "bottom",
plot.title = element_text(size = 16, face = "italic"),
plot.title.position = "plot"
)
# just flupy
mean_status_p2 <- aggregate( frequency ~  t_flupy + ant_status, FUN=mean, data=poison)
error_status <- aggregate( frequency ~  t_flupy + ant_status, FUN=standard_error, data=poison)
mean_status_p2$se <- error_status$frequency
colnames(mean_status_p2) <- c("Treatment_Flupy", "ant_status", "Mean", "standard_error")
p2 <- ggplot(mean_status_p2, aes(fill = Treatment_Flupy, y = Mean, x = Treatment_Flupy)) +
geom_bar(position = "dodge", stat = "identity") +
geom_errorbar(aes(ymin = Mean - standard_error, ymax = Mean + standard_error),
width = 0.6, position = position_dodge(0.9), size = 1) +
facet_wrap(~ ant_status) +
labs(x = "Treatment", y = "Mean number poison spraying",
title = "Flupy treatment only") +
theme_bw() +
guides(fill = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.text = element_text(size = 15),
strip.text = element_text(size = 15),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 16, face = "italic")
)
# fungus only
mean_status_p3 <- aggregate( frequency ~  t_fungus + ant_status, FUN=mean, data=poison)
error_status <- aggregate( frequency ~  t_fungus + ant_status, FUN=standard_error, data=poison)
mean_status_p3$se <- error_status$frequency
colnames(mean_status_p3) <- c("Treatment_Fungus", "ant_status", "Mean", "standard_error")
p3 <- ggplot(mean_status_p3, aes(fill = Treatment_Flupy, y = Mean, x = Treatment_Flupy)) +
geom_bar(position = "dodge", stat = "identity") +
geom_errorbar(aes(ymin = Mean - standard_error, ymax = Mean + standard_error),
width = 0.6, position = position_dodge(0.9), size = 1) +
facet_wrap(~ ant_status) +
labs(x = "Treatment", y = "Mean number poison spraying",
title = "Flupy treatment only") +
theme_bw() +
guides(fill = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.text = element_text(size = 15),
strip.text = element_text(size = 15),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 16, face = "italic")
)
# plot all three plots toghether
hlay <- rbind(c(1,1,1,1),
c(1,1,1,1),
c(2,2,3,3),
c(2,2,3,3))
grid.arrange(p,p2,p3, layout_matrix=hlay)
poison <- subset(behaviour_table, behaviour=="poison_spraying")
poison$recording_duration <- poison$recording_duration / 60
poison$frequency <- poison$n / poison$recording_duration
mean_status_p <- aggregate( frequency ~ t_flupy + t_fungus + ant_status, FUN=mean, data=poison)
error_status <- aggregate( frequency ~ t_flupy + t_fungus + ant_status, FUN=standard_error, data=poison)
mean_status_p$se <- error_status$frequency
colnames(mean_status_p) <- c("Treatment_Fungus", "Treatment_Flupy", "ant_status", "Mean", "Standard_error")
p <- ggplot(mean_status_p, aes(fill = Treatment_Fungus, y = Mean, x = Treatment_Flupy)) +
geom_bar(position = "dodge", stat = "identity", width = 0.7) +
geom_errorbar(aes(ymin = Mean - Standard_error, ymax = Mean + Standard_error),
position = position_dodge(0.9), width = 0.2, size = 0.7) +
facet_wrap(~ ant_status) +
labs(x = "Fungus Treatment", y = "Mean number poison spraying",
title = "Mean number of poison spraying events per ant per minute") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title = element_text(size = 15),
legend.title = element_blank(),
legend.text = element_text(size = 12),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "bottom",
plot.title = element_text(size = 16, face = "italic"),
plot.title.position = "plot"
)
# just flupy
mean_status_p2 <- aggregate( frequency ~  t_flupy + ant_status, FUN=mean, data=poison)
error_status <- aggregate( frequency ~  t_flupy + ant_status, FUN=standard_error, data=poison)
mean_status_p2$se <- error_status$frequency
colnames(mean_status_p2) <- c("Treatment_Flupy", "ant_status", "Mean", "standard_error")
p2 <- ggplot(mean_status_p2, aes(fill = Treatment_Flupy, y = Mean, x = Treatment_Flupy)) +
geom_bar(position = "dodge", stat = "identity") +
geom_errorbar(aes(ymin = Mean - standard_error, ymax = Mean + standard_error),
width = 0.6, position = position_dodge(0.9), size = 1) +
facet_wrap(~ ant_status) +
labs(x = "Treatment", y = "Mean number poison spraying",
title = "Flupy treatment only") +
theme_bw() +
guides(fill = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.text = element_text(size = 15),
strip.text = element_text(size = 15),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 16, face = "italic")
)
# fungus only
mean_status_p3 <- aggregate( frequency ~  t_fungus + ant_status, FUN=mean, data=poison)
error_status <- aggregate( frequency ~  t_fungus + ant_status, FUN=standard_error, data=poison)
mean_status_p3$se <- error_status$frequency
colnames(mean_status_p3) <- c("Treatment_Fungus", "ant_status", "Mean", "standard_error")
p3 <- ggplot(mean_status_p3, aes(fill = Treatment_Flupy, y = Mean, x = Treatment_Flupy)) +
geom_bar(position = "dodge", stat = "identity") +
geom_errorbar(aes(ymin = Mean - standard_error, ymax = Mean + standard_error),
width = 0.6, position = position_dodge(0.9), size = 1) +
facet_wrap(~ ant_status) +
labs(x = "Treatment", y = "Mean number poison spraying",
title = "Flupy treatment only") +
theme_bw() +
guides(fill = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.text = element_text(size = 15),
strip.text = element_text(size = 15),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 16, face = "italic")
)
# plot all three plots toghether
hlay <- rbind(c(1,1,1,1),
c(1,1,1,1),
c(2,2,3,3),
c(2,2,3,3))
grid.arrange(p,p2,p3, layout_matrix=hlay)
print(p)
print(p2)
print(p3)
p3 <- ggplot(mean_status_p3, aes(fill = Treatment_Fungus, y = Mean, x = Treatment_Fungus)) +
geom_bar(position = "dodge", stat = "identity") +
geom_errorbar(aes(ymin = Mean - standard_error, ymax = Mean + standard_error),
width = 0.6, position = position_dodge(0.9), size = 1) +
facet_wrap(~ ant_status) +
labs(x = "Treatment", y = "Mean number poison spraying",
title = "Flupy treatment only") +
theme_bw() +
guides(fill = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.text = element_text(size = 15),
strip.text = element_text(size = 15),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 16, face = "italic")
)
grid.arrange(p,p2,p3, layout_matrix=hlay)
aggro <- subset(behaviour_table, behaviour=="aggression")
aggro$recording_duration <- aggro$recording_duration / 60
aggro$frequency <- aggro$n / aggro$recording_duration
mean_status_a1 <- aggregate( frequency ~ t_flupy + t_fungus + ant_status, FUN=mean, data=aggro)
error_status <- aggregate( frequency ~ t_flupy + t_fungus + ant_status, FUN=standard_error, data=aggro)
mean_status_a1$se <- error_status$frequency
colnames(mean_status_a1) <- c("Treatment_Fungus", "Treatment_Flupy", "ant_status", "Mean", "Standard_error")
a1 <- ggplot(mean_status_a1, aes(fill = Treatment_Fungus, y = Mean, x = Treatment_Flupy)) +
geom_bar(position = "dodge", stat = "identity", width = 0.7) +
geom_errorbar(aes(ymin = Mean - Standard_error, ymax = Mean + Standard_error),
position = position_dodge(0.9), width = 0.2, size = 0.7) +
facet_wrap(~ ant_status) +
labs(x = "Fungus Treatment", y = "Mean number aggression",
title = "Mean number of aggression events per ant per minute") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title = element_text(size = 15),
legend.title = element_blank(),
legend.text = element_text(size = 12),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "bottom",
plot.title = element_text(size = 16, face = "italic"),
plot.title.position = "plot"
)
print(a1)
trophy <- subset(behaviour_table, behaviour=="trophallaxis")
trophy$recording_duration <- trophy$recording_duration / 60
trophy$frequency <- trophy$n / trophy$recording_duration
mean_status_t1 <- aggregate( frequency ~ t_flupy + t_fungus + ant_status, FUN=mean, data=trophy)
error_status <- aggregate( frequency ~ t_flupy + t_fungus + ant_status, FUN=standard_error, data=trophy)
mean_status_t1$se <- error_status$frequency
colnames(mean_status_t1) <- c("Treatment_Fungus", "Treatment_Flupy", "ant_status", "Mean", "Standard_error")
t1 <- ggplot(mean_status_t1, aes(fill = Treatment_Fungus, y = Mean, x = Treatment_Flupy)) +
geom_bar(position = "dodge", stat = "identity", width = 0.7) +
geom_errorbar(aes(ymin = Mean - Standard_error, ymax = Mean + Standard_error),
position = position_dodge(0.9), width = 0.2, size = 0.7) +
facet_wrap(~ ant_status) +
labs(x = "Fungus Treatment", y = "Mean number trophallaxis events",
title = "Mean number of trophallaxis events per ant per minute") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title = element_text(size = 15),
legend.title = element_blank(),
legend.text = element_text(size = 12),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "bottom",
plot.title = element_text(size = 16, face = "italic"),
plot.title.position = "plot"
)
print(t1)
brood <- subset(behaviour_table, behaviour=="brood_tending")
brood$recording_duration <- brood$recording_duration / 60
brood$frequency <- brood$n / brood$recording_duration
mean_status_b1 <- aggregate( frequency ~ t_flupy + t_fungus + ant_status, FUN=mean, data=brood)
error_status <- aggregate( frequency ~ t_flupy + t_fungus + ant_status, FUN=standard_error, data=brood)
mean_status_b1$se <- error_status$frequency
colnames(mean_status_b1) <- c("Treatment_Fungus", "Treatment_Flupy", "ant_status", "Mean", "Standard_error")
b1 <- ggplot(mean_status_b1, aes(fill = Treatment_Fungus, y = Mean, x = Treatment_Flupy)) +
geom_bar(position = "dodge", stat = "identity", width = 0.7) +
geom_errorbar(aes(ymin = Mean - Standard_error, ymax = Mean + Standard_error),
position = position_dodge(0.9), width = 0.2, size = 0.7) +
facet_wrap(~ ant_status) +
labs(x = "Fungus Treatment", y = "Mean number brood tending events",
title = "Mean number of brood tending events per ant per minute") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "sans"),
axis.title = element_text(size = 15),
legend.title = element_blank(),
legend.text = element_text(size = 12),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "bottom",
plot.title = element_text(size = 16, face = "italic"),
plot.title.position = "plot"
)
print(b1)
