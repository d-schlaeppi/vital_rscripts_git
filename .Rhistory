xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 2.6, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(5, 1, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(1, 0, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(1, 0.2, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
legend(1, 0.3, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV,
main = "ABPV",
xlab = "% of samples tested positive for ABPV",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(1, 0.3, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
barplot(percent_positive_ABPV_minus,
main = "ABPV negative-sense strand",
xlab = "% of samples tested positive",
xlim = c(0,100),
ylab = "",
names.arg = c("workers (N=18)", "queens (N=16)", "workers (N=2)", "queens (N=1)"),
col = col,
las = 1,
ylim = rev(range(0, 5)),
horiz = TRUE)
mtext("tested samples", side = 2, las = 1, font = 2, line = 1.1, at= -0.2)
legend(73, 0.25, legend = c("treatment", "controls"),
fill = c("black", "darkgrey"))
?rsequ
rm(list=ls())
rm(list = setdiff(ls(), "first_time_use_working_directory"))
# load required libraries and functions:
{
library(dplyr) #contains pipe operator
library(ggplot2)
library(broom) #contains tidy()
library(viridis)
library(lme4)
library(car) # Anova()
library(multcomp) # contains cld
library(multcompView)
library(emmeans) # contains emmeans()
library(coxme)
library(survival)
library(survminer) # used in the analysis of the survival curves incl ggsurvplot
library(scales)
library(clipr)
library(gridExtra)
}
# Set working directory
if (!exists("first_time_use_working_directory") || first_time_use_working_directory == "") {
library(tcltk)
setwd(tk_choose.dir(default = "~/", caption = "Select Working Directory")) # Direct it to where you have config_user_and_hd.R which should be in the script_directory
first_time_use_working_directory <- getwd()
setwd(first_time_use_working_directory)
} else {setwd(first_time_use_working_directory)}
library(tcltk)
install.packages("tcltk")
library(tcltk)
rm(list = setdiff(ls(), "first_time_use_working_directory"))
# load required libraries and functions:
{
library(dplyr) #contains pipe operator
library(ggplot2)
library(broom) #contains tidy()
library(viridis)
library(lme4)
library(car) # Anova()
library(multcomp) # contains cld
library(multcompView)
library(emmeans) # contains emmeans()
library(coxme)
library(survival)
library(survminer) # used in the analysis of the survival curves incl ggsurvplot
library(scales)
library(clipr)
library(gridExtra)
}
# Set working directory
if (!exists("first_time_use_working_directory") || first_time_use_working_directory == "") {
library(tcltk)
setwd(tk_choose.dir(default = "~/", caption = "Select Working Directory")) # Direct it to where you have config_user_and_hd.R which should be in the script_directory
first_time_use_working_directory <- getwd()
setwd(first_time_use_working_directory)
} else {setwd(first_time_use_working_directory)}
# load required libraries and functions:
{
library(tcltk)
library(dplyr) #contains pipe operator
library(ggplot2)
library(broom) #contains tidy()
library(viridis)
library(lme4)
library(car) # Anova()
library(multcomp) # contains cld
library(multcompView)
library(emmeans) # contains emmeans()
library(coxme)
library(survival)
library(survminer) # used in the analysis of the survival curves incl ggsurvplot
library(scales)
library(clipr)
library(gridExtra)
}
rm(list = setdiff(ls(), "first_time_use_working_directory"))
library(tcltk)
library(dplyr)
# Set the path to the directory containing the folders
base_path <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR/"
data_list <- list()
folder <- M1
folder <- "M1"
folder_path <- file.path(base_path, folder)
folder_path
file_list <- list.files(folder_path, pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$", full.names = TRUE)
file_list
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = TRUE)
}))
folders <- c("M1", "M2")
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = TRUE)
}))
file_list
# Check for plate numbers from 01 to 69
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
plate_numbers
# Check for plate numbers from 01 to 69
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers
file_list
# Check for plate numbers from 01 to 69
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers
file_list
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = FALSE)
}))
file_list
# Check for plate numbers from 01 to 69
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
plate_numbers
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}
for (plate_number in 1:69) {
plate_number <- 1
file_name <- file.path(base_path, folder, paste0("DS_flugus_cfg_plate", plate_number, " - Text Report Data.txt"))
file_name
base_path
base_path
folder
paste0("/DS_flugus_cfg_plate", plate_number, " - Text Report Data.txt")
plate_number <- 1
plate_number
paste0("/DS_flugus_cfg_plate", plate_number, " - Text Report Data.txt")
plate_str <- sprintf("%02d", plate_number)  <- sprintf("%02d", plate_number)
plate_str <- sprintf("%02d", plate_number)
file_name <- file.path(base_path, folder, paste0("/DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt"))
file_name
folder
base_path
base_path <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR"
folders <- c("M1", "M2")
data_list <- list()
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = FALSE)
}))
# Check for plate numbers from 01 to 69
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}
plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
file_name <- file.path(base_path, folder, paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt"))
file_name
data <- read.table(file_name, header = TRUE, sep = "\t")  # Adjust the sep parameter if necessary
data
data <- data %>% # add variables
mutate(plate = plate_str,
machine = folder)
data
# Remove the variable X and rename others
data <- data %>%
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data <- read.table(file_name, header = TRUE, sep = "\t")  # Adjust the sep parameter if necessary
# Remove the variable X and rename others
data <- data %>%
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data
getwd()
base_path
base_path
rm(list = ls())
# Merging qPCR output tables:
library(dplyr)
base_path <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR"
folders <- c("M1", "M2")
data_list <- list()
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = FALSE)
}))
# check if plate numbers from 01 to 69 exist
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}
for (plate_number in 1:69) { # plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
file_name <- file.path(base_path, folder, paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt"))
data <- read.table(file_name, header = TRUE, sep = "\t")
data <- data %>% # remove the variable X and rename other variables and create plate and machine
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data_list[[length(data_list) + 1]] <- data # add each table to the list of tables
}
combined_data <- bind_rows(data_list) # merge all lists into a single table
output_file <- file.path(base_path, "/CFG_all_qPCR_data_raw.txt")
write.table(combined_data, file = output_file, sep = "\t", row.names = FALSE, quote = FALSE)
base_path
file_list
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = TRUE)
}))
file_list
# check if plate numbers from 01 to 69 exist
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = TRUE)
}))
file_list
# check if plate numbers from 01 to 69 exist
plate_numbers <- sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}
plate_numbers
test_file <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR/M1/DS_flugus_cfg_plate01 - Text Report Data.txt"
sub("DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", test_file)
plate_numbers <- sub(".*/DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}
if (!all(sort(plate_numbers) == 1:69)) {
stop("Missing plate numbers in the folders.")
}if (!all(sort(plate_numbers, na.last = TRUE) == 1:69)) {
if (!all(sort(plate_numbers, na.last = TRUE) == 1:69)) {
stop("Missing plate numbers in the folders.")
} else {
# Print message in green
cat("\033[32mAll good, go ahead\033[39m\n")
}
plate_number <- 01
file_list
plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
plate_str
file_name <- file_list[grepl(paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt$"), file_list)]
file_name
data <- read.table(file_name, header = TRUE, sep = "\t")
data <- data %>% # remove the variable X and rename other variables and create plate and machine
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
file_name
folder <- sub(".*/(M1|M2)/.*", "\\1", file_name)
folder
for (plate_number in 1:69) { # plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
file_name <- file_list[grepl(paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt$"), file_list)]
folder <- sub(".*/(M1|M2)/.*", "\\1", file_name)
data <- read.table(file_name, header = TRUE, sep = "\t")
data <- data %>% # remove the variable X and rename other variables and create plate and machine
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data_list[[length(data_list) + 1]] <- data # add each table to the list of tables
}
rm(list = ls())
# Merging qPCR output tables:
library(dplyr)
base_path <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR"
folders <- c("M1", "M2")
data_list <- list()
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = TRUE)
}))
plate_numbers <- sub(".*/DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers, na.last = TRUE) == 1:69)) {
stop("Missing plate numbers in the folders.")
} else {
# Print message in green
cat("\033[32mAll good, go ahead\033[39m\n")
}
for (plate_number in 1:69) { # plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
file_name <- file_list[grepl(paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt$"), file_list)]
folder <- sub(".*/(M1|M2)/.*", "\\1", file_name)
data <- read.table(file_name, header = TRUE, sep = "\t")
data <- data %>% # remove the variable X and rename other variables and create plate and machine
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data_list[[length(data_list) + 1]] <- data # add each table to the list of tables
}
combined_data <- bind_rows(data_list) # merge all lists into a single table
rm(list = ls())
# Merging qPCR output tables:
library(dplyr)
base_path <- "/Users/gismo/Documents/Uni/DS Bees Home/Bristol/Projects/Flugus/CFG_ColonyFLUGUS/qPCR"
folders <- c("M1", "M2")
data_list <- list()
file_list <- unlist(lapply(folders, function(folder) {
list.files(file.path(base_path, folder),
pattern = "DS_flugus_cfg_plate\\d{2} - Text Report Data\\.txt$",
full.names = TRUE)
}))
plate_numbers <- sub(".*/DS_flugus_cfg_plate(\\d{2}) - Text Report Data\\.txt$", "\\1", file_list)
plate_numbers <- as.numeric(plate_numbers)
if (!all(sort(plate_numbers, na.last = TRUE) == 1:69)) {
stop("Missing plate numbers in the folders.")
} else {
# Print message in green
cat("\033[32mAll good, go ahead\033[39m\n")
}
for (plate_number in 1:69) { # plate_number <- 01
plate_str <- sprintf("%02d", plate_number)
file_name <- file_list[grepl(paste0("DS_flugus_cfg_plate", plate_str, " - Text Report Data.txt$"), file_list)]
folder <- sub(".*/(M1|M2)/.*", "\\1", file_name)
data <- read.table(file_name, header = TRUE, sep = "\t")
data <- data %>% # remove the variable X and rename other variables and create plate and machine
select(-X) %>%
rename(
well = Well,
well_name = Well.Name,
dye = Dye,
well_type = Well.Type,
R_last = R.Last,
threshold_dR = Threshold..dR.,
ct_dR = Ct..dR.
) %>%
mutate(plate = plate_str,
machine = folder)
data_list[[length(data_list) + 1]] <- data # add each table to the list of tables
}
data_list
combined_data <- bind_rows(data_list) # merge all lists into a single table
convert_ct_dR_to_char <- function(df) {
df$ct_dR <- as.character(df$ct_dR)  # Convert everything to character
df$ct_dR[df$ct_dR == "No Ct"] <- "No Ct"  # Ensure "No Ct" stays as is
return(df)
}
# Apply the function to each data frame in the list
data_list <- lapply(data_list, convert_ct_dR_to_char)
combined_data <- bind_rows(data_list) # merge all lists into a single table
output_file <- file.path(base_path, "/CFG_all_qPCR_data_raw.txt")
write.table(combined_data, file = output_file, sep = "\t", row.names = FALSE, quote = FALSE)
#### prerequisites ####
rm(list=ls())
# load necessary libraries
library(dplyr)
library(ggplot2)
library(ggdark)
library(plotly) # 3d graph
library(viridis)
library(pscl) # zero inflated poisson distribution model
library(glmmTMB) # zero inflated poisson distribution model with random factors
library(entropy)
#or
setwd("/Users/gismo/Documents/GitHub/vital_rscripts_git/") #home mac
#dat <- read.csv("vital_treatment_feeding_annotation.csv", header = TRUE, stringsAsFactors = F)
dat <- read.csv("vital_treatment_feeding_annotation_2.csv", header = TRUE, stringsAsFactors = F)
head(dat)
# create a data frame with the missing times from the colonies with an error in fort
colony <- c("c05", "c09", "c12", "c13", "c17", "c21")
time <- c("2022-03-16T09:18:34.196Z", "2022-03-23T08:46:06.150Z", "2022-03-26T09:47:19:881Z", "2022-03-30T09:13:39.464Z", "2022-04-06T09:14:40.527Z", "2022-04-13T09:36:14:331Z")
time_correction_df <- data.frame(colony, time)
for (i in 1:nrow(dat)) {
if (is.na(dat$time_start[i])) {
dat$time_diff[i] <- 0 # for the ants that had NA set time feeding as 0 then move on.
next
}
if (nchar(dat$time_start[i]) == 30) { # if time is in the format of fort calculate the duration and save it
dat$time_diff[i] <- abs(as.numeric(difftime(as.POSIXct(dat$time_start[i], format = "%Y-%m-%dT%H:%M:%S"), as.POSIXct(dat$time_stop[i], format = "%Y-%m-%dT%H:%M:%S"), units="secs")))
} else { # if time is in the format of the mpv player reformat it so a format similar to the fort format then calculate the feeding duration
colony <- dat$colony[i]
correction_factor <- time_correction_df$time[which(time_correction_df$colony == colony)]
correction_time <- as.POSIXct(correction_factor, format = "%Y-%m-%dT%H:%M:%S")
start_offset <- as.difftime(dat$time_start[i], format = "%H:%M:%OS")
stop_offset  <- as.difftime(dat$time_stop[i], format = "%H:%M:%OS")
dat$time_start[i] <- as.character(as.POSIXct(correction_time + start_offset, origin = "1970-01-01"))
dat$time_stop[i] <-  as.character(as.POSIXct(correction_time + stop_offset , origin = "1970-01-01"))
dat$time_diff[i] <- abs(as.numeric(time_diff_sec <- difftime(dat$time_start[i], dat$time_stop[i], units="secs")))
}
}
dat
View(dat)
