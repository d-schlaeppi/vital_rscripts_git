axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
# axis.ticks = element_line(linewidth = 1),
strip.text = element_text(size = 14),
legend.key.width = unit(2.5, "line"),
panel.grid = element_line(colour = "gray80", size = 0.5),
panel.background = element_rect(fill = "gray95")
)
surv_plot
surv_plot <- ggsurvplot(surv_plot, data = dat_post_surv,
censor = FALSE,
legend.title = 'Treatment',
legend.labs = legend,
legend = c(0.15, 0.25),
xlab = 'Time (days)',
ylab = '% Surviving',
break.time.by = 2,
#xlim = c(0, 10),
ylim = c(0.75,1),
ggtheme = theme_bw(), # choose a theme like theme_bw theme_classic accoring to personl test and formatting requirements
palette = viridis(4, begin = 0, end = 1, option = 5), # choose colors - viridis palettes such as the classic or magma or any other are nice and mostly color blind friendly
conf.int = TRUE,
conf.int.alpha = 0.1,
linetype = line_types
)
surv_plot <- ggsurvplot(surv_plot, data = dat_post_surv,
censor = FALSE,
legend.title = 'Treatment',
legend.labs = legend,
legend = c(0.15, 0.25),
xlab = 'Time (days)',
ylab = '% Surviving',
break.time.by = 2,
#xlim = c(0, 10),
ylim = c(0.75,1),
ggtheme = theme_grey(), # choose a theme like theme_bw theme_classic accoring to personl test and formatting requirements
palette = viridis(4, begin = 0, end = 1, option = 5), # choose colors - viridis palettes such as the classic or magma or any other are nice and mostly color blind friendly
conf.int = TRUE,
conf.int.alpha = 0.1,
linetype = line_types
)
### plot with gg
surv_plot <- survfit(Surv(time = SurvivalTime, event = Censor) ~ 1 + Treatment, data = dat_pre_surv)
legend <- c("control", "low", "high", "focal")
line_types <- c("solid", "dashed", "dotted", "dotdash")
surv_plot <- ggsurvplot(surv_plot, data = dat_post_surv,
censor = FALSE,
legend.title = 'Treatment',
legend.labs = legend,
legend = c(0.15, 0.25),
xlab = 'Time (days)',
ylab = '% Surviving',
break.time.by = 2,
#xlim = c(0, 10),
ylim = c(0.75,1),
ggtheme = theme_bw(), # choose a theme like theme_bw theme_classic accoring to personl test and formatting requirements
palette = viridis(4, begin = 0, end = 1, option = 5), # choose colors - viridis palettes such as the classic or magma or any other are nice and mostly color blind friendly
conf.int = TRUE,
conf.int.alpha = 0.1,
linetype = line_types
)
# adjust further variables
surv_plot$plot <- surv_plot$plot +  # theme(panel.grid = element_blank()) +
theme(
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
# axis.ticks = element_line(linewidth = 1),
strip.text = element_text(size = 14),
legend.key.width = unit(2.5, "line"),
panel.grid = element_line(colour = "gray80", size = 0.5),
panel.background = element_rect(fill = "gray95")
)
surv_plot
# adjust further variables
surv_plot$plot <- surv_plot$plot + theme(panel.grid = element_blank()) +
theme(
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
# axis.ticks = element_line(linewidth = 1),
strip.text = element_text(size = 14),
legend.key.width = unit(2.5, "line"),
panel.grid = element_line(colour = "gray80", size = 0.5),
panel.background = element_rect(fill = "gray95")
)
surv_plot
### plot with gg
surv_plot <- survfit(Surv(time = SurvivalTime, event = Censor) ~ 1 + Treatment, data = dat_pre_surv)
legend <- c("control", "low", "high", "focal")
line_types <- c("solid", "dashed", "dotted", "dotdash")
surv_plot <- ggsurvplot(surv_plot, data = dat_post_surv,
censor = FALSE,
legend.title = 'Treatment',
legend.labs = legend,
legend = c(0.15, 0.25),
xlab = 'Time (days)',
ylab = '% Surviving',
break.time.by = 2,
#xlim = c(0, 10),
ylim = c(0.75,1),
ggtheme = theme_bw(), # choose a theme like theme_bw theme_classic accoring to personl test and formatting requirements
palette = viridis(4, begin = 0, end = 1, option = 5), # choose colors - viridis palettes such as the classic or magma or any other are nice and mostly color blind friendly
conf.int = TRUE,
conf.int.alpha = 0.1,
linetype = line_types
)
# adjust further variables
surv_plot$plot <- surv_plot$plot + theme(panel.grid = element_blank()) +
theme(
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
# axis.ticks = element_line(linewidth = 1),
strip.text = element_text(size = 14),
legend.key.width = unit(2.5, "line"),
panel.grid = element_line(colour = "gray80", size = 0.5),
panel.background = element_rect(fill = "gray95")
)
surv_plot
surv_plot <- ggsurvplot(surv_plot, data = dat_post_surv,
censor = FALSE,
legend.title = 'Treatment',
legend.labs = legend,
legend = c(0.15, 0.25),
xlab = 'Time (days)',
ylab = '% Surviving',
break.time.by = 2,
#xlim = c(0, 10),
ylim = c(0.75,1),
ggtheme = theme_bw(), # choose a theme like theme_bw theme_classic accoring to personl test and formatting requirements
palette = viridis(4, begin = 0, end = 1, option = 5), # choose colors - viridis palettes such as the classic or magma or any other are nice and mostly color blind friendly
conf.int = TRUE,
conf.int.alpha = 0.1,
linetype = line_types
)
# adjust further variables
surv_plot$plot <- surv_plot$plot + theme(panel.grid = element_blank()) +
theme(
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
# axis.ticks = element_line(linewidth = 1),
strip.text = element_text(size = 14),
legend.key.width = unit(2.5, "line"),
# panel.grid = element_line(colour = "gray80", size = 0.5),
# panel.background = element_rect(fill = "gray95")
)
surv_plot
### plot with gg
surv_plot <- survfit(Surv(time = SurvivalTime, event = Censor) ~ 1 + Treatment, data = dat_pre_surv)
legend <- c("control", "low", "high", "focal")
line_types <- c("solid", "dashed", "dotted", "dotdash")
surv_plot <- ggsurvplot(surv_plot, data = dat_post_surv,
censor = FALSE,
legend.title = 'Treatment',
legend.labs = legend,
legend = c(0.15, 0.25),
xlab = 'Time (days)',
ylab = '% Surviving',
break.time.by = 2,
#xlim = c(0, 10),
ylim = c(0.8,1),
ggtheme = theme_bw(), # choose a theme like theme_bw theme_classic accoring to personl test and formatting requirements
palette = viridis(4, begin = 0, end = 1, option = 5), # choose colors - viridis palettes such as the classic or magma or any other are nice and mostly color blind friendly
conf.int = TRUE,
conf.int.alpha = 0.1,
linetype = line_types
)
# adjust further variables
surv_plot$plot <- surv_plot$plot + theme(panel.grid = element_blank()) +
theme(
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
# axis.ticks = element_line(linewidth = 1),
strip.text = element_text(size = 14),
legend.key.width = unit(2.5, "line"),
# panel.grid = element_line(colour = "gray80", size = 0.5),
# panel.background = element_rect(fill = "gray95")
)
surv_plot
### plot with gg
surv_plot <- survfit(Surv(time = SurvivalTime, event = Censor) ~ 1 + Treatment, data = dat_pre_surv)
legend <- c("control", "low", "high", "focal")
line_types <- c("solid", "dashed", "dotted", "dotdash")
surv_plot <- ggsurvplot(surv_plot, data = dat_post_surv,
censor = FALSE,
legend.title = 'Treatment',
legend.labs = legend,
legend = c(0.15, 0.25),
xlab = 'Time (days)',
ylab = '% Surviving',
break.time.by = 2,
#xlim = c(0, 10),
ylim = c(0.8,1),
ggtheme = theme_bw(), # choose a theme like theme_bw theme_classic accoring to personl test and formatting requirements
palette = viridis(4, begin = 0, end = 1, option = 5), # choose colors - viridis palettes such as the classic or magma or any other are nice and mostly color blind friendly
conf.int = TRUE,
conf.int.alpha = 0.4,
linetype = line_types
)
# adjust further variables
surv_plot$plot <- surv_plot$plot + theme(panel.grid = element_blank()) +
theme(
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
# axis.ticks = element_line(linewidth = 1),
strip.text = element_text(size = 14),
legend.key.width = unit(2.5, "line"),
# panel.grid = element_line(colour = "gray80", size = 0.5),
# panel.background = element_rect(fill = "gray95")
)
surv_plot
head(dat_behave)
table(dat_behave$Media.file)
# assignment of treatment:
# Get unique values of Media.file
unique_files <- unique(dat_behave$Media.file)
unique_files
head(dat_behave)
View(dat_behave)
table(dat_behave$treatment)
# assignment of treatment:
# Get unique values of Media.file
unique_files <- unique(dat_behave$Media.file)
# Create a vector of treatments that repeats to match the number of unique Media.file values
treatments <- rep(c("c", "l", "h", "s"), length.out = length(unique_files))
treatment_map <- setNames(treatments, unique_files)
# Assign the treatment based on the Media.file
dat_behave <- dat_behave %>% mutate(treatment = treatment_map[Media.file])
table(dat_behave$treatment)
# assignment of treatment:
# Get unique values of Media.file
unique_files <- unique(dat_behave$Media.file)
unique_files
# Create a vector of treatments that repeats to match the number of unique Media.file values
treatments <- rep(c("c", "l", "h", "s"), length.out = length(unique_files))
length(unique_files)
# Create a vector of treatments that repeats to match the number of unique Media.file values
treatments <- rep(c("c", "l", "h", "s"), length.out = length(unique_files))
treatment_map <- setNames(treatments, unique_files)
# Assign the treatment based on the Media.file
dat_behave <- dat_behave %>% mutate(treatment = treatment_map[Media.file])
table(dat_behave$treatment)
names(dat_behave)
# Get a feeling for the data...
group_by(dat_behave, treatment, Behavior) %>%
summarise(
count = n()
) %>% as.data.frame
# Summarize data by Media.file and Behavioral.category
behavior_summary <- dat_behave %>%
group_by(Media.file, Behavior) %>%
summarise(
num_behaviors = n(),  # Count the number of rows (behaviors)
total_duration = sum(Duration..s., na.rm = TRUE)  # Sum the durations, excluding NAs
) %>%
ungroup()
# Get a feeling for the data...
group_by(dat_behave, treatment) %>%
summarise(
count = n()
) %>% as.data.frame
group_by(dat_behave, treatment, Behavior) %>%
summarise(
count = n()
) %>% as.data.frame
group_by(dat_behave, Behavior) %>%
summarise(
count = n()
) %>% as.data.frame
# Summarize data by Media.file and Behavioral.category
behavior_summary <- dat_behave %>%
group_by(Media.file, Behavior) %>%
summarise(
num_behaviors = n(),  # Count the number of rows (behaviors)
total_duration = sum(Duration..s., na.rm = TRUE)  # Sum the durations, excluding NAs
) %>%
ungroup()
as.data.frame(behavior_summary)
behavior_summary
as.data.frame(behavior_summary)
behavior_summary
# Summarize data by Media.file and Behavioral.category
behavior_summary <- dat_behave %>%
group_by(Media.file, Behavior) %>%
summarise(
num_behaviors = n(),  # Count the number of rows (behaviors)
total_duration = sum(Duration..s., na.rm = TRUE)  # Sum the durations, excluding NAs
) %>%
ungroup()  %>% as.data.frame()
behavior_summary
View(behavior_summary)
# Summarize data by Media.file and Behavioral.category
behavior_summary <- dat_behave %>%
group_by(Media.file, Behavior) %>%
summarise(
treatment = first(treatment),  # Capture the treatment for each Media.file (unique per file)
num_behaviors = n(),  # Count the number of rows (behaviors)
total_duration = sum(Duration..s., na.rm = TRUE)  # Sum the durations, excluding NAs
) %>%
ungroup() %>%
as.data.frame()
behavior_summary
boxplot(num_behaviors ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
# Summarize data by Media.file and Behavioral.category
behavior_summary <- dat_behave %>%
group_by(Media.file, Behavior) %>%
summarise(
treatment = first(treatment),  # Capture the treatment for each Media.file (unique per file)
num_behaviors = n(),  # Count the number of rows (behaviors)
total_duration = sum(Duration..s., na.rm = TRUE)  # Sum the durations, excluding NAs
) %>%
ungroup() %>%
as.data.frame()
behavior_summary
boxplot(num_behaviors ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
boxplot(total_duration ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
unique(behavior_summary$Behavior)
for (b in behaviors) {
par(mfrow = c(1, 2)) # set up the plotting area to have two plots side by side
# Boxplot for num_behaviors ~ treatment
boxplot(num_behaviors ~ treatment,
data = behavior_summary[behavior_summary$Behavior == b, ],
main = paste("Behavior", b, ": num_behaviors"),
xlab = "Treatment",
ylab = "Number of Behaviors")
# Boxplot for total_duration ~ treatment
boxplot(total_duration ~ treatment,
data = behavior_summary[behavior_summary$Behavior == b, ],
main = paste("Behavior", b, ": total_duration"),
xlab = "Treatment",
ylab = "Total Duration")
# Reset the plotting layout to a single plot (optional)
par(mfrow = c(1, 1))
}
# Define the vector of behaviors
behaviors <- c("A", "G", "R", "P")
for (b in behaviors) {
par(mfrow = c(1, 2)) # set up the plotting area to have two plots side by side
# Boxplot for num_behaviors ~ treatment
boxplot(num_behaviors ~ treatment,
data = behavior_summary[behavior_summary$Behavior == b, ],
main = paste("Behavior", b, ": num_behaviors"),
xlab = "Treatment",
ylab = "Number of Behaviors")
# Boxplot for total_duration ~ treatment
boxplot(total_duration ~ treatment,
data = behavior_summary[behavior_summary$Behavior == b, ],
main = paste("Behavior", b, ": total_duration"),
xlab = "Treatment",
ylab = "Total Duration")
# Reset the plotting layout to a single plot (optional)
par(mfrow = c(1, 1))
}
mod <- lm(num_behaviors ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
summary(mod)
# if date were indeoendent we start here... just to explore
mod <- lm(num_behaviors ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
summary(mod)
Anova(mod)
# if date were indeoendent we start here... just to explore
mod <- lm(num_behaviors ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
summary(mod)
Anova(mod)
Anova(mod)
summary(mod)
letters <- c("a", "b", "c", "d")
emmeans(mod, pairwise ~ "treatment", adjust = "tukey")
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### 1.  prerequisites ####
# set up environment & load and prepare data for analysis
# load required libraries and functions:
pacman::p_load(tcltk, dplyr, ggplot2, viridis, lme4, car, coxme, multcomp, survival, viridisLite, survminer, emmeans) # easy way of "silent" loading of libraries
# if date were indeoendent we start here... just to explore
mod <- lm(num_behaviors ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
Anova(mod)
summary(mod)
# compact letter design cld
letters <- c("a", "b", "c", "d")
emmeans(mod, pairwise ~ "treatment", adjust = "tukey")
emmeans(mod, pairwise ~ "treatment", adjust = "BH")
cld(emmeans(mod, pairwise ~ "treatment", adjust = "tukey"), Letters = letters)
dat_behave
names(behavior_summary)
dat_behave_subsetted <- subset(dat_behave, Subject != "FOCAL" & Behavior == "A")
dat_behave_subsetted
#dat_behave_subsetted <- subset(dat_behave, Subject != "FOCAL" & Behavior == "A")
dat_behave_subsetted <- subset(dat_behave, !(Behavior == "A" & Subject == "FOCAL"))
dat_behave_subsetted
# Summarize data by Media.file and Behavioral.category
behavior_summary <- dat_behave_subsetted %>%
group_by(Media.file, Behavior) %>%
summarise(
treatment = first(treatment),  # Capture the treatment for each Media.file (unique per file)
num_behaviors = n(),  # Count the number of rows (behaviors)
total_duration = sum(Duration..s., na.rm = TRUE)  # Sum the durations, excluding NAs
) %>%
ungroup() %>%
as.data.frame()
boxplot(num_behaviors ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
boxplot(total_duration ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
# Summarize data by Media.file and Behavioral.category
behavior_summary <- dat_behave_subsetted %>%
group_by(Media.file, Behavior) %>%
summarise(
treatment = first(treatment),  # Capture the treatment for each Media.file (unique per file)
num_behaviors = n(),  # Count the number of rows (behaviors)
total_duration = sum(Duration..s., na.rm = TRUE)  # Sum the durations, excluding NAs
) %>%
ungroup() %>%
as.data.frame()
# Summarize data by Media.file and Behavioral.category
behavior_summary <- dat_behave%>%
group_by(Media.file, Behavior) %>%
summarise(
treatment = first(treatment),  # Capture the treatment for each Media.file (unique per file)
num_behaviors = n(),  # Count the number of rows (behaviors)
total_duration = sum(Duration..s., na.rm = TRUE)  # Sum the durations, excluding NAs
) %>%
ungroup() %>%
as.data.frame()
boxplot(num_behaviors ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
boxplot(total_duration ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
# check model assumptions
residuals <- residuals(mod)
plot(residuals)
qqnorm(residuals)
qqline(residuals, col = "red")
test_norm <- function(mod) { # function from Nathalie # resids
cat(blue("Testing normality of residuals for lm or lmer \n
(different testing of model assumptions required for other types of models)"))
resids <- residuals(object = mod)
if (length(resids) <= 300) {
print("Fewer than 300 data points so performing Shapiro-Wilk's test")
shapiro_result <- shapiro.test(resids)
print(shapiro_result)
p_value <- shapiro_result$p.value
if(p_value >= 0.05) {
cat(green("Data is normally distributed\n --> Model is fine... go ahead \U1F44D"))
} else {
cat(red("Warning: p value below 0.05\n-->  Data significantly deviate from a normal distribution. \nAdjust or change model!"))
}
} else {
print("More than 300 data points so using the skewness and kurtosis approach")
print("Skewness should be between -3 and +3 (best around zero)")
skew <- skewness(resids)
print(paste0("Skewness = ", skew))
print("Excess kurtosis (i.e. absolute kurtosis -3) should be less than 4; ideally around zero")
kurt <- kurtosis(resids)
print(paste0("Kurtosis = ", kurt))
if(skew >= -3 & skew <= 3 & kurt < 4){
cat(green("Model is fine... go ahead \U1F44D"))
} else {
cat(red("Warning: Adjust or change model!"))
}
}
}
test_norm(mod)
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### 1.  prerequisites ####
# set up environment & load and prepare data for analysis
# load required libraries and functions:
pacman::p_load(tcltk, dplyr, ggplot2, viridis, lme4, car, coxme, multcomp, survival, viridisLite, survminer, emmeans, crayon) # easy way of "silent" loading of libraries
test_norm(mod)
adder <- function(number) {
new_number <- number +1
print(new_number)
}
adder(2)
number <- 3
adder(number)
# if date were indeoendent we start here... just to explore
mod <- lm(num_behaviors ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
# if date were indeoendent we start here... just to explore
mod <- lm(num_behaviors ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
Anova(mod)
summary(mod)
test_norm(mod)
#transform data:
mod <- lm(log10(num_behaviors) ~ treatment, data = behavior_summary[behavior_summary$Behavior == "A", ])
Anova(mod)
summary(mod)
# compact letter design cld
letters <- c("a", "b", "c", "d")
emmeans(mod, pairwise ~ "treatment", adjust = "tukey")
cld(emmeans(mod, pairwise ~ "treatment", adjust = "tukey"), Letters = letters)
test_norm(mod)
# check model assumptions
residuals <- residuals(mod)
plot(residuals)
qqnorm(residuals)
qqline(residuals, col = "red")
hist(behavior_summary[behavior_summary$Behavior == "A", ]$num_behaviors)
#mod <- glm(dat$cocoon ~ dat$virus_full, family = "binomial")
summary(mod)
compareqqnorm(mod)
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### 1.  prerequisites ####
# set up environment & load and prepare data for analysis
# load required libraries and functions:
pacman::p_load(tcltk, dplyr, ggplot2, viridis, lme4, car, coxme, multcomp, survival, viridisLite, survminer, emmeans, crayon, blmeco) # easy way of "silent" loading of libraries
compareqqnorm(mod)
